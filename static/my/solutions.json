{"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":[],"37":[],"38":[],"39":[],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":[],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":[],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":[],"84":[],"85":[],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"839781960":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"954545647":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1541732340":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"michaelxi3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2315370446","body":"# line of reasoning\r\nCheck if each node is equal, with the input being two nodes\r\n\r\nInput and Output: The input consists of two tree nodes, and the output is whether the nodes are equal.\r\n\r\nRecursive Base Case: If any node is None, then both trees should be None for them to be considered equal. If one node is None and the other is not, the output should be false. The former case is true, and the latter case is false.\r\n\r\nRecursive Logic: To determine if the nodes are equal, check if the current nodes are equal, then check if the left nodes are equal and the right nodes are equal.- find \r\n# Code\r\n\r\n\r\n```\r\nclass Solution:\r\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\r\n        if not p and not q:\r\n            return True\r\n        if not p or not q:\r\n            return False\r\n        \r\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right) and p.val == q.val\r\n```\r\n# Complexity Analysis\r\nTime：O(N)\r\nSpace：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2317246065","body":"### **mind root**\n\nrecord all path at each node, add them all at the end\n### **code**\n\n```python\n# Definition for a binary tree node.\nclass TreeNode():\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n\n        def dfs(node):\n            if not node:\n                return []\n            next_path = dfs(node.left) + dfs(node.right)\n            if not next_path:\n                cur_path = [str(node.val)]\n            else:\n                cur_path = [str(node.val) + v for v in next_path]\n            return cur_path\n\n        return sum([int(v) for v in dfs(root)])\n```\n\n### **complexity**\n\n- time：O(n)\n- space：O(h)","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2324248818","body":"# Mindroad\r\nuse hashmap to store the number, iterate the list, to find if target - num is already seen, which is stored in hashmap\r\n# code\r\n\r\n```\r\nclass Solution:\r\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n        hash_map = dict()\r\n        for i in range(len(nums)):\r\n            cur = nums[i]\r\n            if target - cur in hash_map:\r\n                return [hash_map[target-cur], i]\r\n            else:\r\n                hash_map[cur] = i \r\n        return []\r\n```\r\n\r\n# Complexity Analysis\r\nTime: O(n)\r\nSpace: O(n)","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2337799935","body":"### **思路：读写指针**\n\n用读写指针，读指针看是否有新的元素，写指针用来写入元素。由于最后写的元素长度一定是小于等于原始的长度的，所以可以直接写\n\n### **代码**\n\n```python\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        read, write = 0, 0\n        while read < len(nums):\n            if nums[read] != nums[write]:\n                write += 1\n                nums[write] = nums[read]\n            read += 1\n        return write + 1\n```\n\n```python\n# 按删除n个元素模板写\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        write = 0\n        for n in nums:\n            if write == 0 or n != nums[write-1]:\n                nums[write] = n \n                write += 1\n        return write\n```\n\n### **复杂度分析**\n\n- 时间复杂度：O(n)\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/39#issuecomment-2352736625","body":"Sort tasks by enqueueTime and store the index along with the original times.\nUse a priority queue to process tasks based on the smallest processingTime.\nIterate through the sorted tasks, and add them to the heap when their enqueueTime is less than or equal to the current time.\nExtract tasks from the heap, process them, and update the current time.\nIf no tasks are available in the heap but there are still tasks to process, fast-forward the time to the enqueue time of the next available task.\n\n\n```\nimport heapq\n\ndef getOrder(tasks):\n    # Attach original indices to tasks and sort them by enqueueTime\n    tasks = [(enqueueTime, processingTime, i) for i, (enqueueTime, processingTime) in enumerate(tasks)]\n    tasks.sort()\n\n    # Initialize the result list and the heap\n    result = []\n    heap = []\n    time = 0\n    i = 0\n    n = len(tasks)\n\n    # Process until all tasks are handled\n    while len(result) < n:\n        # Push all tasks that have an enqueueTime <= current time\n        while i < n and tasks[i][0] <= time:\n            heapq.heappush(heap, (tasks[i][1], tasks[i][2]))  # (processingTime, index)\n            i += 1\n\n        if heap:\n            # Pop the task with the smallest processingTime (or smallest index in case of a tie)\n            processingTime, idx = heapq.heappop(heap)\n            time += processingTime\n            result.append(idx)\n        else:\n            # No tasks are available, so fast-forward time to the next task's enqueueTime\n            time = tasks[i][0]\n\n    return result\n\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/46#issuecomment-2368140162","body":"# thoughts\nSort the coordinates.\nBinary search for r in the range [0,max distance between houses/2].\nFor each r, try to cover all houses with 3 lights by greedily placing the lights as far to the right as possible while covering the current house.\n```\ndef can_cover_all_houses(nums, r):\n    # We will try to cover all houses with 3 lights and radius r\n    lights_used = 0\n    i = 0\n    n = len(nums)\n    \n    while i < n and lights_used < 3:\n        # Place the next light to cover house nums[i]\n        lights_used += 1\n        # Place the light at position nums[i] + r\n        light_pos = nums[i] + r\n        # Skip all houses covered by this light\n        while i < n and nums[i] <= light_pos + r:\n            i += 1\n    \n    # If all houses are covered\n    return i == n\n\ndef find_min_radius(nums):\n    nums.sort()\n    left, right = 0, (nums[-1] - nums[0]) / 2  # Search range for radius\n    \n    while right - left > 1e-6:  # Binary search with small tolerance\n        mid = (left + right) / 2\n        if can_cover_all_houses(nums, mid):\n            right = mid  # Try a smaller radius\n        else:\n            left = mid  # Increase the radius\n    \n    return left\n\n```\n\ntime complexity O(nlogn)\nspace complexity O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/56#issuecomment-2390366605","body":"### 解题思路\n> DFS\n1. 从陆地出发，遍历该陆地所在的岛屿\n-   从隶属于该岛屿的某一块陆地出发，向四个方向递归地进行DFS\n- 每次递归对下标进行判断，以区域的边界作为递归边界\n- 将已访问过的陆地置为0，以保证每块陆地只访问一次\n- 递归地返回整块岛屿陆地面积\n2. 找出所有岛屿的最大值\n\n### 代码实现\n> javaScript\n\n```\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    let x = grid.length;\n    let y = grid[0].length;\n    let max = 0;\n    // 遍历二维数组\n    for (let i = 0; i < x; i ++) {\n       for (let j = 0; j < y; j ++) {\n           if (grid[i][j] === 1) {\n               max = Math.max(max, areaOfIsland(grid, i, j, x, y));\n           }\n       } \n    }\n    return max;\n};\n\nvar areaOfIsland = function(grid, i, j, x, y) {\n    // 判断边界条件\n    if(i < 0 || i >= x || j < 0 || j >= y || grid[i][j] === 0) {\n        return 0\n    }\n    let ans = 1;\n    // 将遍历过的岛屿标记为0\n    grid[i][j] = 0;\n    // 遍历岛屿四周\n    ans += areaOfIsland(grid, i + 1, j, x, y);\n    ans += areaOfIsland(grid, i - 1, j, x, y);\n    ans += areaOfIsland(grid, i, j + 1, x, y);\n    ans += areaOfIsland(grid, i, j - 1, x, y);\n    return ans;\n}\n```\n### 复杂度分析\n- 时间复杂度 $O(R * C )$, 其中R为二维数组行数，C位列数\n- 空间复杂度 $O(R * C )$, 其中R为二维数组行数，C位列数","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/63#issuecomment-2405251192","body":"#### 代码实现\r\n\r\n```\r\n/**\r\n * @param {string} text1\r\n * @param {string} text2\r\n * @return {number}\r\n */\r\nvar longestCommonSubsequence = function(text1, text2) {\r\n    const m = text1.length, n = text2.length;\r\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\r\n    for (let i = 1; i <= m; i++) {\r\n        const c1 = text1[i - 1];\r\n        for (let j = 1; j <= n; j++) {\r\n            const c2 = text2[j - 1];\r\n            if (c1 === c2) {\r\n                dp[i][j] = dp[i - 1][j - 1] + 1;\r\n            } else {\r\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n            }\r\n        }\r\n    }\r\n    return dp[m][n];\r\n};\r\n```\r\n#### 复杂度分析：\r\n- 时间复杂度：$O(mn)$, 其中 mm 和 nn 分别是字符串text1和 text2的长度\r\n- 空间复杂度：$O(mn)$,其中 mm 和 nn 分别是字符串text1和 text2的长度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rabbit2010520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ellie-wu05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yopming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckytwj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzz607":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoulufeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxoojs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wyz999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ricjli":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhaoling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flaming-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gelxgx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jessie725":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lsunxh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qilin88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengheng-yun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smz1995":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"size-of":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moyuanhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"9vivian88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guxuehua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirosola":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maoting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youzhaing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hanwangxxx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dujt-x":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"degndaixingqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gzgzgzgzgzgz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyi-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zenwangzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyyxw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fourierhai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangz001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haoyangxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chjillout":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mhcn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coconutice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackgaoyuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufeng727":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fontendart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingchehu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cobayaz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomato-tomato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xfliudx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"djd28176":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xilutian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shunanch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yppah-eb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raychenlei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"woshichuanqilz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"willuuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christina-soda":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jia98shanliang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user-vannnn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnvsd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yueza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawyuan97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victorhuang99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cusanity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jay-xzj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiradaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyue-ma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"steven72574":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowangcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james0608":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaneyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"azl397985856":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chengfengfengwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bulingbulingbuling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eden-ye":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingtrains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"starorbiting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo-xiaoxiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"passengersa":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shellylcooper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testplm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tom-zhouch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skylarxu214":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taihui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huaxueguakele":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yang-chenyu104":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mlking15":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"-3":[],"cyonline":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jetery":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"klspta":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bookyue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jancerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"buer1121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ceramickitten":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gg925407590":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alyenor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dark-volute":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmastella":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dd2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayloveless":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuexi001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nineis7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsw9818":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaomingshixiaotang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snmyj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flipn9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wabw1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqmmy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-pricity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sclihuiming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amazeding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tzuikuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ringo1597":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brucezhang-utf-8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luanxing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihua1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cuizezhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiandao043":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"restlessbreeze":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruikiwi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiminren":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saitochen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtdcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"albert556":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wuxiaoshawn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zrtch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzhu096":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whoam-challenge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"syh-coder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaaller":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyrie96521":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cavecrypto":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cxgbro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erjian96":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bwspsu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arinzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mdge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yin02":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elsa-zhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asur4s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlesugarman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhihaowan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"apockira":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guowei0223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuqianyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sj941127":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yongxi-zhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darwintk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"h-steven":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mischaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wurongronga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miduoliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyshenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y4h2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yoco323":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2312987083","body":"class Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if (root == null) {\r\n            return 0;\r\n        } else {\r\n            return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\r\n        }\r\n\r\n    }\r\n}","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2313017741","body":"public boolean isSameTree(TreeNode p, TreeNode q) {\n    // 两个节点都为空，返回true\n    if (p == null && q == null) {\n        return true;\n    } \n    // 只有一个节点为空，返回false\n    else if (p == null || q == null) {\n        return false;\n    } \n    // 两个节点的值不同，返回false\n    else if (p.val != q.val) {\n        return false;\n    } \n    // 递归检查左子树和右子树\n    else {\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}\n时间复杂度 O(n) 遍历一圈\n平均空间复杂度：O(log(n))，适用于平衡二叉树。\n最差空间复杂度：O(n)，适用于完全不平衡的二叉树。","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322929514","body":"public class Codec {\n    public String serialize(TreeNode root) {\n        if(root==null) return \"null\";\n        return root.val+\",\"+serialize(root.left)+\",\"+serialize(root.right);\n    }\n    public TreeNode deserialize(String data) {\n        String[] req=data.split(\",\");\n        ArrayList<String> r=new ArrayList<>(Arrays.asList(req));\n        return dfsdeserialize(r);     \n    }\n\n    public TreeNode dfsdeserialize(ArrayList<String> r){\n        if(\"null\".equals(r.get(0))){\n            r.remove(0);\n            return null;\n        }\n        TreeNode node=new TreeNode(Integer.valueOf(r.get(0)));\n        r.remove(0);\n        node.left=dfsdeserialize(r);\n        node.right=dfsdeserialize(r);\n        return node;\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanshuiqiankun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"annabellhyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huibinny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggmybro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleetcodejourney":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"want2333":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"staringwhere":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryanbaiyansong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dou-yu-xuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cs12300":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiehw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aesir-idun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaldsk12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hxj2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhilin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yfu6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengsixing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"import-ant":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangqianqian202301":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"airwalkers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hjy-u":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"csthaha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zepherust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feefeefee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hughlin07":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huizsh":[null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308799090","body":"```\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        visited = set()\n        pos = head\n        while pos:\n            if pos in visited:\n                return pos\n            visited.add(pos)\n            pos = pos.next\n        return None\n```\nThe detectCycle method checks for a cycle in a linked list. It keeps track of visited nodes using a set (visited), and if a node is revisited, it returns that node, indicating the start of the cycle. If no cycle is found, the method returns None.","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2311437519","body":"时间复杂度O(n), 空间复杂度 O(height)\n```\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if root is None:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2313736878","body":"```\n# 时间复杂度：O(min(m,n))\n# 空间复杂度：O(min(height(m), height(n)))\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None: \n            return True\n        elif p is None or q is None:\n            return False\n        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2316828993","body":"```\n# 时间复杂度 O(h)\n# 空间复杂度 O(n)\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        def dfs(node, cur):\n            if not node: return cur\n            if not node.left and not node.right: return cur*10+node.val\n            leftsum = rightsum = 0\n            if node.left:\n                leftsum = dfs(node.left, cur*10+node.val)\n            if node.right:\n                rightsum = dfs(node.right, cur*10+node.val)\n            return leftsum + rightsum\n        return dfs(root, 0)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2320190692","body":"```\n# 思路：层序遍历，找最底层第一个节点的值\n# 时间复杂度：O（n)\n# 空间复杂度：O (m) m是单层最多的结点数\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        q = deque()\n        q.append(root)\n        while len(q) != 0:\n            num = len(q)\n            q1 = deque()\n            for i in range(num):\n                item = q.popleft()\n                if i == 0:\n                    result = item.val\n                if item.left:\n                    q1.append(item.left)\n                if item.right:\n                    q1.append(item.right)\n            q = q1\n        return result\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322827528","body":"```\nclass Codec:\n\n# BFS 遍历二叉树\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        queue = deque([root])\n        result = ''\n        while len(queue) > 0:\n            size = len(queue)\n            for i in range(size):\n                item = queue.popleft()\n                if not item:\n                    result += \"null,\"\n                else:\n                    result += str(item.val) + \",\"\n                    queue.append(item.left)\n                    queue.append(item.right)\n        return result[:-1]\n        \n#https://leetcode-solution.cn/solutionDetail?type=3&id=17&max_id=2\n#用三个指针分别指向数组第一项，第二项和第三项（如果存在的话），这里用 p1，p2，p3 来标记，分别表示当前处理的节点，当前处理的节点的左子节点和当前处理的节点的右子节点。\n#p1 每次移动一位，p2 和 p3 每次移动两位。\n#p1.left = p2; p1.right = p3。\n#持续上面的步骤直到 p1 移动到最后。\n\n    def deserialize(self, data):\n        if data == 'null': return None\n        nodes = data.split(',')\n        root = TreeNode(nodes[0])\n        q = collections.deque([root])\n        i = 0\n        while q and i < len(nodes) - 2:\n            cur = q.popleft()\n            lv = nodes[i + 1]\n            rv = nodes[i + 2]\n            i = i + 2\n            if lv != \"null\":\n                l = TreeNode(lv)\n                q.append(l)\n                cur.left = l\n            if rv != \"null\":\n                r = TreeNode(rv)\n                q.append(r)\n                cur.right = r\n        return root\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2329077620","body":"```\nclass Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        n = len(points)\n        ans = 0\n        for i in range(n):\n            m = collections.defaultdict(int)\n            for j in range(n):\n                dist = abs(points[i][0] - points[j][0]) ** 2 + abs(points[i][1] - points[j][1]) ** 2\n                m[dist] += 1\n            for count in m.values():\n                ans += count * (count-1)\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2330530759","body":"```\nclass Solution:\n# 暴力法\n# 时间复杂度 O(n**2)\n# 空间复杂度 O(n)\n#    def lengthOfLongestSubstring(self, s: str) -> int:\n#        ans = 0\n#        n = len(s)\n#        for i in range(n):\n#            m = collections.defaultdict(int)\n#            for j in range(i, n):\n#                if m[s[j]] != 0:\n#                    break\n#                m[s[j]] = 1\n#                ans = max(ans, j - i + 1)\n#        return ans\n\n# 滑动窗口，l和r指针维护一个移动窗口，移动窗口里字符不重复，遍历一遍字符串，发现重复字符，把左指针指向字符上一次出现时的下个位置\n# 用一个字典记录字符最新出现的位置\n# 时间复杂度 O（n)\n# 空间复杂度 O (m) m为字符集元素个数\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ans = 0\n        n = len(s)\n        m = {}\n        l = r = 0\n        while r < n:\n            pos = m.get(s[r], -1)\n            if (pos >=l and pos <= r): l = pos + 1\n            m[s[r]] = r\n            ans = max(ans, r - l + 1)\n            r = r + 1\n        return ans\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2333186544","body":"```class Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        res = []\n        if not words:\n            return res\n        \n        word_map = {}\n        for word in words:\n            word_map[word] = word_map.get(word, 0) + 1\n        \n        s_len, word_len, count = len(s), len(words[0]), len(words)\n        \n        for i in range(s_len - word_len * count + 1):\n            cur = s[i:i + word_len * count]\n            temp_map = {}\n            j = 0\n            \n            while j < len(cur):\n                word = cur[j:j + word_len]\n                \n                if word not in word_map:\n                    break\n                \n                temp_map[word] = temp_map.get(word, 0) + 1\n                \n                if temp_map[word] > word_map[word]:\n                    break\n                \n                j += word_len\n            \n            if j == len(cur):\n                res.append(i)\n        \n        return res\n```","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2345355640","body":"```\nclass Solution:\n     def findJudge(self, N, trust):\n        in_degree = [0] * (N + 1)\n        out_degree = [0] * (N + 1)\n        for a, b in trust:\n            in_degree[b] += 1\n            out_degree[a] += 1\n        for i in range(1, N + 1):\n            if in_degree[i] == N - 1 and out_degree[i] == 0:\n                return i\n        return -1\n```","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/41#issuecomment-2357601473","body":"```\nimport collections\n\nclass Solution:\n\n\t#Function Definitions:\n\t#\t1. greater_cost(ca, cb):\n\t#\tComputes the cost to make all characters in one string strictly greater than all characters in the other string.\n\t#\tIterates over possible character values from a to z (indexed as 0 to 25).\n\t#\tFor each character value i, it calculates the cost to:\n\t#\tRemove all characters in ca less than the current character value i.\n\t#\tRemove all characters in cb greater than or equal to the current character value i.\n\t#\tThe minimum cost is tracked and returned.\n\t#\t2. equal_cost(ca, cb):\n\t#\tComputes the cost to make the strings share at least one common character.\n\t#\tFor each character, calculates the total length of both strings minus the counts of that character in each string.\n\t#\tThe minimum cost is tracked and returned.\n\t#\t3. minCharacters Method:\n\t#\tCalculates the minimum operations needed by considering:\n\t#\tgreater_cost(ca, cb): Cost to make A strictly greater than B.\n\t#\tgreater_cost(cb, ca): Cost to make B strictly greater than A.\n\t#\tequal_cost(ca, cb): Cost to ensure both strings have at least one common character.\n\t#\tReturns the minimum of these values.\n\n    # Time Complexity: O(m+n)\n    # Space Complexity: O(26)\n    def minCharacters(self, A: str, B: str) -> int:\n        ca = collections.Counter(A)\n        cb = collections.Counter(B)\n        \n        # Cost to make all characters in A greater than all characters in B\n        def greater_cost(ca, cb):\n            ans = float(\"inf\")\n            for i in range(1, 26):\n                count = 0\n                for j in range(i):\n                    count += ca[chr(97 + j)]  # Remove all chars less than current value\n                for j in range(i, 26):\n                    count += cb[chr(97 + j)]  # Remove all chars >= current value\n                ans = min(ans, count)\n            return ans\n\n        # Cost to ensure A and B share at least one common character\n        def equal_cost(ca, cb):\n            ans = float(\"inf\")\n            for i in range(26):\n                ans = min(ans, len(A) + len(B) - ca[chr(97 + i)] - cb[chr(97 + i)])\n            return ans\n\n        return min(greater_cost(ca, cb), greater_cost(cb, ca), equal_cost(ca, cb))\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/42#issuecomment-2359854757","body":"```\n    def sortArray(self, nums):\n        counts = [0] * (50000 * 2 + 1)\n        res = []\n        for num in nums:\n            counts[50000 + num] += 1\n        for i in range(len(counts)):\n            while counts[i] > 0:\n                res.append(i - 50000)\n                counts[i] -= 1\n        return res\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2362538994","body":"```\n    def mySqrt(self, x: int) -> int:\n        l, r = 0, x\n        while l <= r:\n            mid = (l+r) // 2\n            if mid ** 2 == x: return mid\n            if mid ** 2 > x:\n                r = mid - 1\n            if mid ** 2 < x:\n                l = mid + 1\n        return r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/44#issuecomment-2365095483","body":"```\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        l, r = 1, n\n        while l <= r:\n            mid = (l + r) // 2\n            if isBadVersion(mid): r = mid - 1\n            else: l = mid + 1\n        return l\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/49#issuecomment-2376942348","body":"```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        res = 0\n        temp = 0\n        vowels = set(['a','e','i','o','u'])\n        for i in range(k):\n            res += s[i] in vowels\n        if res==k: return k\n        temp = res\n        for i in range(k,len(s)):\n            temp += (s[i] in vowels) - (s[i-k] in vowels)\n            res = max(temp,res)\n            if res ==k: return k\n        return res\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/53#issuecomment-2381904447","body":"```\nclass Solution:\n    def solve(self, A, target):\n        if not A and not target: return 0\n        target = sum(A) - target\n        ans = len(A) + 1\n        i = t = 0\n\n        for j in range(len(A)):\n            t += A[j]\n            while i <= j and t > target:\n                t -= A[i]\n                i += 1\n            if t == target: ans = min(ans, len(A) - (j - i + 1))\n        return -1 if ans == len(A) + 1 else ans\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/57#issuecomment-2393035002","body":"```\nclass Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        steps = -1\n        queue = collections.deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 1])\n        if len(queue) == 0 or len(queue) == n ** 2: return steps\n        while len(queue) > 0:\n            for _ in range(len(queue)):\n                x, y = queue.popleft(0)\n                for xi, yj in [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]:\n                    if xi >= 0 and xi < n and yj >= 0 and yj < n and grid[xi][yj] == 0:\n                        queue.append((xi, yj))\n                        grid[xi][yj] = -1\n            steps += 1\n\n        return steps\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/61#issuecomment-2399576624","body":"```\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        length = len(nums)\n        if length == 1:\n            return nums[0]\n        else:\n            prev = nums[0]\n            cur = max(prev, nums[1])\n            for i in range(2, length):\n                cur, prev = max(prev + nums[i], cur), cur\n            return cur\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/66#issuecomment-2408797044","body":"```\nclass Solution:\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n        if desiredTotal <= maxChoosableInteger:\n            return True\n        if sum(range(maxChoosableInteger + 1)) < desiredTotal:\n            return False\n        # picked 用于保存当前已经选择过的数。\n        # acc 表示当前累计的数字和\n        def backtrack(picked, acc):\n            if acc >= desiredTotal:\n                return False\n            if len(picked) == maxChoosableInteger:\n                # 说明全部都被选了，没得选了，返回 False， 代表输了。\n                return False\n            for n in range(1, maxChoosableInteger + 1):\n                if n not in picked:\n                    picked.add(n)\n                    # 对方有一种情况赢不了，我就选这个数字就能赢了，返回 true，代表可以赢。\n                    if not backtrack(picked, acc + n):\n                        picked.remove(n)\n                        return True\n                    picked.remove(n)\n            return False\n\n        # 初始化集合，用于保存当前已经选择过的数。\n        return backtrack(set(), 0)\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/71#issuecomment-2422435302","body":"```\nclass Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n        s.sort(reverse=True)\n        g.sort(reverse=True)\n        gi, si = 0, 0\n        count = 0\n        while gi < len(g) and si < len(s):\n            if s[si] >= g[gi]:\n                count += 1\n                si += 1\n            gi += 1\n        return count\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hshen11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"horace7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzh0114":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dragonfcl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huifeng248":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sarah11qing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"el1as7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zcytm3000":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xb798298436":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"limbo42":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorapocket":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoeyzyzyzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jasonqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lp1506947671":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"texamc2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joemonkeylee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dominique9898":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wl678":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"meisgithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sye9286":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fuku-l":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangliqi1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richardtaok":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chocolate-emperor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjiahuan17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seanutf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyong-hub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erquaner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiujingxukong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x1aox1a":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"drinkmorekaik":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dinjufen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzmt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"munmust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan-jie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hktangshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpbc007":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linlizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"firehaosky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chao-cc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quieter2018":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeliu13":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaoq777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxiner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franciszq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangqinsen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"manwzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"soso1105":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenya-zhu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wty9sky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skyoct":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingzxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaodingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jyjsunny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aoxiangw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"enrilwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aswrise":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aneureka":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ljqchlsw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jingyuzhou123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dianlandu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jameswangxin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenxied":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuozhouzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shin-guid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bochengwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyo-tom":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uratora":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guitarys":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sosdogecoin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zol013":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lrwhc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwewwt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyk1337":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyu1131":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"diana21170648":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"61hhh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quaaaaaack":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acy925":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bi9potato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangsizhongbin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaoygcq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"catkathy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yqycs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuxinyu-znb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freesan44":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo660":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sencc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"randong22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beginner-jamji":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yzhyzhyzh123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunstrongchina":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dongzegithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"metsystem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miller-em":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorian-byte":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yizhewill":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaojunch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhouliuhuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beanza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kingxiaozhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ygnauh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzbwzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iambigchen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weiboshi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"master-guang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jennyjgao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangjay408":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chang-you":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rocjemaintiendrai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ainfinitedz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christ36":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengistchan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiyingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyli4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"momogir":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jamjid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freeroo2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ycan253":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laurallalala":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"danielyan86":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rennzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"larscheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qingkediguo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"adfvcdxv":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"javajianghu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chloe-c11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"verkru":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eggeggliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dr-kkk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinhma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"emergence23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"0christ1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junru281":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joe-the-plumber":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jsaki":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"witerth":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ludwig-ll":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luster-lyl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smallppgirl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"realduxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awilekong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwz223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjinzhepro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"atom-set":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coderxiaowq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hillsonziqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexzhang-mini":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xil324":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bordergong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hawkins-hjq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cathyshang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"greyqt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanglimbo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rao-qianlin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dtjk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"martina001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lxy1108":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franklinsworld666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brainlds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huamulanyyds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eclairs46":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maike-hps":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sanjiu81":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qinmengx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yashuning":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luzhaofeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lizhao-liu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yukibei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hermione666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yyyyytc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zin-next":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pandapls":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackinai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"godkun":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2291147048","body":"### 思路\r\n- 不能通过将num数组变成数字去解决\r\n- 迭代、循环控制、向前进位\r\n\r\n### 代码\r\n```ts\r\nfunction addToArrayForm(num: number[], k: number): number[] {\r\n  let f = 0\r\n  let n = num.length - 1\r\n  const result: number[] = []\r\n\r\n  while (n >= 0 || k > 0) {\r\n    const x = n >= 0 ? num[n] : 0\r\n    const y = k % 10\r\n\r\n    const sum = x + y + f\r\n    f = Math.floor(sum / 10)\r\n    result.push(sum % 10)\r\n\r\n    if (n >= 0) n--\r\n    k = Math.floor(k / 10)\r\n  }\r\n\r\n  if (f) result.push(f)\r\n  return result.reverse()\r\n}\r\n\r\n```\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293094680","body":"### 思路\r\n- 字符串变成数组，对数组循环，以循环下标为基准切分左右为数组1和数组2，再算两边绝对距离\r\n- 算法知识：迭代、循环、数组切分、绝对距离\r\n\r\n### 代码\r\n#### TypeScript实现\r\n```ts\r\nfunction shortestToChar(s: string, c: string): number[] {\r\n    const sArr = s.split('')\r\n    const reArr:number[] = []\r\n\r\n    sArr.forEach((item, index) => {\r\n      const cursor = item\r\n      if (cursor == c) reArr[index] = 0\r\n      else {\r\n        const left = sArr.slice(0, index+1).reverse()\r\n        const right = sArr.slice(index)\r\n\r\n        const leftDistance = left.indexOf(c)\r\n        const rightDistance = right.indexOf(c)\r\n\r\n        if (leftDistance == -1) {\r\n          reArr[index] = rightDistance\r\n        } else if (rightDistance == -1) {\r\n          reArr[index] = leftDistance\r\n        } else {\r\n          reArr[index] = leftDistance - rightDistance >= 0 ? rightDistance : leftDistance\r\n        }\r\n      }\r\n    })\r\n\r\n    return reArr\r\n}\r\n```\r\n复杂度分析\r\n\r\n时间复杂度：O(N^2)\r\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295113943","body":"### 思路\r\n栈、压栈和出栈、平衡括号问题\r\n\r\n### 代码\r\n#### Python实现\r\n```py\r\nclass Solution:\r\n    # \"3[a]2[bc]\"\r\n    def decodeString(self, s: str) -> str:\r\n        # 栈\r\n        stack = []\r\n        \r\n        # 重复数字\r\n        num = 0\r\n        # 字符串\r\n        str = ''\r\n\r\n        # 循环\r\n        for c in s:\r\n            if c.isdigit():\r\n                num = num * 10 + int(c)\r\n            elif c == '[':\r\n                # 压栈\r\n                stack.append((num, str))\r\n                num = 0\r\n                str = ''\r\n            elif c == ']':\r\n                # 出栈\r\n                a, b = stack.pop()\r\n                str = b + str * a\r\n            else:\r\n                str += c\r\n\r\n        return str\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2297776150","body":"### 思路\r\n数据结构：栈、队列\r\n\r\n实现方案：一个栈实现、两个栈实现\r\n\r\n### 代码\r\n\r\n#### TypeScript实现 【一个栈实现】\r\n```ts\r\nclass MyQueue {\r\n    private arr: Number[]\r\n    constructor() {\r\n        this.arr  = []\r\n    }\r\n\r\n    push(x: number): void {\r\n        this.arr.push(x)\r\n    }\r\n\r\n    pop(): number {\r\n        const last = this.arr[0]\r\n        this.arr.shift()\r\n        // if (this.arr.length) return this.arr.pop() as number\r\n        return last as number\r\n    }\r\n\r\n    peek(): number {\r\n        return this.arr[0] as number\r\n    }\r\n\r\n    empty(): boolean {\r\n        return this.arr.length == 0\r\n    }\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)\r\n\r\n","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2301817177","body":"### 思路\r\n数据结构：链表\r\n\r\n实现方案：\r\n  1.  确定表长度、找到尾节点\r\n  2. 确定旋转次数\r\n  3. 找到length - k - 1的表节点\r\n  4. 尾节点next指向head，3步骤节点变成尾节点\r\n\r\n### 代码\r\n\r\n#### TypeScript实现\r\n```ts\r\nfunction rotateRight(head: ListNode | null, k: number): ListNode | null {\r\n  if (!head || !head.next || k === 0) return head\r\n\r\n  let length = 1\r\n  let tail = head\r\n  while (tail.next) {\r\n    tail = tail.next\r\n    length++\r\n  }\r\n\r\n  k = k % length\r\n  if (k === 0) return head\r\n\r\n  // 找到新的头节点的前一个节点\r\n  let newTail = head\r\n  for (let i = 0; i < length - k - 1; i++) {\r\n    newTail = newTail.next\r\n  }\r\n  // 旋转链表\r\n  const newHead = newTail.next\r\n  newTail.next = null\r\n  tail.next = head\r\n\r\n  return newHead\r\n}\r\n\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2303537091","body":"### 思路\r\n数据结构：链表\r\n\r\n实现方案：\r\n  1.  此题重点是创建虚拟头节点\r\n\r\n### 代码\r\n\r\n#### TypeScript实现\r\n```ts\r\nfunction swapPairs(head: ListNode | null): ListNode | null {\r\n  // 虚拟头节点\r\n  const virtual = new ListNode(0, head)\r\n  let cur = virtual\r\n  while (cur.next && cur.next.next) {\r\n    const one = cur.next\r\n    const two = one.next\r\n\r\n    cur.next = two\r\n    one.next = two.next\r\n    two.next = one\r\n    cur = one\r\n  }\r\n  return virtual.next\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2306370732","body":"### 思路\r\n数据结构：链表、二叉树\r\n\r\n实现思路：\r\n  1.  看到有序链表，想到快慢指针找到中间节点\r\n  2. 中间节点作为树root\r\n  3. 断开中间节点左侧链表\r\n  4. 递归左右子树\r\n  5. 确定递归出口\r\n\r\n### 代码\r\n\r\n#### TypeScript实现\r\n```ts\r\nfunction sortedListToBST(head: ListNode | null): TreeNode | null {\r\n  // 递归出口\r\n  if (!head) return null\r\n  if (!head.next) return new TreeNode(head.val)\r\n  // 找到链表的中间节点\r\n  let slow: ListNode = head\r\n  let fast: ListNode = head\r\n  let prev: ListNode = null\r\n  while (fast && fast.next) {\r\n    prev = slow\r\n    slow = slow.next\r\n    fast = fast.next.next\r\n  }\r\n  // 断开链表 prev代表左子树\r\n  if (prev) prev.next = null\r\n  // 中间节点作为head tree node\r\n  const root = new TreeNode(slow.val)\r\n  // 递归左子树\r\n  root.left = sortedListToBST(head)\r\n  // 递归右子树\r\n  root.right = sortedListToBST(slow.next)\r\n  return root\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(1)\r\n空间复杂度：log(n)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2309170971","body":"### 思路\r\n数据结构：链表\r\n\r\n实现思路：此题最重要的思想是学会运用交叉遍历\r\n\r\n### 代码\r\n\r\n#### Python实现\r\n```py\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        if not headA or not headB:\r\n            return None\r\n        pointerA = headA\r\n        pointerB = headB\r\n        while pointerA != pointerB:\r\n            # 交替遍历\r\n            pointerA = headB if pointerA is None else pointerA.next\r\n            pointerB = headA if pointerB is None else pointerB.next\r\n\r\n        return pointerA\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)\r\n\r\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2309293874","body":"### 思路\r\n数据结构：环形链表\r\n\r\n实现思路：用了快慢指针判断是否有环，如果相遇则在环中。但是没有get到 \r\n将 slow 指针重新指向链表的头节点，然后 slow 和 fast 每次各移动一步，直到它们再次相遇，相遇点即为环的起始节点。这个逻辑，学习到了。\r\n\r\n### 代码\r\n\r\n#### TS实现\r\n```ts\r\nfunction detectCycle(head: ListNode | null): ListNode | null {\r\n  if (head === null) return null\r\n  let slow = head\r\n  let fast = head\r\n\r\n  while (fast !== null && fast.next !== null) {\r\n    slow = slow.next\r\n    fast = fast.next.next\r\n    if (slow === fast) {\r\n      slow = head\r\n      while (slow !== fast) {\r\n        slow = slow.next\r\n        fast = fast.next\r\n      }\r\n      return slow\r\n    }\r\n  }\r\n  return null\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)\r\n\r\n\r\n\r\n","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2312221905","body":"### 思路\r\n数据结构：二叉树\r\n\r\n实现思路：递归出口+递归\r\n\r\n### 代码\r\n\r\n#### TS实现\r\n```ts\r\nfunction maxDepth(root: TreeNode | null): number {\r\n  if (!root) return 0\r\n  const l = maxDepth(root.left)\r\n  const r = maxDepth(root.right)\r\n  return Math.max(l, r) + 1\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)\r\n\r\n\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2314391158","body":"### 思路\r\n- 递归\r\n- 找递归终结\r\n- 处理同层逻辑\r\n- 下探到下一层\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction isSameTree(p: TreeNode | null, q: TreeNode | null): boolean {\r\n\tif (!p && !q) return true\r\n\tif (!p || !q) return false\r\n\tif (p.val !== q.val) return false\r\n\treturn isSameTree(p.left, q.left) && isSameTree(p.right, q.right)\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2322736452","body":"### 思路\r\n- 递归\r\n- 找递归终结\r\n- 处理同层逻辑\r\n- 下探到下一层\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction sumNumbers(root: TreeNode | null): number {\r\n  const dfs = (node: TreeNode | null, currentSum: number): number => {\r\n    if (!node) return 0;\r\n\r\n    // 计算当前路径的数字\r\n    currentSum = currentSum * 10 + node.val;\r\n\r\n    // 如果是叶子节点，返回当前路径的数字\r\n    if (!node.left && !node.right) {\r\n      return currentSum;\r\n    }\r\n\r\n    // 递归计算左子树和右子树的路径数字之和\r\n    return dfs(node.left, currentSum) + dfs(node.right, currentSum);\r\n  };\r\n\r\n  return dfs(root, 0);\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2322740325","body":"### 思路\r\n- bfs\r\n- 使用队列，作者书中提了\r\n- 先进先出\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction findBottomLeftValue(root: TreeNode | null): number {\r\n  let queue: TreeNode[] = [root];\r\n  let bottomLeftValue: number | null = null;\r\n\r\n  while (queue.length > 0) {\r\n    const levelSize = queue.length;\r\n    for (let i = 0; i < levelSize; i++) {\r\n      const currentNode = queue.shift()!;\r\n      if (i === 0) bottomLeftValue = currentNode.val;\r\n      if (currentNode.left) queue.push(currentNode.left);\r\n      if (currentNode.right) queue.push(currentNode.right);\r\n    }\r\n  }\r\n\r\n  return bottomLeftValue;\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":false},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2323608830","body":"### 思路\r\n- 暴力法或者使用map\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction twoSum(nums: number[], target: number): number[] {\r\n  const map = {}\r\n  for (let index = 0; index < nums.length; index++) {\r\n    const element = nums[index];\r\n    const k = target - element\r\n    if (map[k] >= 0) return [index, map[k]]\r\n    else map[element] = index\r\n  }\r\n};\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2329056795","body":"### 思路\r\n- 一次循环+map记录所有元素的出现次数\r\n- 把map转换成二维数组，并进行降序\r\n- 对二维数组进行遍历取频率前k大的数字\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction topKFrequent(nums: number[], k: number): number[] {\r\n  const map = {}\r\n  const len = nums.length\r\n  if (len <= k) return [...new Set(nums)]\r\n  for (let index = 0; index < nums.length; index++) {\r\n    const element = nums[index]\r\n    if (!map[element]) map[element] = 1\r\n    else map[element] = map[element] + 1\r\n  }\r\n  const entries = Object.entries(map)\r\n  // @ts-ignore\r\n  entries.sort((a, b) => b[1] - a[1])\r\n  let num = k\r\n  let result = []\r\n  for (let index = 0; index < entries.length; index++) {\r\n    if (num >= 1) {\r\n      num = num - 1\r\n      // @ts-ignore\r\n      result.push(entries[index][0])\r\n    }\r\n  }\r\n  return result\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(NLogN)\r\n空间复杂度：O(N)","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2330399207","body":"### 思路\r\n- 暴力循环或者滑动窗口都能解决这个题目\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2338329459","body":"### 思路\r\n- 快慢指针\r\n- 做好边界判断\r\n\r\n### 代码\r\n#### TS实现\r\n```ts\r\nfunction middleNode(head: ListNode | null): ListNode | null {\r\n    if (!head.next) return head\r\n    if (!head.next.next) return head.next\r\n    // 快慢指针\r\n    let slow = head\r\n    let fast = head\r\n    while(fast && fast.next) {\r\n        slow = slow.next\r\n        fast = fast.next.next\r\n    }\r\n    return slow\r\n};\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2342434620","body":"### 思路\r\n- 快慢指针\r\n- while循环\r\n\r\n### 代码\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def removeDuplicates(self, nums: List[int]) -> int:\r\n        slow, fast = 0, 1\r\n        while fast < len(nums):\r\n            if nums[fast] != nums[slow]:\r\n                slow = slow + 1\r\n                nums[slow] = nums[fast]\r\n            fast = fast + 1\r\n        return slow + 1\r\n```\r\n\r\n贴一个leetcode一个不错的题解图\r\n![image](https://github.com/user-attachments/assets/d66d121a-fba3-4f0a-b568-17e140c90137)\r\n\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/33#issuecomment-2342609290","body":"### 思路\r\n- 双指针\r\n- while循环\r\n- 要想到二分查找，从中间节点开始比较\r\n- 确定退出循环条件\r\n- 边界要处理好\r\n\r\n### 代码\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def searchInsert(self, nums: List[int], target: int) -> int:\r\n        lens  = len(nums)\r\n        # 首尾指针\r\n        left = 0\r\n        right = 0\r\n        # 右指针在最右边\r\n        right = lens\r\n        if target > nums[right]: return lens\r\n        if target < nums[0]: return 0\r\n\r\n        while right >= left:\r\n            mid = (left+right)//2\r\n            if nums[mid] == target:\r\n                return mid\r\n            elif nums[mid] < target:\r\n                left = mid + 1\r\n            else:\r\n                right = mid - 1\r\n        return left\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/34#issuecomment-2348304084","body":"### 思路\r\n- 初始化数据结构\r\n- 遍历数组\r\n- 维护窗口\r\n- 维护双端队列\r\n- 记录结果\r\n\r\n### 代码\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\r\n        if not nums: return []\r\n        window,res = [],[]\r\n        for i,x in enumerate(nums):\r\n            if i >= k and window[0] <= i -k:\r\n                window.pop(0)\r\n            while window and nums[window[-1]] <= x:\r\n                window.pop()\r\n            window.append(i)\r\n            if i >= k - 1:\r\n                res.append(nums[window[0]])\r\n        return res\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2348708093","body":"### 思路\r\n- 有向图问题\r\n- 借助出度和入度\r\n\r\n### 代码\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\r\n        inArr = [0] * (n+1)\r\n        outArr = [0] * (n+1)\r\n        for u, v  in trust:\r\n            outArr[u] = inArr[u] + 1\r\n            inArr[v] = inArr[v] + 1\r\n        for v in range(1, n+1):\r\n            if outArr[v] == 0 and inArr[v] == n -1:\r\n                return v\r\n        return -1\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":false},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2355625667","body":"### 思路\r\n- map\r\n- 循环记录次数\r\n- LR相等 UD相等\r\n\r\n### 代码\r\n#### ts实现\r\n```ts\r\nfunction judgeCircle(moves: string): boolean {\r\n  const map = {\r\n    U: 0,\r\n    D: 0,\r\n    L: 0,\r\n    R: 0,\r\n  };\r\n  for (let index = 0; index < moves.length; index++) {\r\n    const str = moves[index];\r\n    if (str == \"U\") map.U = map.U + 1;\r\n    if (str == \"D\") map.D = map.D + 1;\r\n    if (str == \"L\") map.L = map.L + 1;\r\n    if (str == \"R\") map.R = map.R + 1;\r\n  }\r\n  return map.L == map.R && map.D == map.U;\r\n}\r\n```\r\n\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def judgeCircle(self, moves: str) -> bool:\r\n        map = {\r\n            'L': 0,\r\n            'R': 0,\r\n            'U': 0,\r\n            'D': 0\r\n        }\r\n        for str in moves:\r\n            if str == 'L': map['L'] = map['L'] + 1\r\n            if str == 'R': map['R'] = map['R'] + 1\r\n            if str == 'D': map['D'] = map['D'] + 1\r\n            if str == 'U': map['U'] = map['U'] + 1\r\n        return  map['L'] ==  map['R'] and  map['D'] ==  map['U']\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":false},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/42#issuecomment-2364789317","body":"### 思路\r\n- 快速排序\r\n- 随机取数\r\n- 递归\r\n- 分治\r\n\r\n### 代码\r\n\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def sortArray(self, nums: List[int]) -> List[int]:\r\n        if len(nums) <= 1:\r\n            return nums\r\n        # 随机取数\r\n        pivot = random.choice(nums)\r\n        left = self.sortArray([x for x in nums if x < pivot])\r\n        right = self.sortArray([x for x in nums if x > pivot])\r\n\r\n        mid  = [x for x in nums if x == pivot]\r\n        return left + mid + right \r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(NlogN)\r\n空间复杂度：O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2364773471","body":"### 思路\r\n- 二分法\r\n\r\n### 代码\r\n\r\n#### py实现\r\n```py\r\nclass Solution:\r\n    def mySqrt(self, x: int) -> int:\r\n        i,j=1,x\r\n        while i<=j:\r\n            m=(i+j)//2\r\n            if m*m==x:\r\n                return m\r\n            elif m*m>x:\r\n                j=m-1\r\n            else:\r\n               i=m+1\r\n        return j\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(logN)\r\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/44#issuecomment-2364796582","body":"### 思路\r\n- 二分法\r\n\r\n### 代码\r\n#### PY实现\r\n```py\r\nclass Solution:\r\n    def firstBadVersion(self, n: int) -> int:\r\n        if n == 1: return 1\r\n        left,right = 1, n\r\n        while True:\r\n            if left > right:\r\n                break\r\n            mid = (left + right) // 2\r\n            if not isBadVersion(mid):\r\n                left = mid + 1\r\n            else: right = mid - 1\r\n        return left\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(logN)\r\n空间复杂度：O(1)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/49#issuecomment-2380335130","body":"### 思路\r\n- 滑动窗口\r\n- 要先初始化窗口\r\n- 再滑动窗口\r\n- 窗口左侧索引是 s[i-k]\r\n\r\n### 代码\r\n\r\n#### go实现\r\n```go\r\nfunc maxVowels(s string, k int) int {\r\n\tvowels := map[byte]bool{\r\n\t\t'a': true,\r\n\t\t'e': true,\r\n\t\t'i': true,\r\n\t\t'o': true,\r\n\t\t'u': true,\r\n\t}\r\n\t// 初始化窗口\r\n\tcount := 0\r\n\tfor i := 0; i < k; i++ {\r\n\t\tif vowels[s[i]] {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\tmaxCount := count\r\n\tfor i := k; i < len(s); i++ {\r\n\t\tif vowels[s[i-k]] {\r\n\t\t\tcount--\r\n\t\t}\r\n\t\tif vowels[s[i]] {\r\n\t\t\tcount++\r\n\t\t}\r\n\t\tif count > maxCount {\r\n\t\t\tmaxCount = count\r\n\t\t}\r\n\t}\r\n\treturn maxCount\r\n}\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/51#issuecomment-2392587279","body":"### 思路\r\n- 滑动窗口\r\n\r\n### 代码\r\n#### PY实现\r\n```py\r\nclass Solution:\r\n    def findAnagrams(self, s: str, p: str) -> List[int]:\r\n        pLen = len(p)\r\n        arr = sorted(p)\r\n        res = []\r\n        c = []\r\n        for i in range(0, len(s) - pLen + 1):\r\n            c = sorted(s[i : i + pLen])\r\n            if c == arr:\r\n                res.append(i)\r\n        return res\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(N∗M∗Log(M))\r\n空间复杂度：O(N)","onTime":false},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/54#issuecomment-2392622359","body":"### 思路\r\n- 回溯+穷举\r\n\r\n### 代码\r\n#### PY实现\r\n```py\r\nclass Solution:\r\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\r\n        def count_bits(n):\r\n            return bin(n).count('1')\r\n        result = []\r\n        for hour in range(12):\r\n            for minute in range(60):\r\n                if count_bits(hour) + count_bits(minute) == turnedOn:\r\n                    result.append(f\"{hour}:{minute:02}\")\r\n        return result\r\n```\r\n\r\n复杂度分析\r\n\r\n时间复杂度：O(1)\r\n空间复杂度：O(1)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dadahui":[null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/9#issuecomment-2294873250","body":"```c\ntypedef struct {\n    int maxSize;\n    int curSize;\n    int* customStack;\n} CustomStack;\n\n\nCustomStack* customStackCreate(int maxSize) {\n    CustomStack* myCustomStack = (CustomStack*)malloc(sizeof(CustomStack));\n    myCustomStack->maxSize = maxSize;\n    myCustomStack->curSize = 0;\n    myCustomStack->customStack = (int*)malloc(sizeof(int) * maxSize);\n    return myCustomStack;\n}\n\nvoid customStackPush(CustomStack* obj, int x) {\n    // 判空\n    if (obj == NULL || obj->customStack == NULL)\n        return;\n    if (obj->curSize >= obj->maxSize) \n        return;\n    obj->customStack[obj->curSize] = x;\n    obj->curSize++;\n}\n\nint customStackPop(CustomStack* obj) {\n    // 判空\n    if (obj == NULL || obj->customStack == NULL)\n        return -1;\n    int ret = 0;\n    // --curSize\n    if (obj->curSize) {\n        ret = obj->customStack[--obj->curSize];\n    } else {\n        ret = -1;\n    }\n    return ret;\n}\n\nvoid customStackIncrement(CustomStack* obj, int k, int val) {\n    // 判空\n    if (obj == NULL || obj->customStack == NULL)\n        return;\n    if (k > obj->maxSize) {\n        for (int i = 0; i < obj->maxSize; ++i) {\n            obj->customStack[i] += val;\n        }\n    } else {\n        for (int i = 0; i < k; ++i) {\n            obj->customStack[i] += val;\n        }\n    }\n}\n\nvoid customStackFree(CustomStack* obj) {\n    if (obj == NULL || obj->customStack == NULL)\n        return;\n    free(obj->customStack);\n    obj->customStack = NULL;\n    free(obj);\n    obj = NULL;\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"akxuan":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2290500173","body":"思路： \r\n开始打算用一个 plus 变量表示要不要 +1， 后来发现space 和time 都肯定要大于 k的位数+ n， 就直接不管那个plus 了。 最后所有remining 都放在 num[0] 上面， 再统一转换成需要。 \r\n\r\n由于 k 小于 1000， 所以实际 复杂度应该是： \r\ntime = O（N） n 为num 长度\r\n空间复杂度是1\r\n\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        \r\n        num[-1] += k \r\n\r\n        for i in range(len(num)-1, 0, -1): \r\n            if num[i] > 9:\r\n                num[i-1] += num[i]//10\r\n                num[i] = num[i]%10\r\n\r\n        return [int(c) for c in str(num[0])] + num[1:]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293508339","body":"这题看上去有点绕， 其实挺简单的。 就是需要想清楚情况。无非就是 backfill 或者 forward fill 两种。 想清楚两种情况酒容易多了。 \r\n \r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        res = [10**4+1] * len(s)\r\n        idx_c = 10**4 * 3\r\n\r\n        for idx, curr in enumerate(s): \r\n            if curr != c:\r\n                res[idx] =  abs(idx_c - idx)\r\n            else:\r\n                idx_c = idx\r\n                res[idx] = 0 \r\n                # backfill\r\n                j = idx -1 \r\n                while j >= 0 and res[j] > abs(idx_c - j): \r\n                    res[j] = abs(idx_c - j)\r\n                    j -= 1\r\n        return res \r\n```\r\n每个 value 最多遍历 2 次， 所以是 time complexity = O(N) , space complexity = O(N)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295054348","body":"这题还是挺难的， 有点像224 basic calculator。 \r\n\r\n**开始的时候漏看了括号套括号的情况。**\r\n \r\n需要两个 stack， 一个stack 放括号里的东西。 另一个stack 放number 。 \r\n然后分别讨论 遇见 [  和 ] 的情况即可\r\n\r\n其中stack string 这部分initla 非常tricky， 尝试了很久。 这里需要预先留一个 “”， 或者用一个 curr_word 来占住这个位置。 \r\n\r\n**stack 的题要想清楚是什么 trigger pop（） 的\r\n\r\n```python\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        word_stack = ['']\r\n        num_stack = []\r\n        curr_num = 0 \r\n        for c in s: \r\n            if c.isnumeric(): \r\n                curr_num *= 10 \r\n                curr_num += int(c)\r\n            elif c == '[':\r\n                num_stack.append(curr_num)\r\n                curr_num = 0 \r\n                word_stack.append('')\r\n            elif c == ']': \r\n                tmp_word = word_stack.pop()\r\n                tmp_num = num_stack.pop()\r\n                word_stack[-1] = word_stack[-1] + tmp_word*tmp_num\r\n            else: \r\n                word_stack[-1] += c\r\n            print(word_stack)\r\n        return ''.join(word_stack)\r\n```\r\nspace complexity  ： O(n*K)， n = len(s)\r\ntime： O(maxK⋅n)\r\n\r\n ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2295351936","body":"用两个stack， 一个 stackin   存储新来的， stackout 模拟queue。 \r\n当stackout 空了， 就把所有stackin pop 再插入，相当于reverse 了。 \r\n\r\n```python\r\nclass MyQueue:\r\n    def __init__(self):\r\n        self.stack_in =[]\r\n        self.stack_out =[]\r\n    \r\n    def push(self, x: int) -> None:\r\n        self.stack_in.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if not self.stack_in and not self.stack_out:\r\n            return None\r\n        elif self.stack_out:\r\n            return self.stack_out.pop()\r\n        else:\r\n            for i in range(len(self.stack_in)):\r\n                self.stack_out.append(self.stack_in.pop())\r\n            return self.stack_out.pop()\r\n\r\n    def peek(self) -> int:\r\n        ans = self.pop()\r\n        self.stack_out.append(ans)        \r\n        return ans\r\n\r\n    def empty(self) -> bool:\r\n        return not (self.stack_in or self.stack_out)\r\n```\r\npush: 新增时间复杂度 O(1)，新增空间复杂度 O(1) \r\npop: 摊销时间复杂度 O(1) 因为所以元素最多进一次stack in 和一次 stack out，空间复杂度 O(1) \r\npeek: 时间复杂度 O(1)，空间复杂度 O(1) \r\nempty: 时间复杂度 O(1)，空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2297832723","body":"观察规律， 尤其是[ 2,1,3,4,4] 这个例子， 我们想filter 掉 1 ， 但是需要 保留两个4. \r\n用单调栈久可以。 monotone stack\r\n\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        monotone = []\r\n\r\n        for n in arr: \r\n         \r\n            while monotone and n < monotone[-1]: \r\n                \r\n                n = max(n,monotone.pop())  # 这里是个小坑， 我们想要保留某前一个值或者当前值得最大值\r\n            monotone.append(n)\r\n        print(monotone)\r\n        return len(monotone)\r\n```\r\n时空复杂度都是 O(N), N = len(arr)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2299943604","body":"先算一下整长度， 然后计算下new head ， 最后操作， 把 new_tail.next 指向空， 然后 prev tail 指向 prev head 就好了\n这里两个坑， 一个是算 k 的时候要注意，移动一次， 应该是最后一个element 变成了 head。 \n第二个是， k的赋值， 最先开始我用了这个方法赋值： `k = n - k - 1` 导致后续有个判断 k==0， 直接返回了head。 \n\n```python\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next or k == 0:\n            return head\n \n        n = 1\n        last = head\n        while last.next: \n            last = last.next \n            n += 1\n\n        k %= n \n        if k == 0:\n            return head\n \n\n        carry = head\n        \n        k1= n-k-1\n    \n        for _ in range(  k1):  # Move `n-k-1` times to stop at the new tail\n            carry = carry.next\n        \n        if not carry.next or k == 0  :\n            return head\n        else: \n            tmp = carry.next \n            last.next = head \n            carry.next = None \n\n\n            return tmp\n```\n空间复杂度 O(1)\n时间复杂度 O(N), N 为 list 长度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2302443308","body":"看上去很简单，想要 bug free 其实有点坑还是。 \r\n主要是配对之后别忘记要检查一下和下一个交换， 需要把 2，4 链接。 这很容易忘记。 \r\n**需要多想一个循环**\r\n```python\r\nclass Solution:\r\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        if not head or not head.next:\r\n            return head\r\n\r\n        dummy = head.next\r\n        curr = head \r\n\r\n        while curr and curr.next:\r\n            first, second, third = curr, curr.next, curr.next.next\r\n            second.next , first.next  = first, third\r\n            curr = third\r\n            # 坑， 需要保证下一个iteration ， 前一个的first 指向下一个的second。 \r\n            # 相当于把 dummy 那个重现一下\r\n            if curr and curr.next:\r\n                first.next = curr.next        \r\n        return dummy\r\n```\r\n时间复杂度 O(N) N = number of nodes\r\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2307309044","body":"非常好的题。 \n有很多办法做， 先放一个最容易理解的。 \n相当于把一个linkedlist 转换成 list，这样就有index 了。通过index 构建树\n这个方法时空复杂度都是 O（N）。 \n```\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n \n        arr = []\n        while head:  # convert node to list\n            arr.append(head.val)\n            head = head.next\n\n        def buildBST(start, end):\n            if start > end:\n                return None   #cant find the middel \n            mid = (start + end) // 2  # find the middle point\n            root = TreeNode(arr[mid])  # find the root point \n            root.left = buildBST(start, mid - 1)  # left node\n            root.right = buildBST(mid + 1, end)  # right node\n            return root  \n\n        return buildBST(0, len(arr) - 1) \n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2308329476","body":"空间复杂度 O(1)\r\n时间复杂度 O(N+M) \r\n这题挺简单的， 就是先算一下总长度， 然后算一下往后移几位而已\r\n```python\r\ndef getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        \r\n        curr = headA\r\n        if not headA or not headB:\r\n            return None\r\n        size_a = size_b = 0\r\n        while curr:\r\n            curr = curr.next \r\n            size_a += 1\r\n\r\n        curr = headB\r\n        size_b = 0\r\n        while curr:\r\n            curr = curr.next\r\n            size_b += 1\r\n\r\n        size_diff = size_a - size_b\r\n        \r\n        curr_a = headA\r\n        curr_b = headB\r\n\r\n        if size_diff > 0:\r\n            for i in range(abs(size_diff)):\r\n                curr_a = curr_a.next\r\n        else: \r\n            for i in range(abs(size_diff)):\r\n                curr_b = curr_b.next\r\n\r\n        while curr_a and curr_b:\r\n            if curr_a == curr_b: \r\n                return curr_a\r\n            else: \r\n                curr_a = curr_a.next\r\n                curr_b = curr_b.next\r\n\r\n        return None\r\n\r\n```\r\nA+C+B == B+C+A, 下面是抄的一个很优雅的写法。 只需要遍历一次\r\n\r\n```python\r\nclass Solution:\r\n    def getIntersectionNode(\r\n        self, headA: ListNode, headB: ListNode\r\n    ) -> Optional[ListNode]:\r\n\r\n        currentA = headA\r\n        currrentB = headB\r\n\r\n        while currentA != currrentB:\r\n            currentA = currentA.next if currentA else headB\r\n            currrentB = currrentB.next if currrentB else headA\r\n\r\n        return currentA\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308924704","body":"```python     \r\n   node_dict = set()\r\n        \r\n        while head:\r\n            if head in node_dict:\r\n                return head \r\n            else:\r\n                node_dict.add(head)\r\n                head = head.next\r\n\r\n        return None\r\n```\r\n\r\n先放一个时空复杂度都是 O(N) 的\r\n\r\n终于弄明白这个题了， 弄明白了就很简单。 \r\n有三个段， a， b， c。 \r\na: 是从起点到环入口 \r\nb: 是从环入口到交点\r\nc: 是从交点到环入口\r\n\r\n等于 b + c 就是环。 \r\n由于 fast 走过了两倍的 slow。 2*(a+b) =  a + n(b + c)  \r\n一番变换： a = c + (n-1)(b+c)\r\n\r\n所以， 我们希望找到环入口的话， 让一个node 从起点走完a， 就等于 slow 继续从相遇点， 绕 n-1 圈之后再走完c。 \r\n** 纠结这个n-1 的value ， 其实不管绕几圈， 我只是希望他俩同时到达入口而已， 就是希望走完c。** \r\n\r\n```python\r\n        fast = slow = head\r\n        has_cycle = False \r\n        while fast and fast.next and fast.next.next: \r\n            slow = slow.next\r\n            fast = fast.next.next\r\n\r\n            if slow == fast: \r\n                 has_cycle = True \r\n                 break\r\n        \r\n        if has_cycle:\r\n            new = head\r\n            while new != slow: \r\n                new = new.next\r\n                slow = slow.next\r\n            return new\r\n\r\n        else:\r\n            return None  \r\n            \r\n```\r\n时间复杂度 O(N)\r\n空间复杂度 O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/18#issuecomment-2308928486","body":"直接用 ordered dictionary， 如果没有这个ordered dictionary 就要用个linkedin list 来存： \r\n\r\n```\r\nclass LRUCache:\r\n\r\n    def __init__(self, capacity: int):\r\n        self.dict = collections.OrderedDict()\r\n        self.cap = capacity \r\n\r\n    def get(self, key: int) -> int:\r\n        if key in self.dict:\r\n            self.dict[key] = self.dict.pop(key)\r\n            return self.dict[key]\r\n        else:\r\n            return -1\r\n        \r\n\r\n\r\n    def put(self, key: int, value: int) -> None:\r\n        if key in self.dict:\r\n            self.dict.pop(key)\r\n            self.dict[key] = value\r\n        else:\r\n            if len(self.dict) == self.cap:\r\n                self.dict.popitem(0)\r\n            self.dict[key] = value\r\n            \r\n```\r\n时空复杂度都是 O（1）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2310516868","body":"用一个层高 bfs 即可： \r\n空间复杂度 O（N）， 时间复杂度O（N）\r\n\r\n```python\r\n        res = 0\r\n        if not root: \r\n            return 0 \r\n        \r\n        q = collections.deque([root])\r\n        level = 1\r\n        while q: \r\n            # save level node \r\n            # level = [] \r\n            for _ in range(len(q)):\r\n                \r\n                tmp = q.popleft()\r\n                #level.append(node.val)\r\n                if tmp.left:\r\n                    q.append(tmp.left)\r\n                if tmp.right:\r\n                    q.append(tmp.right)\r\n            res+= 1\r\n            #res.append(level)\r\n        return res \r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2312941243","body":"时间复杂度： O（N）\r\n空间复杂度： 最坏情况是 O（N），如果是平很树 就是 O（logN）\r\n\r\n递归基本： \r\n1. Identify the Base Case \r\n2. Define the Recursive Case \r\n3.  Ensure Progress: Make sure each recursive call brings the problem closer to the base case.\r\n4. Combine Results\r\n\r\n```python\r\nclass Solution:\r\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\r\n        if not p and not q:\r\n            return True \r\n        if (p and not q )or (q and not p) or (p.val != q.val): \r\n            return False \r\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\r\n``` ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2316653258","body":"用一个res存储结果， 就顺着题的思路想， 从root 开始， 到了leaf 就返回而已。 \r\n时间复杂度： o（N） number of node\r\n空间复杂度就是树的高度， 相当于递归深度：\r\n\r\n```python\r\n#129. 求根到叶子节点数字之和\r\nclass Solution:\r\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\r\n        \r\n        def dfs(node, pre_val,res ): \r\n            if not node: \r\n                return \r\n                \r\n            if not node.left and not node.right: \r\n                res[0] += pre_val*10 + node.val\r\n                return \r\n\r\n            curr_val = node.val + pre_val * 10\r\n            if node.left: \r\n                left = dfs(node.left, curr_val,res)\r\n            if node.right: \r\n                right = dfs(node.right, curr_val,res)\r\n            \r\n        res = [0] \r\n        dfs(root,0,res)\r\n        return res[0]\r\n```\r\nbetter version\r\n```python\r\nclass Solution:\r\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\r\n        \"\"\"\r\n        Calculate the sum of all root-to-leaf numbers formed by the tree nodes.\r\n        \r\n        :param root: The root of the binary tree.\r\n        :return: The sum of all root-to-leaf numbers.\r\n        \"\"\"\r\n\r\n        def dfs(node: Optional[TreeNode], curr_val: int) -> int:\r\n            if not node:\r\n                return 0\r\n            \r\n            # Update the current value with the current node's value\r\n            curr_val = curr_val * 10 + node.val\r\n            \r\n            # If we reach a leaf, return the current value as it's a complete number\r\n            if not node.left and not node.right:\r\n                return curr_val\r\n            \r\n            # Recurse on the left and right children, summing up the results\r\n            left_sum = dfs(node.left, curr_val)\r\n            right_sum = dfs(node.right, curr_val)\r\n            \r\n            return left_sum + right_sum\r\n\r\n        # Start the DFS traversal from the root with an initial value of 0\r\n        return dfs(root, 0)\r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2318622280","body":"求的就是每层的index 0. \r\n时间复杂度 O(N) number of node\r\nspace  O(N) , 就是 q 的长度， q 最长是1/2 N， 所以是O（N）\r\n\r\n```python\r\n def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\r\n        #层序遍历求每行的第一个值\r\n        if root is None: \r\n            return 0\r\n        q = deque()\r\n        q.append(root)\r\n        result = 0 \r\n        while q: \r\n            size = len(q)\r\n            for i in range(size):\r\n                node = q.popleft()\r\n                if i == 0 :\r\n                    result = node.val\r\n                if node.left: \r\n                    q.append(node.left)\r\n                if node.right:\r\n                    q.append(node.right)\r\n        return result\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322188357","body":"可以用 dfs 和bfs 写。 效果都差不多。 \r\ndfs 的话就是前序遍历， 先处理 node， 然后再处理左右。 \r\nbfs 的话就可以用层序遍历或者bfs 模版。 注意第一个deseries 返回的是一个string\r\n\r\n```python\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        \"\"\"Encodes a tree to a single string.\r\n        \r\n        :type root: TreeNode\r\n        :rtype: str\r\n        \"\"\"\r\n        # bfs\r\n        res = ''\r\n        q = collections.deque([root])\r\n        while q : \r\n            tmp = q.popleft()\r\n            if not tmp: \r\n                res += 'n,'\r\n            else: \r\n                res += str(tmp.val)\r\n                res += ','\r\n                q.append(tmp.left)\r\n                q.append(tmp.right)\r\n          \r\n        return res\r\n\r\n      \r\n\r\n        ''' # dfs\r\n        self.res = ''\r\n        def helper(root):\r\n            if not root:\r\n                self.res += 'n,'\r\n            else:\r\n                self.res += str(root.val) + ','\r\n                helper(root.left)\r\n                helper(root.right)\r\n\r\n        helper(root)\r\n        print(self.res)\r\n        return self.res\r\n        '''\r\n\r\n        \r\n\r\n    def deserialize(self, data):\r\n        \"\"\"Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        \r\n        ''' #dfs\r\n        def helper(l):\r\n            if l[0] == 'n':\r\n                l.popleft()\r\n                return None \r\n            root = TreeNode(l.popleft())\r\n            root.left = helper(l)\r\n            root.right = helper(l)\r\n            return root\r\n\r\n        data_list = data.split(',')\r\n        data_list = collections.deque(data_list)\r\n\r\n        root = helper(data_list)\r\n        return root\r\n        '''\r\n\r\n        # bfs\r\n        data_list = data.split(',')\r\n        data_list = collections.deque(data_list)\r\n\r\n        if not data_list or data_list[0] == 'n':\r\n            return None\r\n\r\n        root = TreeNode(data_list.popleft())\r\n        q = collections.deque([root])\r\n\r\n        while q:\r\n            curr = q.popleft()\r\n            \r\n            if data_list:\r\n                left_val = data_list.popleft()\r\n                if left_val != 'n':\r\n                    curr.left = TreeNode(left_val)\r\n                    q.append(curr.left)\r\n                \r\n            if data_list:\r\n                right_val = data_list.popleft()\r\n                if right_val != 'n':\r\n                    curr.right = TreeNode(right_val)\r\n                    q.append(curr.right)\r\n\r\n        return root\r\n```\r\n时间复杂度和空间复杂度都是 o（N）\r\nN 为number of node","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2325495090","body":"用一个 dict 储存\r\ntime: O((n)\r\nspace: O(n)\r\n```\r\n def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n     nmap = {}\r\n     for i, num in enumerate(nums):\r\n         if target - num in nmap:\r\n             return [i, nmap[target - num]]\r\n         nmap[num] = i\r\n     return []\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2325501199","body":"count frequncy and sort: \r\nspace O(n)\r\ntime O(nlogn)\r\nn is the number of item\r\n```python\r\n        map1 = {}\r\n        for i in nums: \r\n            if i in map1:\r\n                map1[i] += 1\r\n            else: \r\n                map1[i] = 1\r\n        keys = sorted(map1.items(), key=lambda item: item[1],reverse = True)\r\n\r\n        output = []\r\n        for i in range(k): \r\n            output.append(keys[i][0])\r\n        return output \r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2327858121","body":"这题还是挺难的。 先把所有点到点距离都算出来， 这一步很容易。 \n然后在每个距离相同的group， 没多一层相当于多了 m*（m-1） \n时间复杂度 n^2\n空间复杂度 n\n\n```python\nclass Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        if len(points) < 3: \n            return 0\n        \n        res = 0 \n        for i in points: \n            dist_hash ={}  #这里是个坑， 需要一层一层的算\n            for j in points: \n                \n                dis = (i[0] - j[0])**2 + (i[1] - j[1])**2  \n\n                if dis not in dist_hash: \n                    dist_hash[dis] = 1\n                else: \n                    res += 2*dist_hash[dis]\n                    dist_hash[dis] += 1\n                    \n\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2330393692","body":"首次提交AC\r\nslicing window， 找出set 的最大值。 \r\n```python\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        # slicing window \r\n        used_char = set()\r\n        res = 0 \r\n        fast, slow = 0, 0 \r\n        while fast < len(s):\r\n             \r\n            if s[fast] not in used_char:\r\n                used_char.add(s[fast])\r\n                res = max(res,len(used_char))\r\n            else: \r\n                while s[slow] != s[fast]: \r\n                    used_char.remove(s[slow]) \r\n                    slow += 1\r\n                slow += 1\r\n            fast += 1\r\n        return res\r\n```\r\n时间复杂度 O（N）\r\n空间 O（1）， 因为set 最多24个字母","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2334080824","body":"用两个hash 存word ：个数\r\nfrom collections import defaultdict\r\nclass Solution:\r\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\r\n \r\n        result = []\r\n        if not words or not s:\r\n            return result\r\n        \r\n        word_len = len(words[0])\r\n        word_count = len(words)\r\n        total_len = word_len * word_count\r\n        \r\n        # Create frequency map for all words\r\n        word_map = defaultdict(int)\r\n        for word in words:\r\n            word_map[word] += 1\r\n\r\n        # Iterate through the string to find substrings\r\n        for i in range(len(s) - total_len + 1):\r\n            seen_words = defaultdict(int)\r\n            for j in range(word_count):\r\n                start_index = i + j * word_len\r\n                word = s[start_index:start_index + word_len]\r\n                \r\n                if word not in word_map:\r\n                    break\r\n                \r\n                seen_words[word] += 1\r\n                \r\n                if seen_words[word] > word_map[word]:\r\n                    break\r\n                \r\n            if seen_words == word_map:\r\n                result.append(i)\r\n        \r\n        return result\r\n\r\n时间复杂度 o（N*M）m 是子串个数， n 是字符串长度\r\n空间复杂度： O（M） hash table 需要的key 数量","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/30#issuecomment-2336049212","body":"prefix_sum + hashtable , 压缩时空复杂度均为 O（N）\r\n同时参考： https://leetcode.com/problems/subarray-sum-equals-k/\r\n\r\n```python\r\nclass Solution:\r\n    def subarraySum(self, nums: List[int], p: int) -> int:\r\n        \r\n \r\n        # Calculate the target remainder: the remainder of the total sum of nums when divided by p\r\n        target_remainder = sum(nums) % p\r\n        \r\n        # If the total sum is already divisible by p, no need to remove any subarray\r\n        if target_remainder == 0:\r\n            return 0\r\n        \r\n        # Dictionary to store the remainder at each prefix sum index: {remainder: index}\r\n        # Initialized with 0: -1 to handle the case where the entire prefix works\r\n        remainder_map = {0: -1}\r\n        \r\n        current_remainder = 0  # To track the running remainder of the prefix sum\r\n        min_length = len(nums)  # To store the minimum subarray length\r\n        \r\n        # Iterate through the array\r\n        for i, num in enumerate(nums):\r\n            # Update the running remainder of the prefix sum\r\n            current_remainder = (current_remainder + num) % p\r\n            \r\n            # Calculate the required remainder to remove, to make the total sum divisible by p\r\n            required_remainder = (current_remainder - target_remainder) % p\r\n            \r\n            # If this required remainder has been seen before, it means we can remove the subarray between\r\n            # the previous index and the current one to get a sum divisible by p\r\n            if required_remainder in remainder_map:\r\n                # Calculate the length of this subarray and update the minimum length if it's smaller\r\n                min_length = min(min_length, i - remainder_map[required_remainder])\r\n            \r\n            # Update the remainder_map with the current remainder and its index\r\n            remainder_map[current_remainder] = i\r\n        \r\n        # If we didn't find any valid subarray, return -1, otherwise return the minimum length found\r\n        return -1 if min_length == len(nums) else min_length\r\n\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2336505784","body":"快慢指针， 时简复杂度 N 空间复杂度 1\r\n```python\r\nclass Solution:\r\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        fast = slow = head\r\n        while slow and fast and slow.next and fast.next and fast.next.next :\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n        if not fast.next: \r\n            return slow\r\n        if not fast.next.next:\r\n            return slow.next\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2336732428","body":" 双指针\r\n如果重合或者相同， 快指针向前。如果不相同就交换。 \r\n\r\n这题还是挺有意思的， 值得再看看。 \r\n\r\n```python\r\nclass Solution:\r\n    def removeDuplicates(self, nums: List[int]) -> int:\r\n\r\n        i = 0 \r\n\r\n        for j in range(1,len(nums)): \r\n            if nums[i] == nums[j]:\r\n                pass\r\n            else: \r\n                i += 1\r\n                nums[i] = nums[j]\r\n                \r\n        return i + 1 \r\n```\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/33#issuecomment-2339436681","body":"二分， 两种写法都可以。 时间 logN， 空间1 \r\n\r\n```python\r\nclass Solution:\r\n    def searchInsert(self, nums: List[int], target: int) -> int:\r\n        start, end = 0, len(nums) - 1\r\n        while start + 1 < end: \r\n            mid = start + (end - start) //2\r\n            if nums[mid] == target: \r\n                return mid\r\n            elif nums[mid] < target: \r\n                start = mid\r\n            else: \r\n                end = mid\r\n \r\n        if nums[start] == target:\r\n            return start\r\n        elif nums[start] > target:\r\n            return start \r\n        elif nums[end] < target: \r\n            return  end+1\r\n        else: \r\n            return end\r\n```\r\n# Second \r\n```python\r\n        left, right = 0, len(nums) - 1\r\n        while left <= right:\r\n            mid = left + (right-left)//2\r\n            if nums[mid] == target:\r\n                return mid\r\n            elif nums[mid] > target:\r\n                right = mid -1 \r\n            else:\r\n                left = mid + 1\r\n        return left\r\n``` ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/34#issuecomment-2341746601","body":"考察了deque 的操作\r\n 巧妙的在于， deque的各种特性。 \r\n1. 最大的永远都在最左边\r\n2. 线性时间 O(N) 插入或者删除\r\n3. 比较只需要比较最左边的一个， 因为最大\r\n\r\n时间复杂度：N，空间复杂度就是deque 长度就是K\r\n```python\r\nfrom collections import deque\r\nclass Solution:\r\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\r\n        \r\n \r\n        que = deque([])\r\n        l = r=  0 \r\n        res = []\r\n        \r\n        def min_deque(deq,n):\r\n            while deq and deq[-1]<n:\r\n                deq.pop()\r\n            deq.append(n)    \r\n        while r < len(nums):\r\n            curr= nums[r]\r\n            if r -l < k-1 :              \r\n                min_deque(que,curr)\r\n                r+=1\r\n            else:\r\n   \r\n           \r\n                # iterate l,r\r\n                # delete l-1\r\n                # add r+1\r\n                # append(max)\r\n                if l == 0:\r\n                    min_deque(que,curr)     \r\n                    \r\n                    \r\n                else:\r\n                    \r\n                    if nums[l-1] in que and nums[l-1] == que[0]:\r\n                        que.remove(nums[l-1])\r\n                    min_deque(que,curr)     \r\n                res.append(que[0])\r\n                l+=1 \r\n                r+=1\r\n        return res\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2345235576","body":"算出入度的题\r\nSpace Complexity : O(N). Time Complexity : O(E).\r\n\r\n```python\r\nclass Solution:\r\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\r\n        trust_list = [0 for i in range(n)]\r\n        be_trust = [0 for i in range(n)]\r\n\r\n        for a, b in trust:     \r\n            trust_list[a-1] += 1\r\n            be_trust[b-1] += 1\r\n        res = []\r\n        for i in range(n):\r\n            if trust_list[i] == 0:\r\n                res.append(i)\r\n\r\n        for i in res:\r\n            if be_trust[i] == n -1:\r\n                return i+1\r\n                \r\n        return -1\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/36#issuecomment-2349247750","body":"\r\n首先，我们构建一个邻接表来表示不喜欢关系。\r\n然后，我们遍历每个节点及其邻居（不喜欢的人）：\r\n\r\n如果一个节点和它的邻居已经在同一个集合中，说明它们被分到了同一组，这违反了二分图的性质，因此返回 False。\r\n否则，我们将这个节点的所有邻居union到同一个集合中，表示它们应该在不同的组。\r\n\r\n如果遍历完所有节点都没有冲突，说明可以形成二分图，返回 True。\r\n\r\n空间 O(N + E)\r\n时间也是  O(N + E) \r\n\r\n```python\r\nclass UnionFind:\r\n    def __init__(self, size):\r\n        self.parent = list(range(size))\r\n        self.rank = [0] * size\r\n    \r\n    def find(self, x):\r\n        if self.parent[x] != x:\r\n            self.parent[x] = self.find(self.parent[x])\r\n        return self.parent[x]\r\n    \r\n    def union_set(self, x, y):\r\n        xset, yset = self.find(x), self.find(y)\r\n        if xset == yset:\r\n            return\r\n        elif self.rank[xset] < self.rank[yset]:\r\n            self.parent[xset] = yset\r\n        elif self.rank[xset] > self.rank[yset]:\r\n            self.parent[yset] = xset\r\n        else:\r\n            self.parent[yset] = xset\r\n            self.rank[xset] += 1\r\n\r\nclass Solution:\r\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\r\n        adj = [[] for _ in range(n + 1)]\r\n        for dislike in dislikes:\r\n            adj[dislike[0]].append(dislike[1])\r\n            adj[dislike[1]].append(dislike[0])\r\n        \r\n        dsu = UnionFind(n + 1)\r\n        for node in range(1, n + 1):\r\n            for neighbor in adj[node]:\r\n                if dsu.find(node) == dsu.find(neighbor):\r\n                    return False\r\n                dsu.union_set(adj[node][0], neighbor)\r\n        \r\n        return True\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/37#issuecomment-2349255921","body":"首先，为没有组的项目分配唯一的组ID。\r\n构建两个图：\r\n1.项目依赖图：表示项目之间的依赖关系\r\n2. 组依赖图：表示组之间的依赖关系\r\n然后对这两个图分别进行拓扑排序：\r\n- 如果存在环（即无法完成拓扑排序），返回空列表\r\n- 否则，得到项目和组的排序顺序\r\n\r\n根据项目的排序结果，将项目按组分类\r\n最后，按照组的排序顺序，将每个组内的项目按顺序添加到结果列表中\r\n\r\n时间复杂度 n**2\r\n空间复杂度 n\r\nn为项目数量\r\n\r\n```python\r\nfrom collections import defaultdict, deque\r\n\r\nclass Solution:\r\n    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:\r\n \r\n        group_id = m\r\n        for i in range(n):\r\n            if group[i] == -1:\r\n                group[i] = group_id\r\n                group_id += 1\r\n        \r\n        # Sort all items regardless of group dependencies.\r\n        item_graph = defaultdict(list)\r\n        item_indegree = [0] * n\r\n        \r\n        # Sort all groups regardless of item dependencies.\r\n        group_graph = defaultdict(list)\r\n        group_indegree = [0] * group_id\r\n        \r\n        for curr in range(n):\r\n            for prev in beforeItems[curr]:\r\n                # Each (prev -> curr) represents an edge in the item graph.\r\n                item_graph[prev].append(curr)\r\n                item_indegree[curr] += 1\r\n                \r\n                # If they belong to different groups, add an edge in the group graph.\r\n                if group[curr] != group[prev]:\r\n                    group_graph[group[prev]].append(group[curr])\r\n                    group_indegree[group[curr]] += 1\r\n        \r\n        # Topological sort nodes in the graph, return an empty array if a cycle exists.\r\n        item_order = self.topological_sort(item_graph, item_indegree)\r\n        group_order = self.topological_sort(group_graph, group_indegree)\r\n        \r\n        if not item_order or not group_order:\r\n            return []\r\n        \r\n        # Items are sorted regardless of groups, we need to differentiate them by the groups they belong to.\r\n        ordered_groups = defaultdict(list)\r\n        for item in item_order:\r\n            ordered_groups[group[item]].append(item)\r\n        \r\n        # Concatenate sorted items in all sorted groups.\r\n        answer = []\r\n        for group_index in group_order:\r\n            answer.extend(ordered_groups[group_index])\r\n        \r\n        return answer\r\n    \r\n    def topological_sort(self, graph, indegree):\r\n        visited = []\r\n        stack = deque([node for node in range(len(indegree)) if indegree[node] == 0])\r\n        \r\n        while stack:\r\n            curr = stack.pop()\r\n            visited.append(curr)\r\n            \r\n            for neighbor in graph[curr]:\r\n                indegree[neighbor] -= 1\r\n                if indegree[neighbor] == 0:\r\n                    stack.append(neighbor)\r\n        \r\n        return visited if len(visited) == len(indegree) else []\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2351220549","body":"```python\r\nclass Solution:\r\n    def judgeCircle(self, moves: str) -> bool:\r\n        x, y = 0, 0 \r\n\r\n        for i in moves: \r\n            if i == 'U': y -= 1\r\n            if i == 'D': y += 1\r\n            if i == 'R': x += 1 \r\n            if i == 'L': x -= 1\r\n\r\n        return True if x == 0 and y == 0 else   False \r\n```\r\n简化以后就是 上等于下， 左等于右。\r\n\r\n```python\r\n        return moves.count(\"L\") == moves.count(\"R\") and moves.count(\"U\") == moves.count(\"D\")\r\n```\r\n\r\n时间复杂度都是 N， 空间 1\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/39#issuecomment-2351968414","body":"list+  priority queue. \r\n时间复杂度：O(nlogn) =  sorting (nlogn) + n * priorityQueue(logn) \r\nspace : o(N) : list and queue\r\n```python\r\nimport heapq\r\nfrom collections import deque\r\n\r\nclass Solution:\r\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\r\n        n = len(tasks)\r\n        indices = list(range(n))\r\n        indices.sort(key=lambda i: tasks[i][0])\r\n        \r\n        ans = []\r\n        # Priority queue\r\n        q = []\r\n        # Timestamp\r\n        timestamp = 0\r\n        # Pointer for array traversal\r\n        ptr = 0\r\n        \r\n        for i in range(n):\r\n            # If no task can be executed, fast forward\r\n            if not q:\r\n                timestamp = max(timestamp, tasks[indices[ptr]][0])\r\n            \r\n            # Add all tasks with enqueue time <= timestamp to the priority queue\r\n            while ptr < n and tasks[indices[ptr]][0] <= timestamp:\r\n                heapq.heappush(q, (tasks[indices[ptr]][1], indices[ptr]))\r\n                ptr += 1\r\n            \r\n            # Choose the task with the shortest processing time\r\n            process, index = heapq.heappop(q)\r\n            timestamp += process\r\n            ans.append(index)\r\n        \r\n        return ans\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/40#issuecomment-2356132782","body":"\r\n要考虑跨越午夜的情况：如果开始小时大于结束小时，假设跨越了午夜并计算总场次。\r\n相同小时：\r\n如果 start_hour 等于 finish_hour 且 finish_minute 大于 start_minute，标记需要处理。\r\n如果 start_minute 大于 finish_minute，表示第二天。\r\n同一天：根据小时差异计算场次。\r\n分钟：处理分钟在开始分钟之前到最近的X15min。\r\n\r\n时空复杂度都是o1\r\n```python\r\nfrom math import ceil\r\nclass Solution:\r\n    def numberOfRounds(self, s: str, f: str) -> int:\r\n        # Extract hours and minutes from start time\r\n        start_hour = int(s[:2])\r\n        start_minute = int(s[3:])\r\n        \r\n        # Extract hours and minutes from finish time\r\n        finish_hour = int(f[:2])\r\n        finish_minute = int(f[3:])\r\n        \r\n        # Initialize total rounds and a flag\r\n        total_rounds = 0\r\n        flag = 0\r\n        \r\n        # Calculate the number of rounds\r\n        if start_hour > finish_hour:\r\n            total_rounds = (24 - start_hour - 1 + finish_hour) * 4\r\n        elif start_hour == finish_hour and finish_minute > start_minute:\r\n            total_rounds = 0\r\n            flag = 1\r\n        elif start_hour == finish_hour and start_minute > finish_minute:\r\n            total_rounds = 23 * 4\r\n        else:\r\n            total_rounds = (finish_hour - start_hour - 1) * 4\r\n        \r\n        if flag == 1:\r\n            if start_minute > finish_minute and start_hour != finish_hour:\r\n                # Calculate additional rounds when start_minute > finish_minute\r\n                missed_rounds = ceil((start_minute - finish_minute) / 15.0)\r\n                total_rounds += 96 - missed_rounds\r\n                return total_rounds\r\n            \r\n            # Adjust finish_minute to the nearest quarter\r\n            finish_minute -= finish_minute % 15\r\n            if start_minute % 15 != 0:\r\n                start_minute += (15 - start_minute % 15)\r\n            if finish_minute > start_minute:\r\n                total_rounds += (finish_minute - start_minute) // 15\r\n            return total_rounds\r\n        \r\n        # Add the remaining rounds from start_minute to the next hour and from finish_hour to finish_minute\r\n        total_rounds += finish_minute // 15\r\n        start_minute = 60 - start_minute\r\n        total_rounds += start_minute // 15\r\n        \r\n        return total_rounds\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/41#issuecomment-2360865623","body":"通过统计字符频率和累积频率来比较不同的操作策略，最终返回最优解\r\n时间复杂度：O(m + n)，m和n是字符串a和b的长度。需要遍历两个字符串各一次来统计字符频率，然后进行26次循环来计算结果。\r\n空间复杂度：O(1)，26个字母\r\n\r\n```python\r\nclass Solution:\r\n    def minCharacters(self, a: str, b: str) -> int:\r\n        m, n = len(a), len(b)\r\n        res = m + n\r\n        c1, c2 = [0] * 26, [0] * 26\r\n        \r\n        for c in a:\r\n            c1[ord(c) - ord('a')] += 1\r\n        for c in b:\r\n            c2[ord(c) - ord('a')] += 1\r\n        \r\n        for i in range(26):\r\n            res = min(res, m + n - c1[i] - c2[i])\r\n            if i > 0:\r\n                c1[i] += c1[i - 1]\r\n                c2[i] += c2[i - 1]\r\n            if i < 25:\r\n                res = min(res, m - c1[i] + c2[i])\r\n                res = min(res, n - c2[i] + c1[i])\r\n        \r\n        return res\r\n```","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2363595911","body":"```python\r\nclass Solution:\r\n    def mySqrt(self, x: int) -> int:\r\n        \r\n        start, end = 1, x\r\n\r\n        while start + 1 < end : \r\n            mid = start + (end - start)//2\r\n\r\n            if mid*mid < x: \r\n                start = mid \r\n            if mid*mid > x:\r\n                end = mid \r\n            if mid*mid == x: \r\n                return mid\r\n\r\n        if start* start == x :\r\n            return start\r\n        if end*end == x:\r\n            return end\r\n        return start\r\n\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fightforcoding":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2290433505","body":"### 思路\r\nAdd up integer k from the last index of the num list, then update rest value and the num list until the largest digit.\r\nif rest is still larger than 0, then add in the beginning of the whole list.\r\n\r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        rest = k\r\n        for i in range(len(num)-1,-1, -1):\r\n            num[i]+=rest\r\n            rest=num[i]//10\r\n            num[i]=num[i]%10\r\n        while rest > 0:\r\n            num.insert(0, rest%10)\r\n            rest//=10\r\n        return num\r\n\r\n```\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为num长度。\r\n- 空间复杂度：O(1)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2294365515","body":"### 思路\r\n\r\nLoop twice, first record the distance from the left to the right. Then loop from the right to the left, and get the min value of the distance.\r\n\r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        N = len(s)\r\n        result = [N]*N\r\n        position = float('inf')\r\n        for i in range(N):\r\n            if s[i]==c:\r\n                result[i] = 0\r\n                position = i\r\n            else:\r\n                result[i] = abs(position - i)\r\n        for i in range(N-1,-1,-1):\r\n            if s[i] == c:\r\n                position = i\r\n                result[i] = 0\r\n            else:\r\n                result[i] = min(result[i],abs(position -i))\r\n        return result\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，其中 N 为length of the string s。\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295626464","body":"### 思路\r\n\r\nUsing two stacks to save current numbers and strings other than '[' and '[', then loop the string from the first value, only pop the stack values when encounter a ']' \r\n\r\n### 代码\r\n\r\n\r\n```python\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        current_string = ''\r\n        current_number = 0\r\n        stack = []\r\n        for char in s:\r\n            if char.isdigit():\r\n                current_number = current_number*10 + int(char)\r\n            elif char =='[':\r\n                stack.append((current_string, current_number))\r\n                current_string = ''\r\n                current_number = 0\r\n            elif char ==']':\r\n                previous_string, number = stack.pop()\r\n                current_string = previous_string+current_string*number\r\n            else:\r\n                current_string+=char\r\n        return current_string\r\n\r\n\r\n\r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(N)，N is the length of the string S。\r\n- 空间复杂度：O(N) two stacks","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2297959621","body":"### 思路\n\nusing two stacks, one is for push, the other is for pop and peek, if both empty, return true for empty.\n\n### 代码\n\n\n```python\nclass MyQueue:\n\n    def __init__(self):\n        self.MyQueue = []\n        self.tempQueue = []\n\n    def push(self, x: int) -> None:\n        self.MyQueue.append(x)\n\n    def pop(self) -> int:\n        if not self.tempQueue:\n            while self.MyQueue:\n                self.tempQueue.append(self.MyQueue.pop())\n        return self.tempQueue.pop()\n\n    def peek(self) -> int:\n        if not self.tempQueue:\n            while self.MyQueue:\n                self.tempQueue.append(self.MyQueue.pop())\n        return self.tempQueue[-1]\n    def empty(self) -> bool:\n        return not self.tempQueue and not self.MyQueue\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(1)\n- 空间复杂度：O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2299907146","body":"```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        left_max = [0]*len(arr)\n        right_min =[float('inf')]*len(arr)\n        chunk = 1\n        left_max[0] = arr[0]\n        for i in range(1, len(arr)):\n            left_max[i] = max(left_max[i-1], arr[i])\n        right_min[len(arr)-1]=arr[len(arr) -1]\n        for i in range(len(arr)-2,-1,-1):\n            right_min[i] = min(right_min[i+1], arr[i])\n            print(right_min[i])\n        for i in range(len(arr)-1):\n            if left_max[i]<=right_min[i+1]:\n                chunk+=1\n        return chunk\n```\n\nTime complexity O(n)\nSpace complexity O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2303816414","body":"###思路\nfirst count the lenth of the list, then make it into a circle, rotate K step, then break the circle\n\n###代码\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# first count the lenth of the list, then make it into a circle, rotate K step, then break the circle\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if k ==0 or not head or not head.next:\n            return head\n        # count the length\n        lenth = 1\n        old_head = head\n        while head.next:\n            head = head.next\n            lenth += 1\n        #make a circle\n        head.next = old_head\n        #calculate steps\n        k = k % lenth\n        steps = lenth - k\n        #rorate K steps\n        new_tail = old_head\n        for _ in range(steps - 1):\n            new_tail = new_tail.next\n        new_head = new_tail.next\n        #break the circle\n        new_tail.next = None\n        return new_head\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2306328522","body":"```python\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        dummy =  ListNode(0)\n        dummy.next = head\n        current = dummy\n        while current.next and current.next.next:\n            # identify the two nodes to be swapped\n            first = current.next\n            second = current.next.next\n            #perform the swap\n            first.next = second.next\n            second.next = first\n            current.next = second\n            #move forward\n            current = first\n\n            \n        \n        return dummy.next\n\n```python\nTime complexity O(n)\nSpace complexity O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2308098289","body":"```python\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def findmiddle(self, head:[ListNode]) -> ListNode:\r\n        pre_ptr = None\r\n        slow_ptr = head\r\n        fast_ptr = head\r\n        while fast_ptr and fast_ptr.next:\r\n            pre_ptr = slow_ptr\r\n            slow_ptr = slow_ptr.next\r\n            fast_ptr = fast_ptr.next.next\r\n        #split the half:\r\n        if pre_ptr:\r\n            pre_ptr.next = None\r\n        return slow_ptr\r\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\r\n        #empty node\r\n        if not head:\r\n            return None\r\n        \r\n        #find the middle of the list:\r\n        middle = self.findmiddle(head)\r\n\r\n        #the middle becomes the root\r\n        node = TreeNode(middle.val)\r\n\r\n       #if there is only one element\r\n        if head == middle:\r\n            return node\r\n        #recursively build the tree\r\n        node.left = self.sortedListToBST(head)\r\n        node.right = self.sortedListToBST(middle.next)\r\n        \r\n        return node\r\n```\r\nTime complexity : O(nlogn) where n is the length of the list\r\n\r\nSpace complexity: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2308133960","body":"```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        if not headA or not headB:\n            return none\n        #start from two pointers, each at head of the list\n        pA = headA\n        pB = headB\n\n        #Traverse both lists\n        while pA != pB:\n            #if pA reaches the end of the list A, move it to the head of list B\n            pA = pA.next if pA else headB\n            # same with traversing list A\n            pB = pB.next if pB else headA\n        return pA\n```\nTime complexity O(n+m) where n and m are lengths of the two lists\n\nspace complexity O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308511296","body":"### Approach\nFirst using slow and fast pointers to detect whether there is a cycle in the linked list\nthen find the cycle start by using another pointer from the head of the list to find the start point.\n### Code\n\n```python\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow_ptr = head\n        fast_ptr = head\n        new_head = head\n        while fast_ptr and fast_ptr.next:\n            slow_ptr = slow_ptr.next\n            fast_ptr = fast_ptr.next.next\n            if slow_ptr == fast_ptr:\n                while new_head != slow_ptr:\n                    slow_ptr = slow_ptr.next\n                    new_head = new_head.next\n                return new_head\n\n        \n        return None\n\n```\nTime complexity O(n)\n\nSpace complexity O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/18#issuecomment-2314200095","body":"```python\nclass doublelink:\n    def __init__(self, key: int, value: int):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.head = doublelink(0,0)\n        self.tail = doublelink(0,0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def _remove(self, node: doublelink):\n        #remove a node from the double linked list\n        prev = node.prev\n        nxt = node.next\n        prev.next = nxt\n        nxt.prev = prev\n    \n    def _add(self, node:doublelink):\n        #add a node after the head of the double linked list\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n\n    def get(self, key: int) -> int:\n        if key in self.cache:\n            node = self.cache[key]\n            self._remove(node)\n            self._add(node)\n            return node.value\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self._remove(self.cache[key])\n        node = doublelink(key,value)\n        self._add(node)\n        self.cache[key] = node\n        if len(self.cache) > self.capacity:\n            lru = self.tail.prev\n            self._remove(lru)\n            del self.cache[lru.key]\n\n```\nTime complexity O(1)\nSpace complexity O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2314303204","body":"### Algorithm\n\nDFS\n\n```python\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root == None:\n            return 0\n        \n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        return max(left_depth, right_depth) + 1\n\n\n```\n\nTime complexity O(n)\n\nSpace complexity O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2314312461","body":"```python\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if not p and not q:\n            return True\n        elif not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right,q.right)\n\n```\n\nTime O(n)\n\nSpace O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2316722860","body":"### Algorithm\n\nrecursively calculated the sum of each path \n\nDFS\n\n```python\nclass Solution:             #  T: O(n)  S: O(h)\n\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n\n        res = 0\n\n        def dfs(node, total):\n\n            nonlocal res\n\n            total = total * 10 + node.val\n\n            if not node.left and not node.right:\n\n                res += total\n\n                return\n\n            if node.left:\n\n                dfs(node.left, total)\n\n            if node.right:\n\n                dfs(node.right, total)\n\n        dfs(root, 0)\n\n        return res\n\n```\n\n BFS\n\n```python\nclass Solution:             #  T: O(n)  S: O(len(q)) max length of q\n\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n\n        q = deque()\n\n        q.append((root,0))\n\n        res = 0\n\n        while q:\n\n            node, val = q.popleft()\n\n            val = val * 10 + node.val\n\n            if not node.left and not node.right:\n\n                res += val\n\n           \n\n            if node.left:\n\n                q.append((node.left, val))\n\n            if node.right:\n\n                q.append((node.right, val))\n\n        return res\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2322783618","body":"### Algorithm\n\nDFS\n\n```python\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        def dfs(node, depth):\n            nonlocal max_depth, bottom_left_value\n\n            if not node:\n                return\n            if depth > max_depth:\n                max_depth = depth\n                bottom_left_value = node.val\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n        \n        max_depth = -1\n        bottom_left_value = root.val\n        dfs(root, 0)\n        return bottom_left_value\n\n```\n\nTime O(n)\nSpace O(h) where h is the max height of the tree","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2323174502","body":"### Algorithm\n\nDFS\n\n```python\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nimport collections as collections\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def helper (node):\n            if not node:\n                val.append('#')\n                return\n            val.append(str(node.val))\n            helper(node.left)\n            helper(node.right)\n        val = []\n        helper(root)\n        return ','.join(val)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        def helper():\n            if not val:\n                return None\n            v = val.popleft()\n            if v == '#':\n                return None\n            node = TreeNode(int(v))\n            node.left = helper()\n            node.right = helper()\n            return node\n        val = collections.deque(data.split(','))\n        return helper()\n```\n\nTime: O(n)\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/24#issuecomment-2323880732","body":"###Algorithm\n\nBFS\n\n```python\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n    # coordinate assignment\n        node_map = defaultdict(list)\n    # Using BFS to store nodes and their coordinates\n        queue = deque([(root, 0, 0)])\n\n        while queue:\n            node, row, col = queue.popleft()\n            if node:\n                node_map[col].append((row, node.val))\n                queue.append((node.left, row + 1, col - 1))\n                queue.append((node.right, row + 1, col + 1))\n    # sort the columns based on the index\n        sorted_columns = sorted(node_map.keys())\n        result = []\n        for col in sorted_columns:\n            sorted_nodes = sorted(node_map[col])\n            col_val = [val for row, val in sorted_nodes]\n            result.append(col_val)\n        return result\n\n```\nTime O(NlogN)\n\nSpace O(N）\n\nwhere N is the number of nodes\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2323810983","body":"### Algorithm\n\nHashmap\n\n```python\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        nmap = {}\n\n        for i, num in enumerate(nums):\n            if target - num in nmap:\n                return [i, nmap[target - num]]\n            nmap[num] = i\n\n        return []\n\n```\nTime: O(n)\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2325729300","body":"### Algorithm\nQuickselect algorithm in sorting\n\n```python\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        if k == len(nums):\n            return nums\n        nmap = {}\n        for i in range(len(nums)):\n            if nums[i] in nmap:\n                nmap[nums[i]] += 1\n            else:\n                nmap[nums[i]] = 1\n           \n        freq_list = list(nmap.items())\n        self.quickselect(freq_list, 0, len(freq_list) - 1, k - 1)\n        return [item[0] for item in freq_list[:k]]\n\n    def quickselect(self, freq_list, low, high, k):\n        if low == high:\n            return\n        pivot_index = self.partition(freq_list, low, high)\n        if pivot_index == k:\n            return\n        elif pivot_index < k:\n            return self.quickselect(freq_list, pivot_index + 1, high, k)\n        else:\n            return self.quickselect(freq_list, low, pivot_index - 1, k)\n    def partition(self, freq_list, low, high):\n        pivot_index = random.randint(low, high)\n        freq_list[pivot_index], freq_list[high] = freq_list[high], freq_list[pivot_index]\n        pivot = freq_list[high][1]\n        i = low - 1\n        for j in range(low, high):\n            if freq_list[j][1] >= pivot:\n                i+=1\n                freq_list[i], freq_list[j] = freq_list[j], freq_list[i]\n        freq_list[i + 1], freq_list[high] = freq_list[high], freq_list[ i+1]\n        return i+1\n```\n\n\nTime: O(n)\n\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2330729168","body":"```python \n\nclass Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        res = 0\n        \n        for i in range(len(points)):\n            distance_map = defaultdict(int)\n            for j in range(len(points)):\n                if i != j:\n                    distance = (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2\n                    distance_map[distance] += 1\n            for count in distance_map.values():\n                res += count*(count-1)            \n        return res\n\n```\n\nTime: O(N*N)\nSpace: O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2333278080","body":"```python\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        if not s:\n            return 0\n        seen = defaultdict(int)\n        maxlen = 0\n        start = 0\n        for end in range(len(s)):\n            char = s[end]\n            if char in seen and seen[char] >= start:\n                start = seen[char]  + 1\n            seen[char] = end\n            maxlen = max (maxlen, end - start + 1)\n        return maxlen\n\n\n```\nTime O(N)\nSpace O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2335047206","body":"```python\n\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        \n        result = []\n        n = len(s)\n        num = len(words[0])\n        count = len(words)\n        wordfreq = defaultdict(int) \n        if not words or n == 0:\n            return result\n        for word in words:\n            wordfreq[word] += 1\n        for i in range(n-num*count+1):\n            temp = defaultdict(int)\n            cur = s[i: i+num*count]\n            j = 0\n            match = True\n            for j in range(0, len(cur),num):\n                curword = cur[j:j+num]\n                if curword not in wordfreq:\n                    match = False\n                    break\n                temp[curword] += 1\n                if temp[curword] > wordfreq[curword]:\n                    match = False\n                    break\n            if match:\n                result.append(i)\n        return result  \n\n\n```\n\nTime: O(N*N)\n\nSpace: O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/30#issuecomment-2336563302","body":"```python\nclass Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        total_sum = sum(nums)\n        target_mod = total_sum % p\n        if target_mod == 0:\n            return 0\n        prefix_sum = 0\n        mod_map = {0 : -1}\n        min_length = len(nums)\n        for i, num in enumerate(nums):\n            prefix_sum = prefix_sum + num\n            needed_mod = (prefix_sum - target_mod) % p\n            \n            if needed_mod in mod_map:\n                min_length = min(min_length, i - mod_map[needed_mod])\n            mod_map[prefix_sum%p] = i\n\n        return min_length if min_length < len(nums) else -1\n\n```\nTime: O(N)\n\nSpace: O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2336541450","body":"```python\n\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return Null\n        slow_ptr = head\n        fast_ptr = head\n        while fast_ptr and fast_ptr.next:\n            slow_ptr = slow_ptr.next\n            fast_ptr = fast_ptr.next.next\n        return slow_ptr\n\n```\nTime: O(N)\n\nSpace: O(1）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2339708563","body":"```python\n\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        read = 0\n        write = 0\n        if not nums:\n            return 0\n        while read < len(nums):\n            if nums[read]!=nums[write]:\n                write += 1\n                nums[write] = nums[read]\n            read += 1\n        return write + 1\n\n\n```\n\nTime O(n)\n\nSpace O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/33#issuecomment-2342656407","body":"```python\r\n\r\nclass Solution:\r\n    def searchInsert(self, nums: List[int], target: int) -> int:\r\n        i = 0\r\n        j = len(nums) - 1\r\n        if nums[j] < target:\r\n            return j + 1\r\n        elif nums[0] > target:\r\n            return 0\r\n        while i <= j:\r\n            middle = (i+j)//2\r\n            if nums[middle] == target:\r\n                return middle\r\n            elif nums[middle] < target:\r\n                i = middle + 1\r\n            elif nums[middle] > target:\r\n                j = middle - 1\r\n            \r\n        return i\r\n\r\n\r\n``` \r\n\r\n\r\nTime O(logn)\r\n\r\nSpace O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/34#issuecomment-2345325649","body":"```python\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n        if not nums or k == 0:\n            return []\n        deq = deque()\n        result = []\n        for i in range(len(nums)):\n            if deq and deq[0] < i-k+1:\n                deq.popleft()\n            while deq and nums[deq[-1]] < nums[i]:\n                deq.pop()\n            deq.append(i)\n            if i >= k - 1:\n                result.append(nums[deq[0]])\n\n        return result\n\n\n```\n\n\nTime O(N)\n\nSpace O(K)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2345297188","body":"``` python\n\nclass Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        if n == 1 and not trust:\n            return 1\n        trust_count = [0] * (n+1)\n        trusted_count = [0] * (n+1)\n        for a , b in trust:\n            trust_count[a] += 1\n            trusted_count[b] += 1\n        for i in range(1, n+1):\n            if trust_count[i] == 0 and trusted_count[i] == n-1:\n                return i\n        return -1\n\n```\n\nTime: O(N) \n\nSpace: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/36#issuecomment-2348075804","body":"```python\n\nclass Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        graph = defaultdict(list)\n        for a, b in dislikes:\n            graph[a].append(b)\n            graph[b].append(a)\n\n        color = {}\n        def dfs(node, cur_color):\n            color[node] = cur_color\n            for neighbor in graph[node]:\n                if neighbor not in color:\n                    if not dfs(neighbor , 1- cur_color):\n                        return False\n                elif color[neighbor] == cur_color:\n                    return False\n            return True\n\n        for node in range(1, n+1):\n            if node not in color:\n                if not dfs(node, 0):\n                    return False\n        return True\n\n\n```\n\nTime: O(N+E) where N is the number of people and E is the number of dislike pairs\n\nSpace: O(N+E）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/37#issuecomment-2352009338","body":"```python\r\n\r\n\r\nclass Solution:\r\n\r\n    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:\r\n\r\n       \r\n\r\n        groupID = m\r\n\r\n        for i in range(n):\r\n\r\n            if group[i] == -1:\r\n\r\n                group[i] = groupID\r\n\r\n                groupID += 1\r\n\r\n        # groupID will be the max num of groups\r\n\r\n        group_indegree = defaultdict(int)       # number of pres of the group\r\n\r\n        group_nei = defaultdict(list)           # neighbor of the group   a -- b: need to work on a before b\r\n\r\n        project_indegree = defaultdict(int)     # number of pres of the project\r\n\r\n        project_nei = defaultdict(list)         # neighbor of a project   a -- b: need to work on a before b\r\n\r\n        group_project = defaultdict(list)       #  groupID -- projects in the group\r\n\r\n        for p in range(n):\r\n\r\n            group_project[group[p]].append(p)\r\n\r\n            for pre in beforeItems[p]:\r\n\r\n                if group[pre] != group[p]:   # pre and current project are from different groups, need to work on group topology\r\n\r\n                    group_indegree[group[p]] += 1\r\n\r\n                    group_nei[group[pre]].append(group[p])\r\n\r\n                else:           # pre and project are in same group, work on the project topology\r\n\r\n                    project_indegree[p] += 1\r\n\r\n                    project_nei[pre].append(p)\r\n\r\n        res = []\r\n\r\n        # toposort the groups\r\n\r\n        group_queue = self.toposort([i for i in range(groupID)], group_indegree, group_nei)\r\n\r\n        if len(group_queue) != groupID:\r\n\r\n            return []\r\n\r\n        for group in group_queue:   # toposort all projects of each group, concatenate the returned list to res list\r\n\r\n            project_queue = self.toposort(group_project[group], project_indegree, project_nei)\r\n\r\n            if len(project_queue) != len(group_project[group]):\r\n\r\n                return []\r\n\r\n           \r\n\r\n            res += project_queue\r\n\r\n        return res\r\n\r\n \r\n\r\n    def toposort(self, items, indegree, neighbor):\r\n\r\n        q = deque()\r\n\r\n        res = []\r\n\r\n        for item in items:\r\n\r\n            if item not in indegree:\r\n\r\n                q.append(item)\r\n\r\n       \r\n\r\n        while q:\r\n\r\n            node = q.popleft()\r\n\r\n            res.append(node)\r\n\r\n            for nei in neighbor[node]:\r\n\r\n                indegree[nei] -= 1\r\n\r\n                if indegree[nei] == 0:\r\n\r\n                    q.append(nei)\r\n\r\n       \r\n\r\n        return res\r\n\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2351380966","body":"```python\n\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:\n        a = 0\n        b = 0\n        for c in moves:\n            if c == 'R':\n                a += 1\n            elif c =='L':\n                a -= 1\n            elif c =='U':\n                b -= 1\n            elif c == 'D':\n                b += 1\n        if a == 0 and b == 0:\n            return True\n        return False\n\n\n```\n Time: O(n) where n is the length of moves\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/39#issuecomment-2354551605","body":"```python\n\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        index_task = [(tasks[i][0], tasks[i][1],i) for i in range(len(tasks))]\n        index_task.sort()\n\n        result = []\n        min_heap = []\n        time = 0\n        i = 0\n        n = len(tasks)\n\n        while i < n or min_heap:\n            # if no task in heap, move the time to the next task's enqueue time\n            if not min_heap and time < index_task[i][0]:\n                time = index_task[i][0]\n\n            # add all task that can be processed in current time to heap\n            while i < n and index_task[i][0] <= time:\n                heapq.heappush(min_heap, (index_task[i][1], index_task[i][2]))\n                i+=1\n            if min_heap:\n                proc_time, index = heapq.heappop(min_heap)\n                time += proc_time\n                result.append(index)\n        return result\n            \n\n```\n Time: O(Nlog(n))\n\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/40#issuecomment-2360016410","body":"```python\n\nclass Solution:\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\n        starth , startm = map(int, loginTime.split(\":\"))\n        endh, endm = map(int, logoutTime.split(\":\"))\n        start = starth*60 + startm\n        end = endh*60 + endm\n        # check the over night case\n        if start > end:\n            endh = endh + 24\n        if startm <= 15 and startm > 0:\n            startm = 15\n        elif startm <= 30 and startm >15:\n            startm = 30\n        elif startm <=45 and startm >30:\n            startm = 45\n        elif startm > 45 and startm <=60:\n            startm = 0\n            starth = starth + 1\n        if endm < 15 and endm >= 0:\n            endm = 0\n        elif endm < 30 and endm >=15:\n            endm = 15\n        elif endm <45 and endm >=30:\n            endm = 30\n        elif endm >= 45 and endm <60:\n            endm = 45\n        start = starth*60 + startm\n        end = endh*60 + endm\n        return (end-start)//15 if start < end else 0\n        \n\n```\n\nTime O(1)\n\nSpace O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/41#issuecomment-2362917385","body":"```python \n\n\n\nclass Solution:\n    def minCharacters(self, a: str, b: str) -> int:\n        count_a = [0]*26\n        count_b = [0]*26\n        \n        for char in a:\n            count_a[ord(char) -ord('a')] += 1\n        for char in b:\n            count_b[ord(char) -ord('a')] += 1\n        operation1 = len(a) + len(b)\n        # third condition\n        for i in range(26):\n            operation1 = min(operation1, len(a)+len(b) - count_a[i] - count_b[i])\n        ans = operation1\n        # first condition\n        for i in range(1, 26):\n            operation2 = 0\n            for j in range(i, 26):\n                operation2 += count_a[j]\n            for j in range(i):\n                operation2 += count_b[j]\n            \n            ans = min(ans, operation2)\n        #second condition\n        for i in range(1, 26):\n            operation3 = 0\n            for j in range(i, 26):\n                operation3 += count_b[j]\n            for j in range(i):\n                operation3 += count_a[j]\n            \n            ans = min(ans, operation3)\n        \n        return ans\n\n\nTime: O(1)\n\nSpace:O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/42#issuecomment-2365468921","body":"```python\n\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        if len(nums) == 1:\n            return nums\n        count = [0]*(2*50000 + 1)\n        res = []\n        for num in nums:\n            count[50000 + num] += 1\n        for i in range(len(count)):\n            while count[i] > 0:\n                res.append(i - 50000)\n                count[i] -= 1\n        return res\n\n```\n\nTime : O(N)\n\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2364153743","body":"```python\n\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0:\n            return 0\n        left = 0\n        right = x\n        while left <= right:     \n            mid = (left+right)//2\n            if mid*mid > x:\n                right = mid - 1\n            elif mid*mid < x:\n                left = mid + 1\n            else:\n                return mid              \n\n        return right\n\n\n```\n\n\nTime:O(NlogN)\n\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/44#issuecomment-2364333780","body":"```python\n\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right - left)//2\n            if isBadVersion(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left  \n\n\n\n```\n\n\nTime: O(LogN)\n\nSpace:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/45#issuecomment-2367260999","body":"``` python\r\n\r\nclass Solution:\r\n    def reversePairs(self, nums: List[int]) -> int:\r\n        def merge_sort(start,end):\r\n            if start>= end:\r\n                return 0\r\n            mid = (start + end)//2\r\n            count = merge_sort(start,mid) + merge_sort(mid+1, end)\r\n            j = mid + 1\r\n            #count the pairs\r\n            for i in range(start, mid + 1):\r\n                while j <= end and nums[i] > 2* nums[j]:\r\n                    j += 1\r\n                count += j - (mid + 1)\r\n\r\n            # merge two list\r\n            nums[start: end + 1] = sorted(nums[start : end+1])\r\n            return count\r\n        return merge_sort(0, len(nums)-1)\r\n\r\n\r\n```\r\n\r\nTime: O(nlogn)\r\n\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/46#issuecomment-2367268715","body":"```python\n\ndef min_radius(nums):\n    def can_cover_with_r(r):\n        lights_used = 0\n        i = 0\n        n = len(nums)\n        \n        while i < n and lights_used < 3:\n            lights_used += 1\n            cover_up_to = nums[i] + 2 * r\n            while i < n and nums[i] <= cover_up_to:\n                i += 1\n                \n        return i == n  # Return True if all houses are covered\n\n    nums.sort()\n    low, high = 0, (nums[-1] - nums[0]) / 2.0  # The max possible radius is half the range of houses\n    \n    while high >=low\n        mid = (low + high) / 2.0\n        if can_cover_with_r(mid):\n            high = mid  \n        else:\n            low = mid\n\n    return low\n\n```\n \nTime: O(nlogn)\n\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/47#issuecomment-2373051652","body":"```python\n\n\nclass Solution:\n    def smallestDistancePair(self, nums: List[int], k: int) -> int:\n\n        nums.sort()\n\n\n        def findpair(dist):\n            res = 0\n            l = 0\n            for r in range(1, len(nums)):\n                while nums[r]-nums[l] > dist:\n                    l += 1\n                res += r - l\n            \n            return res\n\n        l, r = 0, nums[-1] - nums[0]\n\n        while l < r:\n            m = (l + r) // 2\n            pairs = findpair(m)\n            if pairs >= k:\n                r = m\n            else:\n                l = m + 1\n        return l \n\n```\n\n\nTime: O(nlogn)\n\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/48#issuecomment-2378387116","body":"```python\n\n\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        seen = set()\n        def test( mid, x, y):\n            if x > len(grid) -1 or x < 0 or y > len(grid[0]) -1 or y < 0:\n                return False\n            if grid[x][y] > mid:\n                return False\n            if x == len(grid) -1 and y== len(grid[0])-1:\n                return True\n            if (x, y) in seen:\n                return False\n            seen.add((x,y))\n            ans = test(mid, x+1,y) or test(mid, x-1,y) or test(mid, x, y+1) or test(mid, x, y-1)\n            return ans\n        l = 0 \n        r = max([max(vec) for vec in grid])\n        print (r)\n        while l <= r:\n            mid = (l + r)//2\n            if test(mid, 0, 0):\n                r = mid - 1\n            else:\n                l = mid + 1\n            seen = set()\n        return l\n\n\n```\n\n\n````\nTime ","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/49#issuecomment-2375910251","body":"```python\n\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        n = len(s)\n        if k > n:\n            return 0\n        def testv (arr):\n            count = 0\n            for char in arr:\n                if char == 'a' or char == 'e' or char =='i' or char == 'o' or char == 'u':\n                    count += 1\n            return count\n                    \n   \n        maxn  = testv(s[:k])\n        current = testv(s[:k])\n        for i in range(k, n):\n            if s[i] == 'a' or s[i] == 'e' or s[i] =='i' or s[i] == 'o' or s[i] == 'u':\n                current += 1\n\n            if s[i - k ] == 'a' or s[i - k ] == 'e' or s[i - k ]=='i' or s[i - k ] == 'o' or s[i - k] == 'u':\n                current -= 1\n            maxn = max(maxn, current)\n\n        return maxn\n\n\n```\n\nTime: O(n)\n\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/50#issuecomment-2380420137","body":"```python\r\n\r\n\r\nclass Solution:\r\n    def new21Game(self, n: int, k: int, w: int) -> float:\r\n        if k == 0 or n >= k + w:\r\n            return 1.0\r\n        dp = [0.0]*(n+1) #sliding window sum for dp[i-1] to dp[i-w]\r\n        dp[0] = 1.0\r\n\r\n        win_sum = 1.0\r\n        result = 0.0\r\n\r\n        for i in range(1, n+1):\r\n            dp[i] = win_sum/w\r\n\r\n            if i < k:\r\n                win_sum += dp[i]\r\n            else:\r\n                result += dp[i]\r\n            if i-w>=0:\r\n                win_sum -= dp[i-w]\r\n\r\n        return result\r\n        \r\n\r\n\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/51#issuecomment-2380423774","body":"```python\n\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        k = len(p)\n        if len(p) > len(s):\n            return None\n        p_count = Counter(p)\n        s_count = Counter()\n        result = []\n        for i in range(len(s)):\n            s_count[s[i]] += 1\n            if i >= k:\n                left = s[i-k]\n                s_count[left] -=1\n                if s_count[left] == 0:\n                    del s_count[left]\n            if s_count == p_count:\n                result.append(i - k + 1) \n        \n        return result\n\n\n\n``` Time O(N), \n\n\nspace O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/52#issuecomment-2380850360","body":"```python\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if len(t) > len(s) or not t or not s:\n            return \"\"\n        counter_t = Counter(t)\n        required = len(counter_t)\n        n = len(s)\n        l, r = 0, 0\n        win_counts = defaultdict(int)\n        win_count = 0\n        ans = float(\"inf\"), None, None\n        while r < n:\n            c = s[r]\n            win_counts[c] += 1\n\n            if c in counter_t and win_counts[c] == counter_t[c]:\n                win_count += 1\n            \n            while l <= r and win_count == required:\n                c = s[l]\n\n                if r - l + 1 < ans[0]:\n                    ans = ( r-l+1, l, r)\n                win_counts[c] -= 1\n                if c in counter_t and win_counts[c] < counter_t[c]:\n                    win_count -=1\n                \n                l += 1\n            r += 1\n        \n        return \"\" if ans[0] == float(\"inf\") else s[ans[1] : ans[2] + 1]\n\n\n```\n\n\nTime: O(N+M)  N is length of s, M is length of t\n\nSpace: O(p) p is length of s substring","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/53#issuecomment-2381991781","body":"Leetcode 1423:\n\n```python\nclass Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        sump = sum(cardPoints)\n        n = len(cardPoints)\n        if n == k:\n            return sump\n        maxsum = sump - sum(cardPoints[:n-k])\n        cursum = sum(cardPoints[:n-k])\n        for i in range(n-k, n):\n            cursum = cursum + cardPoints[i] - cardPoints[i -n + k]\n            maxsum = max(maxsum, sump -cursum)\n        return maxsum \n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/54#issuecomment-2384801024","body":"```python\n\nclass Solution:\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\n        res = []\n        for hour in range(12):\n            for minute in range(60):\n                if bin(hour).count('1') + bin(minute).count('1') == turnedOn:\n                    res.append(f\"{hour}:{minute:02d}\")\n        return res\n\n\n```\n\n\nTime: O(1)\n\nSpace:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/55#issuecomment-2387660758","body":"``` python\n\n\nclass Solution:\n    def totalNQueens(self, n: int) -> int:\n        def backtrack(row):\n            nonlocal count\n            if row == n:\n                count += 1\n                return\n            for col in range(n):\n                if col not in cols and (row-col) not in d1 and (row+col) not in d2:\n                    cols.add(col)\n                    d1.add(row-col)\n                    d2.add(row+col)\n                    backtrack(row + 1)\n                    cols.remove(col)\n                    d1.remove(row-col)\n                    d2.remove(row+col)\n        count = 0\n        cols = set()\n        d1 = set()\n        d2 = set()\n        backtrack(0)\n        return count\n\n\n``` \nTime o(n!)\nSpace O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/56#issuecomment-2390594914","body":"```python\n\nclass Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        if not grid:\n            return 0\n        rows, cols = len(grid), len(grid[0])\n        def bfs(i,j):\n            #queue = deque([(i,j)])\n            queue = deque()\n            queue.append([i,j])\n            grid[i][j] = 0\n            area = 0\n            while queue:\n                x, y = queue.popleft()\n                area += 1\n                for dx, dy in [(1,0),(-1,0),(0, 1),(0, -1)]:\n                    nx, ny = x + dx, y+dy\n                    if 0<= nx < rows and 0<= ny <cols and grid[nx][ny] == 1:\n                        queue.append((nx,ny))\n                        grid[nx][ny] = 0\n            return area\n        max_area = 0\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    max_area = max(max_area, bfs(i,j))\n        return max_area\n\n``` \n\nTime: O(m*n)\n\nSpaceO(m*n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/57#issuecomment-2394547820","body":"```python\n\n\nclass Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        queue = deque()\n\n        #add all land to queue\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    queue.append((i,j))\n        \n        if len(queue) == 0 or len(queue) == n**2:\n            return -1\n        \n        direction = [(0,1), (1,0), (0,-1), (0,1)]\n        max_distance = -1\n\n        #bfs:\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in direction:\n                nx, ny = x+dx, y+dy\n                if 0<= nx < n and 0<= ny < n and grid[nx][ny] == 0:\n                    grid[nx][ny] = grid[x][y] + 1\n                    queue.append((nx,ny))\n                    max_distance = max(max_distance, grid[nx][ny])\n\n        return max_distance - 1\n\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/58#issuecomment-2395296947","body":"```python\n\n\n\nclass Solution:\n    def maxCandies(self, status: List[int], candies: List[int], keys: List[List[int]], containedBoxes: List[List[int]], initialBoxes: List[int]) -> int:\n        queue = deque(initialBoxes)\n        opened = set(initialBoxes)\n        available_keys = set()\n        unopened_boxes = set()\n        total_candies = 0\n\n        while queue:\n            box = queue.popleft()\n\n            if status[box] == 1 or box in available_keys:\n                total_candies += candies[box]\n\n                for key in keys[box]:\n                    available_keys.add(key)\n                    if key in unopened_boxes:\n                        queue.append(key)\n                        unopened_boxes.remove(key)\n                for new_box in containedBoxes[box]:\n                    if new_box in opened:\n                        continue\n                    if status[new_box] == 1 or new_box in available_keys:\n                        queue.append(new_box)\n                    else:\n                        unopened_boxes.add(new_box)\n                    opened.add(new_box)\n        return total_candies\n\n\n\n\n```\n\nTime O(n)\n\nSpace O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/59#issuecomment-2401350995","body":"```python\n\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return None\n        res = []\n        def dfs(node, x, y):\n            if not node:\n                return None\n            res.append((y, x, node.val))\n            dfs(node.left, x+1, y-1)\n            dfs(node.right, x+1, y+1)\n        dfs(root, 0, 0)\n        res.sort()\n        result = defaultdict(list)\n        for x, y, node in res:\n            result[x].append(node)\n        return [result[x] for x in sorted(result.keys())]\n\n\n\n```\n\nTime: O(NlogN)\n\nSpace:O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/60#issuecomment-2401363341","body":"```python\n\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        n = len(cost)\n        dp = [0] *n\n        dp[0] = cost[0]\n        dp[1] = cost[1]\n        for i in range(2, n):\n            dp[i] = min(dp[i-1], dp[i-2])+ cost[i]\n\n        return min(dp[n-1], dp[n-2])\n\n\n````\n\n\nTime O(N)\n\nSpace O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/61#issuecomment-2404042145","body":"```python\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        prev2, prev1 = 0, nums[0]\n        for i in range(1, len(nums)):\n            current = max(prev2+nums[i], prev1)\n            prev2 = prev1\n            prev1 = current\n        return prev1\n\n```\n\nTime: O(n)\n\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/62#issuecomment-2404080128","body":"```python\n\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        n = len(nums)\n        length = [1] *n\n        count = [1]*n\n        for i in range(n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    if length[j] + 1 > length [i]:\n                        length[i] = length[j] + 1\n                        count[i] = count[j]\n                    elif length[j] + 1 == length[i]:\n                        count[i] += count[j]\n        longest = max(length)\n        return sum(count[i] for i in range(n) if length[i] == longest)\n\n\n```\n\nTime: O(n*n)\n\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/63#issuecomment-2405648102","body":"\nclass Solution:        # T: O(mn) S: O(mn)\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        \n        DP = [[0] * (len(text2)+1) for _ in range(len(text1)+1)]\n        for r in range(len(text1)-1, -1, -1):   # text1 - r\n            for c in range(len(text2)-1, -1, -1): # text2 - c\n                if text1[r] == text2[c]:\n                    DP[r][c] = 1 + DP[r+1][c+1]\n                else:\n                    DP[r][c] = max(DP[r+1][c], DP[r][c+1])\n        \n        return DP[0][0]\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/64#issuecomment-2405662674","body":"class Solution:         # T: O(mn)  S: O(mn)\n    def uniquePaths(self, m: int, n: int) -> int:\n        \n        DP = [[1] * n for _ in range(m)]\n        for r in range(m-2, -1, -1):\n            for c in range(n-2, -1, -1):\n                DP[r][c] = DP[r+1][c] + DP[r][c+1]\n        \n        return DP[0][0]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/65#issuecomment-2407843845","body":"class Solution:         #  T: O(n^2 * k)    S: O(n^2)\n    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:\n\n        if k == 0:\n            return 1.0\n\n        DP = [[0] * n for _ in range(n)]\n        DP[row][column] = 1\n\n        moves = [[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]]\n\n        while k:\n            temp = [[0] * n for _ in range(n)]\n            for r in range(n):\n                for c in range(n):\n                    if DP[r][c] > 0:\n                        for dr, dc in moves:\n                            nr, nc = dr + r, dc + c\n                            if nr < 0 or nr >= n or nc < 0 or nc >= n:\n                                continue                        \n                            temp[nr][nc] += DP[r][c] / 8\n            DP = temp\n            k -= 1\n        \n        total_prob = 0\n        for r in range(n):\n            for c in range(n):\n                total_prob += DP[r][c]\n        return total_prob\n\n        \n\n        ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/66#issuecomment-2408809697","body":"class Solution:     # T: O(n * 2^n)  S: O(2^n)\r\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\r\n        if desiredTotal <= maxChoosableInteger:\r\n            return True\r\n        \r\n        total = (maxChoosableInteger + 1) * maxChoosableInteger / 2\r\n        if total < desiredTotal:\r\n            return False\r\n\r\n        calculated = {}  # list of vals - True/False  : whether the input list will win/lose the game\r\n        def helper(available, remainder):\r\n\r\n            if available[-1] >= remainder:  # last val of the input list larger than remainder\r\n                return True\r\n            \r\n            selected = tuple(available) # list cannot be used as the hashtable key\r\n            if selected in calculated:\r\n                return calculated[selected]\r\n\r\n            for i, n in enumerate(available):\r\n                if not helper(available[:i]+available[i+1:], remainder - n): \r\n                    calculated[selected] = True        # if any sub-problem of available returns False, the selected input will be true: there's a way to win the game\r\n                    return True\r\n            \r\n            # if all the sub-problems of available return True, the selected input will lose the game\r\n            calculated[selected] = False\r\n            return False\r\n\r\n        available = [i for i in range(1, maxChoosableInteger+1)]\r\n        return helper(available, desiredTotal) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/67#issuecomment-2409078814","body":"class Solution:     # T: O(n * sum(nums))  S: O(n * sum(nums))\n    def canPartition(self, nums: List[int]) -> bool:\n\n        total = sum(nums)\n        if total % 2:\n            return False \n        half = total / 2\n\n        DP = set([0])\n        for i in range(len(nums)):\n            tempDP = set()\n            for n in DP:\n                if nums[i] + n == half:\n                    return True\n                elif nums[i] + n < half:\n                    tempDP.add(nums[i] + n)\n                tempDP.add(n)   # add original values \n            DP = tempDP \n\n        return half in DP\n\n        ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/68#issuecomment-2411775242","body":"class Solution:     # T: O(n * 2^n)  S: (2^n)\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n\n        count = defaultdict(int)\n        count[nums[0]] += 1\n        count[-nums[0]] += 1\n\n        for i in range(1, len(nums)):\n            tempcount = defaultdict(int)\n            for val in count.keys():\n                positive = nums[i] + val\n                tempcount[positive] += count[val]\n\n                negative = -nums[i] + val\n                tempcount[negative] += count[val]\n            count = tempcount\n\n        return count[target]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/69#issuecomment-2414518470","body":"class Solution:     # T: O(n * amount)  S: O(amount)\r\n    def coinChange(self, coins: List[int], amount: int) -> int:\r\n\r\n        DP = {0:0}        \r\n        def backtrack(remainder):\r\n\r\n            if remainder in DP:\r\n                return DP[remainder]\r\n\r\n            res = inf\r\n            for c in coins:\r\n                if remainder - c >= 0 :\r\n                    res = min(res, 1 + backtrack(remainder-c))             \r\n            DP[remainder] = res\r\n            return res\r\n\r\n        res = backtrack(amount)\r\n        return res if res != inf else -1\r\n\r\n\r\nclass Solution:     # T: O(n * amount)  S: O(amount)\r\n    def coinChange(self, coins: List[int], amount: int) -> int:\r\n\r\n        DP = [amount+1] * (amount+1)\r\n        DP[0] = 0\r\n        \r\n        for i in range(1, amount+1):\r\n            for c in coins:\r\n                if i - c >= 0:\r\n                    DP[i] = min(DP[i], 1 + DP[i-c])\r\n        \r\n        return DP[-1] if DP[-1] != amount+1 else -1","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/70#issuecomment-2417383218","body":"class Solution:     # T: O(n * amount) S: O(amount)\n    def change(self, amount: int, coins: List[int]) -> int:\n\n        DP = [0] * (amount + 1) \n        DP[0] = 1   # one way to reach amount 0\n    \n        for c in coins:\n            for i in range(1, amount+1):\n                if i - c >= 0:\n                    DP[i] += DP[i - c]\n        \n        return DP[amount]\n        ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/71#issuecomment-2420047403","body":"class Solution:     # T: O(nlogn)  S: O(sorting)\n    def findContentChildren(self, g: List[int], s: List[int]) -> int:\n\n        if not s:\n            return 0\n\n        g.sort()\n        s.sort()\n\n        i, j = 0, 0\n        res = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                res += 1\n                i += 1\n            j += 1\n\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/72#issuecomment-2422801488","body":"class Solution:     # T: O(nlogn)  S: O(1)\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        \n        intervals.sort()\n        \n        res = 0\n        prev_end = intervals[0][1]\n        for i in range(1, len(intervals)):\n            start, end = intervals[i]\n            if start < prev_end:\n                res += 1\n                prev_end = min(prev_end, end)\n            else:\n                prev_end = end\n\n        return res ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/73#issuecomment-2424154611","body":"class Solution:     # T: O(n)  S: O(1)\r\n    def canJump(self, nums: List[int]) -> bool:\r\n\r\n        target = len(nums) - 1\r\n\r\n        for i in range(len(nums)-2, -1, -1):\r\n            if nums[i] >= target - i:\r\n                target = i\r\n        \r\n        return target == 0\r\n\r\nclass Solution:     # T: O(n)  S: O(1)\r\n    def canJump(self, nums: List[int]) -> bool:\r\n\r\n        extra = 0\r\n        for i in range(len(nums)-1):\r\n            extra = max(nums[i], extra - 1)\r\n            if extra < 1:\r\n                return False\r\n        return True\r\n        ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/74#issuecomment-2425281360","body":"class Solution:     # T: O(n^2)  S: O(n)\n    def numTrees(self, n: int) -> int:\n        \n\n        DP = [0] * (n+1)   # base case DP[0] = DP[1] = 1\n        DP[0] = 1\n        DP[1] = 1\n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                leftlen = j - 1\n                rightlen = i - j\n                DP[i] += DP[leftlen] * DP[rightlen]\n        \n        return DP[n]","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jialigogogo":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2292823950","body":"## 思路\r\n\r\n转为数组末位相加\r\n\r\n## 代码\r\n\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        String[] split = Integer.toString(k).split(\"\");\r\n        LinkedList<Integer> list = new LinkedList<>();\r\n        int nl = num.length - 1;\r\n        int sl = split.length - 1;\r\n        int ii = Math.max(nl, sl);\r\n        int t = 0;\r\n        for (int i = 0; i <= ii; i++) {\r\n            int a = nl - i < 0 ? 0 : num[nl - i];\r\n            int b = sl - i < 0 ? 0 : Integer.parseInt(split[sl - i]);\r\n            int sum = a + b + t;\r\n            int m = sum % 10;\r\n            t = (sum - m) / 10;\r\n            list.addFirst(m);\r\n        }\r\n        if (t != 0) {\r\n            list.addFirst(t);\r\n        }\r\n        return list;\r\n    }\r\n}\r\n\r\n```\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293069976","body":"## 思路\r\n\r\n记录上一个指定字符的下标，计算到上一个指定字符和当前指定字符的距离，取最小值，只有一个边界时直接计算距离\r\n\r\n## 代码\r\n\r\n```java\r\npublic static int[] shortestToChar2(String s, char c) {\r\n    int[] in = new int[s.length()];\r\n    // 上一个c的位置\r\n    int l = -1;\r\n    for (int i = 0; i < in.length; i++) {\r\n        if (s.charAt(i) == c){\r\n            if (l == -1){\r\n                for (int j = l + 1; j < i; j++){\r\n                    in[j] = i - j;\r\n                }\r\n            } else {\r\n                for (int j = l + 1; j < i; j++){\r\n                    in[j] = Math.min(j - l, i - j);\r\n                }\r\n            }\r\n            l = i;\r\n        }\r\n    }\r\n    if (l != in.length - 1){\r\n        for (int i = 1; l + i < in.length; i++) {\r\n            in[l + i] = i;\r\n        }\r\n    }\r\n    return in;\r\n}\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n^2)\r\n\r\n空间复杂度：O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2295686593","body":"## 思路\r\n\r\n一个输入队列 顺序为 后 -> 先\r\n\r\n一个输出队列 顺序为 先 -> 后\r\n\r\n## 代码\r\n\r\n```java\r\nclass MyQueue {\r\n        LinkedList<Integer> in = new LinkedList<>();\r\n        LinkedList<Integer> out = new LinkedList<>();\r\n\r\n        public MyQueue() {\r\n\r\n        }\r\n\r\n        public void push(int x) {\r\n            in.push(x);\r\n        }\r\n\r\n        public int pop() {\r\n            int2out();\r\n            return out.pop();\r\n        }\r\n\r\n        public int peek() {\r\n            int2out();\r\n            return out.peek();\r\n        }\r\n\r\n        public boolean empty() {\r\n            return in.isEmpty() && out.isEmpty();\r\n        }\r\n\r\n        public void int2out(){\r\n            if (out.isEmpty()){\r\n                while (!in.isEmpty()){\r\n                    out.push(in.pop());\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(1)\r\n\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2297882654","body":"## 思路\r\n\r\n每个分段里的所有值，大于左边分段里的最大值\r\n\r\n## 代码\r\n\r\n```java\r\npublic static int maxChunksToSorted(int[] arr) {\r\n        LinkedList<Integer> l = new LinkedList<>();\r\n        for (int a : arr) {\r\n            if (l.isEmpty() || a >= l.peek()){\r\n                // 保留每个分段的最大值\r\n                l.push(a);\r\n            } else {\r\n                // 取出当前分段最大值\r\n                int max = l.pop();\r\n                while (!l.isEmpty() && l.peek() > a){\r\n                    // 右边的值小于左边分段最大值，合并分段\r\n                    l.pop();\r\n                }\r\n                l.push(max);\r\n            }\r\n        }\r\n        return l.size();\r\n    }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2300530676","body":"## 思路\r\n\r\n将链表首位相连，根据偏移量取旋转后的最后一位\r\n\r\n## 代码\r\n\r\n```java\r\npublic static ListNode rotateRight(ListNode head, int k) {\r\n        if (head == null || head.next == null || k == 0){\r\n            return head;\r\n        }\r\n        ListNode l = head;\r\n        int max = 1;\r\n        while (l.next != null){\r\n            l = l.next;\r\n            max++;\r\n        }\r\n        // 移动的次数\r\n        int f = k % max;\r\n        if (f == 0){\r\n            return head;\r\n        }\r\n        // 首位相连\r\n        l.next = head;\r\n        ListNode end = head;\r\n        // 获取旋转后的最后一位\r\n        while (++f < max){\r\n            end = end.next;\r\n        }\r\n        ListNode re = end.next;\r\n        end.next = null;\r\n        return re;\r\n    }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n\r\n空间复杂度：O(1)","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2311981987","body":"## 思路\r\n\r\n遍历统计\r\n\r\n## 代码\r\n\r\n```java\r\npublic static int maxDepth(TreeNode root) {\r\n        return root == null ? 0 : Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\r\n    }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n)\r\n\r\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2327770325","body":"## 思路\r\n\r\n先获取每个点之间的距离，再计算相同距离点的排列数量\r\n\r\n## 代码\r\n\r\n```java\r\n public static int numberOfBoomerangs(int[][] points) {\r\n        int sum = 0;\r\n        for (int[] a : points) {\r\n            Map<Integer, Integer> map = new HashMap<>();\r\n            for (int[] b : points){\r\n                int c = (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]);\r\n                map.put(c, map.getOrDefault(c, 0) + 1);\r\n            }\r\n            for (Integer m : map.values()){\r\n                sum = m * (m - 1) + sum;\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(n2)\r\n\r\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/64#issuecomment-2407055076","body":"\r\n\r\n## 代码\r\n\r\n```java\r\n public int uniquePaths(int m, int n) {\r\n     int[] dp = new int[n];\r\n     Arrays.fill(dp, 1);\r\n     for (int i = 1; i < m; i++) {\r\n         for (int j = 1; j < n; j++) {\r\n             dp[j] = dp[j] + dp[j - 1];\r\n         }\r\n     }\r\n     return dp[n - 1];\r\n }\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度：O(mn)\r\n\r\n空间复杂度：O(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/69#issuecomment-2416283403","body":"## 思路\n\n动态规划构建一个数组，其中每个元素表示组成对应金额所需的最少硬币数。组成金额 0 不需要任何硬币 ，对于每个金额，尝试使用所有可用的硬币面额来更新最少硬币数的值。\n\n## 代码\n\n```java\nclass Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        for (int i = 1; i <= amount; i++) {\n            dp[i] = amount + 1;\n        }\n        dp[0] = 0;\n        for (int i = 1; i <= amount; i++) {\n            for (int coin : coins) {\n                if (coin <= i) {\n                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n                }\n            }\n        }\n        return dp[amount] > amount ? -1 : dp[amount];\n    }\n\n```\n\n## 复杂度\n\n时间复杂度：O(amount * coins.length)\n\n空间复杂度：O(amount)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"celestexiong":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2290329175","body":"### 思路\r\n\r\nAdd up digits one by one from num and k, and use a variable to store the carry-over value. Use an array to store the intermediate result. \r\n\r\nNeed to consider the case when `k` has different number of digits than the array `num`.\r\n\r\n### 代码\r\n\r\n\r\n```python3\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        result = []\r\n        rest = 0\r\n        for i in range(len(num)-1, -1, -1):\r\n            inter_sum = num[i] + k % 10 + rest\r\n            result.append(inter_sum % 10)\r\n            rest = inter_sum // 10\r\n            k //= 10\r\n        \r\n        while k > 0:\r\n            inter_sum = k % 10 + rest\r\n            result.append(inter_sum % 10)\r\n            rest = inter_sum // 10\r\n            k //= 10\r\n\r\n        if rest:\r\n            result.append(rest)\r\n        return result[::-1]\r\n            \r\n```\r\n\r\n**复杂度分析**\r\n- 时间复杂度：O(max(N, logk)), n is the length of the array num. \r\n- 空间复杂度：O(1). ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293840411","body":"### Intuition \r\nFor each element, we can traverse from left to right to find the distant to the target in the left of it. Then traverse from right to left, to find the distance to the target in the right of it. Finally we pick the minimum of these two distance.\r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        # O(n), O(1)\r\n        prev = float('-inf')\r\n        ans = []\r\n        for i, char in enumerate(s):\r\n            if char == c: prev = i\r\n            ans.append(i - prev)\r\n        \r\n        after = float('inf')\r\n        for i in range(len(s)-1, -1, -1):\r\n            if s[i] == c: after = i\r\n            ans[i] = min(ans[i], after-i)\r\n        return ans\r\n\r\n\r\n        # O(n^2), O(1)\r\n        ans = []\r\n        for i in range(len(s)):\r\n            j = 0\r\n            while i-j >= 0 or i+j < len(s):\r\n                if (i-j >= 0 and s[i-j] == c) or (i+j < len(s) and s[j+i] == c): \r\n                    ans.append(j)\r\n                    break\r\n                j += 1\r\n        return ans\r\n\r\n        # O(n^2), O(1)\r\n        ans = []\r\n        for i in range(len(s)):\r\n            dis = len(s)\r\n            for j in range(len(s)):\r\n                if s[j] == c: \r\n                    dis = min(dis, abs(j-i))\r\n            ans.append(dis)\r\n        return ans\r\n```\r\n### Complexity Analysis\r\nTime: O(n), n is the length of the `s`\r\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295581802","body":"#### Intuition\r\nThere would be nested pattern like `k_1[encoded_1 k_2 [encoded_2]]` so we can use stack to handle this question. We need decode the nested `k_2 [encoded_2]`, push the decoded string into the stack and concatenate it with `encoded_1`.\r\n\r\n#### Algorithm\r\nTraverse characters of given string and store them into a stack. When we get a \"]\", we need to calculate the intermediate decoded string by pop characters from the stack. Then we push the intermediate decoded string into the stack. And continue the traversal.\r\n\r\n```python3\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        stack = []\r\n        for char in s:\r\n            if (\"0\" <= char <= \"9\" or \"a\" <= char <= \"z\"): \r\n                stack.append(char)\r\n            elif (char == \"[\"): stack.append(char)\r\n            elif (char == \"]\"): \r\n                k = \"\"\r\n                encoded = \"\"\r\n                while stack and stack[-1] != \"[\":\r\n                    encoded = stack.pop() + encoded\r\n                if stack and stack[-1] == \"[\": stack.pop()\r\n                while stack and \"0\" <= stack[-1] <= \"9\":\r\n                    k = stack.pop() + k\r\n                intermediate = int(k) * encoded \r\n                stack.append(intermediate)\r\n        return \"\".join(stack)\r\n```\r\n\r\n#### Complexity\r\nAssuming that the length of given string is n and the length of decoded string is N\r\nTime: O(n + N), \r\n\r\nSpace: O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2295533026","body":"#### Intuitive\r\nUse to stacks, one for storage, one for query. Transfer the data from the storage stack to the query stack to get reversed elements, and the query stack's top is the first element of the queue. \r\nThe key is when we need execute the data transferation. \r\n#### Algorithm\r\n```python3\r\nclass MyQueue:\r\n\r\n    def __init__(self):\r\n        self.store = []\r\n        self.query = []\r\n\r\n    def push(self, x: int) -> None:\r\n        self.store.append(x)\r\n\r\n    def pop(self) -> int:\r\n        if len(self.query) == 0:\r\n            for i in range(len(self.store)-1, -1, -1):\r\n                self.query.append(self.store[i])\r\n                self.store.pop()\r\n        return self.query.pop()\r\n\r\n    def peek(self) -> int:\r\n        if len(self.query) == 0:\r\n            for i in range(len(self.store)-1, -1, -1):\r\n                self.query.append(self.store[i])\r\n                self.store.pop()\r\n        return self.query[-1]\r\n\r\n    def empty(self) -> bool:\r\n        return len(self.store) == 0 and len(self.query) == 0\r\n\r\n\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()\r\n```\r\n\r\n#### Complexity Analysis\r\n1. Time: Assuming that N is the number of pushed operations\r\n    - Push: O(1), \r\n    - Pop: worst case: O(n) (but every element will only be transferred once), best case O(1)\r\n    - Peek: worst case: O(n) (but every element will only be transferred once), best case O(1)\r\n    - Empty: O(1)\r\n2. Space: \r\nO(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2298110809","body":"#### Intuition\r\nAssuming that there are k chunks $$c_1, c_2, ... c_k$$. For every two chunks $c_i$ and $c_(i+1),$ where $i  < k$, this rule exists: $max(c_i) <= min(c_(i+1))$. \r\n\r\n#### Algorithm\r\nTraverse the array, use an increasing stack to store the current $max(c_i)$. When current element is less than the current $max(c_i)$, pop the stack to merge previous chunks until the top of the stack is not larger than the current element, which means we find the chunk that the current element belongs to. Then we push the $max(c_i)$ back for the above rule in the intuition.\r\n\r\n```python3\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stack = []\r\n        for a in arr:\r\n            if len(stack) == 0 or a >= stack[-1]:\r\n                stack.append(a)\r\n            else:\r\n                current_max = stack.pop()\r\n                while stack and stack[-1] > a:\r\n                    stack.pop()\r\n                stack.append(current_max)\r\n        return len(stack)\r\n```\r\n\r\n#### Complexity\r\nAssuming that `n` is the length of the input arrar\r\n1. Time: O(n), \r\n2. Space: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2300091910","body":"#### Intuition\nUse modulo to process k to get the times we need to rotate the list. Assuming the number of nodes is n, then we need rotate n % k times. Then we find the (k + 1)-th node from the last and set the next to null. And update the next of the last node to the head node.\n\n#### Algorithm\n```python3\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if k == 0 or not head: return head\n        length = 0\n        node = head\n        while node:\n            length += 1\n            node = node.next\n        k = k % length\n\n        node = head\n        for i in range(length-k-1):\n            node = node.next\n        node_new_head = node.next\n        node.next = None\n\n        node = node_new_head\n        if not node: return head\n\n        while node and node.next:\n            node = node.next\n        node.next = head\n        return node_new_head\n```\n\n#### Complexity\nTime: O(n), n is the number of nodes\n\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2303294343","body":"#### Intuition\nStraightforward. Need save the previous node after the swap.\n\n#### Algorithm\n```python3\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy_head = ListNode(0, head)\n        node = dummy_head.next\n        prev = dummy_head \n        while node and node.next:\n            # swap\n            node_next = node.next\n            temp = node_next.next\n            node_next.next = node \n            node.next = temp\n            prev.next = node_next \n            # for next step\n            prev = node \n            node = node.next\n        return dummy_head.next\n```\n\n#### Complexity\nTime: O(n), n is the length of the linked list\n\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2306433596","body":"#### Intuition\nUse the middle element in the linked list as the root. Use recursion to build subtrees.\n#### Algorithm\n```python3\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        def construct_tree(left, right):\n            if left > right: return None\n\n            mid = (left + right) // 2\n            root = TreeNode(node_list[mid])\n            root.left = construct_tree(left, mid-1)\n            root.right = construct_tree(mid+1, right)\n            return root\n        \n        if not head: return head\n        node_list = []\n        node = head \n        while node:\n            node_list.append(node.val)\n            node = node.next\n        length = len(node_list)\n        return construct_tree(0, length-1)\n\n```\n\n#### Complexity\n\nTime: O(n), n is the length of the linked list\n\nSpace: O(n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2307707482","body":"### Intuition\nIf we say that c is the shared part, a is exclusive part of list A and b is exclusive part of list B, then we can have one pointer that goes over a + c + b and the other that goes over b + c + a\n\n### Algorithm\n```python3\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        a_start = headA\n        b_start = headB\n\n        node_a, node_b = a_start, b_start\n        while node_a or node_b:\n            if node_a == node_b: return node_a\n            node_a = node_a.next\n            node_b = node_b.next\n            if not node_a: \n                if a_start == headB: return None\n                node_a = headB\n                a_start = headB\n            \n            if not node_b: \n                if b_start == headA: return None\n                node_b = headA\n                b_start= headA\n        return None\n```\n\n### Complexity\nTime: O(m+n), m is length of A list, n is length of B list\n\nSpace: O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308636948","body":"### Intuition\nUse a faster point and a slower point starting in the head. The faster pointer walked twice as fast as the slower pointer. Assuming that a is the length of the head to the entrance of the circle, and b is the length of the entrance to the first meet point, and c is the length of the circle. When they first met, the faster pointer walked $(a + b + kc)$, and the slower pointer walked $(a+b)$, so we got (a+b+kc) = 2(a+b), where we can obtain the a = kc - b. Then we move the faster pointer back into the head, and walked in the same speed as the slower pointer. Once they met, we got the entrance to the circle.\n### Algorithm\n```python3\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow, fast = head, head\n        while fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next \n            if slow == fast: break\n        if not fast or not fast.next: return None\n        fast = head\n        while slow and fast:\n            if fast == slow: return fast\n            fast = fast.next \n            slow = slow.next \n        return None\n```\n\n### Complexity\nTime: O(n), n is the length of linked list\n\nSpace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/18#issuecomment-2308987151","body":"#### Intuition\n\nUse LinkedList to implement add and push in O(1) time. Use a HashMap to implement search by O(1) time\n\n#### Algorighm\n```python3\nclass ListNode:\n    def __init__(self, key=-1, val=-1, before=None, next_=None):\n        self.key = key\n        self.val = val\n        self.before = before\n        self.next = next_\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.head = ListNode()\n        self.tail = ListNode()\n        self.head.next = self.tail\n        self.map = {}\n        self.capacity = capacity\n        self.current_size = 0\n\n    def get(self, key: int) -> int:\n        if key not in self.map: return -1\n\n        # delete from the original location and head insert\n        node = self.map[key]\n        node.before.next = node.next \n        node.next.before = node.before\n\n        self.head_insert(node)\n        return node.val\n\n    def head_insert(self, node):\n        node.next = self.head.next \n        node.next.before = node\n\n        node.before = self.head\n        self.head.next = node\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.map: \n            node = self.map[key]\n            node.val = value\n            # delete from the original location and head insert\n            node.before.next = node.next \n            node.next.before = node.before\n            self.head_insert(node)\n        else: \n            node = ListNode(key, value)\n            self.map[key] = node\n            self.head_insert(node)\n            \n            if self.current_size == self.capacity:\n                self.remove_from_tail()\n            else: \n                self.current_size += 1\n\n    def remove_from_tail(self):\n        node = self.tail.before \n\n        self.tail.before = node.before\n        node.before.next = self.tail\n\n        node.next = None\n        if node != self.head:\n            del self.map[node.key]\n            \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n```\n#### Complexity\nTime: O(1), \n\nSpace: O(capacity from the input)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2311676518","body":"### Intuition\nRecursion\n\n### Algorithm\n```python3\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        def getDepth(root, depth):\n            if not root:\n                self.result = max(self.result, depth)\n                return\n            getDepth(root.left, depth+1)\n            getDepth(root.right, depth+1)\n\n        self.result = 0\n        getDepth(root, self.result)\n        return self.result \n```\n### Complexity\nTime: O(n), n is the number of nodes\n\nSpace: O(n), ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2316690774","body":"### Intuition\r\nRecursion\r\n\r\n### Algorithm\r\n```python3\r\n# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\r\n        if p and q:\r\n            return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\r\n        elif not p and not q:\r\n            return True\r\n        else: return False\r\n```\r\n### Complexity\r\nTime: O(n), n is the number of nodes in the tree\r\n\r\nSpace: O(h), h is the height of the tree","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2316721095","body":"Recursion\n\n```python3\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        def getNumber(root, number):\n            number = number * 10 + root.val\n            if not root.left and not root.right: \n                return number\n            left_sum, right_sum = 0, 0\n            if root.left:\n                left_sum = getNumber(root.left, number)\n            if root.right:\n                right_sum = getNumber(root.right, number)\n            return left_sum + right_sum\n        return getNumber(root, 0)\n            \n```\n\nComplexity:\n1. Time: O(n), n is the number of nodes\n2. Space: O(h), h is the height of the tree","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2320216662","body":"### Intuition\nBFS\n\n### Algorithm\n```python3\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        if not root: return []\n        queue = [(root, 0)]\n        result = root.val\n        last_level = 0\n        while queue:\n            node, cur_level = queue.pop(0)\n            if last_level < cur_level: \n                result = node.val\n                last_level = cur_level\n            if node.left: \n                queue.append((node.left, cur_level+1))\n            if node.right:\n                queue.append((node.right, cur_level+1))\n            \n        return result\n        \n        \n```\n### Complexity\nTime: O(n), n is the number of nodes\n\nSpace: O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/24#issuecomment-2323191916","body":"### Intuition\nDFS\n\n### Algorithm\n```python3\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        result = {}\n        def dfs(node, row, col):\n            if not node: return\n            if col not in result:\n                result[col] = [(node.val, row)]\n            else:\n                result[col].append((node.val, row))\n            dfs(node.left, row+1, col-1)\n            dfs(node.right, row+1, col+1)\n        dfs(root, 0, 0)\n        for key, value in result.items():\n            result[key] = sorted(value, key=lambda x: (x[1], x[0]))\n        response = []\n        for key in sorted(result.keys()):\n            response_row = []\n            for ele in result[key]:\n                response_row.append(ele[0])\n            response.append(response_row)\n        return response\n```\n\n### Complexity\nTime: O(nlogn), where n is the number of nodes\n\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2330602291","body":"### Intuition\r\nHashmap\r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n        delta = {}\r\n        for idx, num in enumerate(nums):\r\n            if num in delta:\r\n                return [idx, delta[num]]\r\n            else:\r\n                delta[target-num] = idx\r\n```\r\n### Complexity\r\nTime: O(n), where n is the size of the numbers\r\n\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2330637091","body":"### Intuition\r\nHeap sort and hashmap\r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\r\n        freq_map = {} # num: freq\r\n        heap = [] # a min heap: (num, freq)\r\n        for num in nums:\r\n            if num in freq_map: \r\n                freq_map[num] += 1\r\n            else:\r\n                freq_map[num] = 1\r\n        for num, freq in freq_map.items():\r\n            if len(heap) < k: heappush(heap, [freq, num])\r\n            elif heap[0][0] < freq:\r\n                heappop(heap)\r\n                heappush(heap, [freq, num])\r\n        return [value[1] for value in heap]\r\n```\r\n### Complexity\r\nTime: O(nlogk), where n is the size of numbers\r\n\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2330729213","body":"### Intuition\r\nHashmap\r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\r\n        distance = {}\r\n        for i in range(len(points)):\r\n            a = points[i]\r\n            for j in range(len(points)):\r\n                if i == j: continue\r\n                b = points[j]\r\n                dist = (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1])\r\n                if i in distance:\r\n                    if dist in distance[i]:\r\n                        distance[i][dist].append(j)\r\n                    else: \r\n                        distance[i][dist] = [j]\r\n                else: \r\n                    distance[i] = {dist: [j]}\r\n        result = 0\r\n        for idx in distance:\r\n            for dis in distance[idx]:\r\n                n = len(distance[idx][dis])\r\n                result += (1 + n - 1) * (n-1)\r\n        return result\r\n```\r\n\r\n### Complexity\r\nTime: O(n^2), where n is the number of points\r\n\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2330853033","body":"### Intuition\r\nSlide windows by two pointers \r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def lengthOfLongestSubstring(self, s: str) -> int:\r\n        location = {}\r\n        left = 0\r\n        right = 0\r\n        result = 0\r\n        while left <= right and right <= len(s) - 1:\r\n            if s[right] not in location:\r\n                location[s[right]] = right\r\n            else:\r\n                left = max(left, location[s[right]]+1)\r\n                location[s[right]] = right\r\n            result = max(result, right-left+1)\r\n            right += 1\r\n        return result\r\n            \r\n```\r\n### Complexity\r\nTime: O(n), where n is the length of the string s\r\n\r\nSpace: O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/30#issuecomment-2336813971","body":"### Intuition\r\n1. Prefix\r\n2. Mod: assume n is the length of the array N\r\n  - If $\\sum_{i=0}^{n}n_i \\mod p = x$, we need find a subarray ${n_i, ..., n_i}$ which makes $(\\sum_{i=0}^{n}n_i - \\sum_{k=i}^{j}n_k) \\mod p = 0$ <=> $\\sum_{k=i}^{j}n_k \\mod p = x$. So we need find the shortest subarray which makes $\\sum_{k=i}^{j}n_k \\mod p = x$\r\n  - We can use the prefix sum to find the target array. \r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def minSubarray(self, nums: List[int], p: int) -> int:\r\n        target = sum(nums) % p\r\n        prefix_mod = {0 : -1} # prefix_sum%p: index\r\n        cur_sum = 0\r\n        ans = len(nums)\r\n        for i, num in enumerate(nums):\r\n            cur_sum += num\r\n            prefix_mod[cur_sum % p] = i\r\n            need_mod = (cur_sum  - target) % p\r\n            if need_mod in prefix_mod:\r\n                j = prefix_mod[need_mod]\r\n                ans = min(ans, i - j)\r\n        return ans if ans < len(nums) else -1\r\n```\r\n### Complexity\r\nTime: O(n)\r\n\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2345362326","body":"### Intuition\r\nFast and slow pointer\r\n\r\n### Algoritthm\r\n```python3\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        slower, faster = head, head\r\n        while faster and faster.next:\r\n            slower = slower.next \r\n            faster = faster.next.next\r\n        return slower\r\n```\r\n\r\n### Complexity\r\nTime: O(n), where n is the length of the linked list\r\n\r\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2345380832","body":"### Intuition\r\nTwo pointers \r\n\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def removeDuplicates(self, nums: List[int]) -> int:\r\n        n = len(nums)\r\n        left = 0\r\n        for right in range(n):\r\n            if right == 0 or (right > 0 and nums[right-1] != nums[right]):\r\n                nums[left] = nums[right]\r\n                left += 1\r\n        return left\r\n```\r\n\r\n### Complexity\r\nTime: O(N), where N is the size of the array nums\r\n\r\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/33#issuecomment-2398837311","body":"Binary search\r\n```python3 \r\nclass Solution:\r\n    def searchInsert(self, nums: List[int], target: int) -> int:\r\n        left = 0\r\n        right = len(nums) - 1\r\n        while left <= right:\r\n            mid = left + (right - left) // 2\r\n            if (nums[mid] == target):\r\n                return mid\r\n            elif (nums[mid] < target):\r\n                left = mid + 1\r\n            else:\r\n                right = mid - 1\r\n        return left \r\n```\r\nTime: O(logN), where N is the length of the numbers\r\nSpace: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/34#issuecomment-2345468349","body":"### Intuition\r\nHeap\r\n### Algorithm\r\n```python3\r\nclass Solution:\r\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\r\n        if len(nums) == 0: return []\r\n        \r\n        heap = []\r\n        result = []\r\n        n = len(nums)\r\n        for i in range(k):\r\n            if len(heap) < k:\r\n                heapq.heappush(heap, [-nums[i], i])\r\n        result.append(-heap[0][0])\r\n        for i in range(k, n):\r\n            heapq.heappush(heap, [-nums[i], i])\r\n            while len(heap) > 0 and heap[0][1] < i-k+1:\r\n                heapq.heappop(heap)\r\n            if len(heap) > 0:\r\n                cur, idx  = heap[0]\r\n                result.append(-cur)\r\n        return result\r\n\r\n        \r\n```\r\n\r\n### Complexity\r\nTime: O(N), where n is the size of the array nums\r\n\r\nSpace: O(k)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2345400512","body":"### Intuition\r\nFor each person, record the delta of in degree and out degree \r\n\r\n### Algorith\r\n```python3 \r\nclass Solution:\r\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\r\n        deltas = [0] * (n+1) # indegree - outdegree\r\n        for [label_a, label_b] in trust:\r\n            deltas[label_a] -= 1\r\n            deltas[label_b] += 1\r\n        for idx, delta in enumerate(deltas[1:]):\r\n            if delta == n-1:\r\n                return idx + 1\r\n        return -1\r\n```\r\n### Complexity\r\nTime: O(n), where n is the number of person\r\n\r\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/36#issuecomment-2398795330","body":"BFS\r\n```python3\r\nclass Solution:\r\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\r\n        def traverse_in_component(start):\r\n            queue = deque([start])\r\n            colors[start] = 1\r\n            while queue:\r\n                node = queue.popleft()\r\n                for neighbor in adj[node]:\r\n                    if colors[neighbor] == colors[node]: return False\r\n                    if colors[neighbor] == -1:\r\n                        colors[neighbor] = 1 - colors[node]\r\n                        queue.append(neighbor)\r\n            return True\r\n\r\n        adj = [[] for _ in range(n)]\r\n        for [a, b] in dislikes:\r\n            adj[a-1].append(b-1)\r\n            adj[b-1].append(a-1)\r\n        colors = [-1] * n\r\n        for i in range(n):\r\n            if colors[i] == -1:\r\n                if not traverse_in_component(i): \r\n                    return False\r\n        return True\r\n```\r\n\r\nTime: O(N+E),  where N is the number of nodes and E is the number of edges\r\nSpace: O(N+E)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/37#issuecomment-2398949174","body":"Topo sort\r\n```python3\r\nclass Solution:\r\n    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:\r\n        group_id = m\r\n        for i in range(len(group)):\r\n            if (group[i] == -1):\r\n                group[i] = group_id\r\n                group_id += 1\r\n\r\n        item_graph = [[] for _ in range(n)]\r\n        item_indegree = [0] * n\r\n\r\n        group_graph = [[] for _ in range(group_id)]\r\n        group_indegree = [0] * group_id\r\n\r\n        for curr in range(n):\r\n            for prev in beforeItems[curr]:\r\n                item_graph[prev].append(curr)\r\n                item_indegree[curr] += 1\r\n\r\n                if group[prev] != group[curr]:\r\n                    group_graph[group[prev]].append(group[curr])\r\n                    group_indegree[group[curr]] += 1\r\n\r\n        def topoSort(graph, indegree):\r\n            visited = []\r\n            queue = deque([node for node in range(len(graph)) if indegree[node] == 0])\r\n            while queue:\r\n                node = queue.popleft()\r\n                visited.append(node)\r\n                for neib in graph[node]:\r\n                    indegree[neib] -= 1\r\n                    if indegree[neib] == 0: \r\n                        queue.append(neib)\r\n            return visited if len(visited) == len(graph) else []\r\n        \r\n        item_order = topoSort(item_graph, item_indegree)\r\n        group_order =topoSort(group_graph, group_indegree)\r\n\r\n        if not item_order or not group_order:\r\n            return []\r\n        \r\n        ordered_groups = collections.defaultdict(list)\r\n        for item in item_order: \r\n            ordered_groups[group[item]].append(item)\r\n        \r\n        answer = []\r\n        for group_index in group_order:\r\n            answer += ordered_groups[group_index]\r\n        return answer\r\n\r\n```\r\nTime: O(N^2), where N is the number of nodes\r\nSpace: O(N)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2398957886","body":"Simulation\r\n\r\n```python3\r\nclass Solution:\r\n    def judgeCircle(self, moves: str) -> bool:\r\n        start = [0, 0]\r\n        for move in moves:\r\n            if move == \"L\":\r\n                start[0] -= 1\r\n            elif move == \"R\":\r\n                start[0] += 1\r\n            elif move == \"U\":\r\n                start[1] += 1\r\n            elif move == \"D\":\r\n                start[1] -= 1\r\n        return start[0] == 0 and start[1] == 0\r\n        \r\n```\r\nTime: O(n), where n is the number of moves\r\nSpace: O(1)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/54#issuecomment-2387760030","body":"```\r\nclass Solution:\r\n    def readBinaryWatch(self, turnedOn: int) -> List[str]:\r\n        ans = []\r\n        for h in range(12):\r\n            for m in range(60):\r\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\r\n                    ans.append(f\"{h}:{m:02d}\")\r\n        return ans\r\n```\r\n\r\nTime: O(1)\r\n\r\nSpace: O(1)","onTime":false},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/60#issuecomment-2395833019","body":"DP\r\n\r\n```python\r\nclass Solution:\r\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\r\n        n = len(cost)\r\n        dp = [0] * (n+1)\r\n        for i in range(2, n+1):\r\n            dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])\r\n        return dp[n]\r\n```\r\n\r\nTime: O(n), n is the length of the steps\r\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/61#issuecomment-2398819459","body":"DP\r\n```python3\r\nclass Solution:\r\n    def rob(self, nums: List[int]) -> int:\r\n        max_earn = float('-inf')\r\n        earn = [0] * len(nums)\r\n        for i in range(len(nums)):\r\n            if (i == 0): \r\n                earn[i] = nums[i]\r\n            elif (i == 1):\r\n                earn[i] = max(nums[i], nums[0])\r\n            else:\r\n                earn[i] = max(earn[i-1], earn[i-2] + nums[i])\r\n        return earn[len(nums)-1]\r\n```\r\nTime: O(n), where n is the number of houses\r\nSpace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/62#issuecomment-2404099460","body":"DP\r\n```python3\r\nclass Solution:\r\n    def findNumberOfLIS(self, nums: List[int]) -> int:\r\n        n = len(nums)\r\n        dp = [1] * n\r\n        count = [1] * n\r\n        max_length = 0\r\n        for i in range(n):\r\n            for j in range(i):\r\n                if (nums[j] < nums[i]):\r\n                    new_length = dp[j] + 1\r\n                    # dp[i] = max(dp[i], new_length)\r\n                    if (new_length > dp[i]):\r\n                        dp[i] = new_length\r\n                        count[i] = count[j]\r\n                    elif (new_length == dp[i]):\r\n                        count[i] += count[j]\r\n            max_length = max(max_length, dp[i])\r\n            print(i, dp[i], count[i])\r\n        result = 0\r\n        for i in range(n):\r\n            if (dp[i] == max_length):\r\n                result += count[i]\r\n        return result\r\n```\r\nTime: O(n^2), where n is the length of nums list\r\nSpace: O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/63#issuecomment-2404218268","body":"Recursion with memoization \r\n```python3\r\nclass Solution:\r\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\r\n        m, n = len(text1), len(text2)\r\n        memo = [[-1] * n for _ in range(m)]\r\n        def find_longest(p1, p2):\r\n            if p1 == m or p2 == n: return 0\r\n            if memo[p1][p2] != -1: \r\n                return memo[p1][p2]\r\n            \r\n            option_1 = find_longest(p1 + 1, p2)\r\n\r\n            first_occurrence = text2.find(text1[p1], p2)\r\n            option_2 = 0\r\n            if first_occurrence != -1:\r\n                option_2 = 1 + find_longest(p1 + 1, first_occurrence + 1)\r\n            memo[p1][p2] = max(option_1, option_2)\r\n            return memo[p1][p2]\r\n\r\n        return find_longest(0, 0)\r\n```\r\nTime: O(MN^2), where M is length of text1, N is length of text2\r\nSpace: O(MN)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjy-debug":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2290591849","body":"# Day1： 数组形式的整数加法\r\n\r\n## 思路\r\n*1、将数组转化为整数；\r\n2、整数相加；\r\n3、转化回数组。*\r\n## 代码\r\n```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n\r\n        num = num[::-1]\r\n        num_add = 0\r\n        for i in range(0, len(num)):\r\n            num_add += num[i] * (10**i)\r\n\r\n        num_add += k\r\n        num = []\r\n        while num_add > 0:\r\n            num.append(num_add % 10)\r\n            num_add = num_add // 10\r\n        return num[::-1]\r\n```\r\n## 复杂度\r\n时间复杂度：O(N).\r\n空间复杂度：O(1).","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293777943","body":"# 思路\r\n采用两次遍历的方法。\r\n首先，从左到右遍历字符串，记录每个字符到最近的字符 c 的距离。\r\n然后，再从右到左遍历一次，更新每个字符到最近的字符 c 的距离。\r\n确保得到的距离是最小的。\r\n# 代码\r\n```\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        distance = [0] * len(s)\r\n        j = float('-inf')\r\n        for i in range(0, len(s)):\r\n            if c == s[i]:\r\n                j = i\r\n            distance[i] = i - j\r\n\r\n        j = float('inf')\r\n        for i in range(len(s) - 1, -1, -1):\r\n            if c == s[i]:\r\n                j = i\r\n            distance[i] = min(distance[i], j - i)\r\n        return distance\r\n```\r\n# 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2296878821","body":"# 思路\n要使用两个栈来实现一个队列，可以将一个栈用于输入（push 操作），另一个栈用于输出（pop 和 peek 操作）。在 push 时将元素推入第一个栈，而在 pop 和 peek 时，需要将第一个栈中的元素转移到第二个栈中，以保持正确的顺序。\n# 代码\n```\nclass MyQueue:\n\n    def __init__(self):\n        self.stack_in = []  # 用于插入操作\n        self.stack_out = []  # 用于删除操作\n\n    def push(self, x: int) -> None:\n        self.stack_in.append(x)\n\n    def pop(self) -> int:\n        self.peek()  # 确保 stack_out 有元素\n        return self.stack_out.pop()\n\n    def peek(self) -> int:\n        if not self.stack_out:  # 如果 stack_out 为空\n            while self.stack_in:  # 将 stack_in 的元素转移到 stack_out\n                self.stack_out.append(self.stack_in.pop())\n        return self.stack_out[-1]  # 返回 stack_out 的顶端元素\n\n    def empty(self) -> bool:\n        return not self.stack_in and not self.stack_out\n```\n# 复杂度\n时间：O（1）\n\n空间：O（N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2298259891","body":"# 思路\n大于等于前序的最大值且小于等于后序的最小值即可\n# 代码\n```\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        k = 1\n        for i in range(1, len(arr)):\n            maxIndex = max(arr[: i])\n            if maxIndex <= arr[i] and maxIndex <= min(arr[i:]):\n                k += 1\n        return k\n```\n# 复杂度\n时间复杂度：O(N²)\n\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2300290258","body":"# 思路\n获得链表长度；计算移动量k；移除前k个节点；创建新链表，移动到链尾，连接两个链表。\n# 代码\n```\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n\n        if head is None:\n            return None\n\n        length = 0\n        current = head\n\n        while current is not None:\n            length += 1\n            current = current.next\n\n        k = k % length\n\n        if k == 0:\n            return head\n\n        current = head\n\n        for i in range(0, length - k - 1):\n            current = current.next\n\n        new_head = current.next\n        current.next = None\n\n        tail = new_head\n        while tail.next is not None:\n            tail = tail.next\n        tail.next = head\n\n        return new_head\n```\n# 复杂度\n时间: O(n)\n\n空间: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2304176795","body":"# 思路\n创建一个链表指向头节点，每两个节点进行交换，如果存在当前节点或下一个节点的数为空则退出\n\n# 代码\n```\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n\n        swapHead = ListNode(0)\n        swapHead.next = head\n\n        while head is not None and head.val is not None and head.next is not None:\n            num = head.val\n            head.val = head.next.val\n            head.next.val = num\n            head = head.next.next\n\n        return swapHead.next\n\n```\n# 复杂度\n空间：O(N)\n\n时间：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2306411432","body":"# 思路\n找到链表的中间节点：这是构造BST的关键，因为中间节点将成为当前树的根节点，而左侧部分将构成左子树，右侧部分将构成右子树。\n\n递归构造左子树和右子树：通过将链表的前半部分和后半部分分别递归地构造左子树和右子树。\n\n当链表为空时，返回 null。\n# 代码\n```\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        # 辅助函数：找到链表的中间节点\n        def findMiddle(left, right):\n            slow = left\n            fast = left\n            while fast != right and fast.next != right:\n                slow = slow.next\n                fast = fast.next.next\n            return slow\n\n        # 递归构建BST\n        def convertListToBST(left, right):\n            if left == right:\n                return None\n\n            mid = findMiddle(left, right)\n            root = TreeNode(mid.val)\n\n            root.left = convertListToBST(left, mid)\n            root.right = convertListToBST(mid.next, right)\n\n            return root\n\n        return convertListToBST(head, None)\n\n```\n# 复杂度\n时间复杂度：O(N)\n\n空间复杂度：O(log(N))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2307990870","body":"# 思路\n两个指针分别指向链表A和B的头节点，依次遍历，若遍历至最后一个节点则切换到另一个链表的头部，找到相交节点\n# 代码\n```\nclass Solution:\n    def getIntersectionNode(\n        self, headA: ListNode, headB: ListNode\n    ) -> Optional[ListNode]:\n\n        currentA = headA\n        currrentB = headB\n\n        while currentA != currrentB:\n            currentA = currentA.next if currentA else headB\n            currrentB = currrentB.next if currrentB else headA\n\n        return currentA\n```\n# 复杂度\n时间复杂度：O(m+n)：m是链表A的长度，n是链表B的长度\n\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308896305","body":"# 思路\n使用两个指针，一个快指针和一个慢指针，快指针每次移动两步，慢指针每次移动一步。如果链表中存在环，两个指针最终会相遇。\n# 代码\n```\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return None\n\n        slow = head\n        fast = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                break\n        else:\n            return None\n\n        entry = head\n        while entry != slow:\n            entry = entry.next\n            slow = slow.next\n\n        return entry\n```\n# 复杂度\n时间复杂度：O(N)\n\n空间复杂度：O(1)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2312726241","body":"# 思路\n递归\n# 代码\n```\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        else:\n            rightDepth = self.maxDepth(root.right)\n            leftDepth = self.maxDepth(root.left)\n        return max(rightDepth, leftDepth) + 1\n```\n# 复杂度\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2313888290","body":"# 思路\n递归\n# 代码\n```\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p is None and q is None:\n            return True\n\n        if p is None or q is None:\n            return False\n\n        return (\n            p.val == q.val\n            and self.isSameTree(p.right, q.right)\n            and self.isSameTree(p.left, q.left)\n        )\n```\n# 复杂度\n时间复杂度：O(N)\n\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2316875772","body":"# 思路\n递归，当前节点值加上父节点的值×10，直到左右子节点为none则返回总和\n# 代码\n```\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n\n        def sumCurrent(root: TreeNode, currentVal: int) -> int:\n            if not root:\n                return 0\n            totalVal = currentVal * 10 + root.val\n            if root.left is None and root.right is None:\n                return totalVal\n            else:\n                return sumCurrent(root.left, totalVal) + sumCurrent(\n                    root.right, totalVal\n                )\n        return sumCurrent(root, 0)\n```\n# 复杂度：\n时间复杂度：O(N)\n空间复杂度：O(H) H是节点深度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2320104924","body":"# 思路\n在每次访问节点时，检查当前深度是否大于之前记录的最大深度。如果是，则更新最大深度和对应的节点值；首先递归调用左子树，增加深度；然后递归调用右子树，同样增加深度。\n# 代码\n```\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        self.maxHeight = -1\n        self.leftmostValue = 0\n\n        def findLeft(node: TreeNode, height: int):\n            if node is None:\n                return\n\n            if height > self.maxHeight:\n                self.maxHeight = height\n                self.leftmostValue = node.val\n\n            findLeft(node.left, height + 1)\n            findLeft(node.right, height + 1)\n\n        findLeft(root, 0)\n        return self.leftmostValue\n```\n# 复杂度：\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322926016","body":"# 代码\n```\n\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n\n        def dfs(node):\n            if not node:\n                return \"null,\"\n            return str(node.val) + \",\" + dfs(node.left) + dfs(node.right)\n\n        return dfs(root)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n\n        def dfs(nodes):\n            val = next(nodes)\n            if val == \"null\":\n                return None\n            node = TreeNode(int(val))\n            node.left = dfs(nodes)\n            node.right = dfs(nodes)\n            return node\n\n        node_values = iter(data.split(\",\"))\n        return dfs(node_values)\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/24#issuecomment-2323413816","body":"# 代码\n```\ndef verticalTraversal(root: TreeNode):\n    # 存储 (列索引, 行索引, 节点值)\n    nodes = []\n\n    # DFS遍历\n    def dfs(node, row, col):\n        if node:\n            nodes.append((col, row, node.val))\n            dfs(node.left, row + 1, col - 1)  # 左子树\n            dfs(node.right, row + 1, col + 1)  # 右子树\n\n    dfs(root, 0, 0)\n\n    # 按列索引排序，列索引相同的情况下按行索引和节点值排序\n    nodes.sort()\n\n    # 结果列表\n    result = []\n    last_col = None\n    for col, row, value in nodes:\n        if col != last_col:\n            last_col = col\n            result.append([])  # 新的一列\n        result[-1].append(value)\n\n    return result\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2324868173","body":"# 思路\n用哈希表来存储数据，首先查询哈希表中是否存在 target - x，则将 x 插入到哈希表中。\n# 代码\n```\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hashMap = dict()\n        for i, num in enumerate(nums):\n            if target - num in hashMap:\n                return [hashMap[target - num], i]\n            hashMap[nums[i]] = i\n        return []\n```\n# 复杂度\n时间复杂度：O（N）\n空间复杂度：O（N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2326852998","body":"```\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        hashMap = dict()\n        target = None\n        nums = sorted(nums)\n        for i in range(0, len(nums)):\n            if target != nums[i]:\n                target = nums[i]\n                index = 0\n            if nums[i] == target:\n                index += 1\n                hashMap[target] = index\n        sorted_by_value_desc = dict(\n            sorted(hashMap.items(), key=lambda item: item[1], reverse=True)\n        )\n        return list(sorted_by_value_desc.keys())[:k]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2327952594","body":"# 思路\n遍历每个pos和其他的距离，用字典记录相同距离的数量n，累加所有的n*（n-1）\n# 代码\n```\nclass Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n\n        count = 0\n        for p in points:\n            distance_count = {}\n            for q in points:\n                if p != q:\n                    dist_sq = (p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2\n                    if dist_sq in distance_count:\n                        distance_count[dist_sq] += 1\n                    else:\n                        distance_count[dist_sq] = 1\n\n            for dist in distance_count:\n                count += distance_count[dist] * (distance_count[dist] - 1)\n\n        return count\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2331970461","body":"# 代码\n```\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        char_set = set()  # 用来存储当前窗口的字符\n        left = 0  # 窗口的左边界\n        max_length = 0  # 最长子串的长度\n\n        for right in range(len(s)):  # 右边界遍历字符串\n            while s[right] in char_set:  # 如果右边界字符在集合中，说明有重复\n                char_set.remove(s[left])  # 移动左边界，直到没有重复\n                left += 1\n            char_set.add(s[right])  # 添加右边界字符到集合中\n            max_length = max(max_length, right - left + 1)  # 更新最长子串长度\n\n        return max_length\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2334294420","body":"# 代码\n```\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:\n        if not s or not words:\n            return []\n\n        word_length = len(words[0])\n        word_count = len(words)\n        total_length = word_length * word_count\n        word_map = {}\n\n        # 构建 words 的频率表\n        for word in words:\n            if word in word_map:\n                word_map[word] += 1\n            else:\n                word_map[word] = 1\n\n        result_indices = []\n\n        # 遍历字符串 s\n        for i in range(len(s) - total_length + 1):\n            # 提取当前窗口内的子串\n            current_window = s[i : i + total_length]\n            seen_words = {}\n            for j in range(0, total_length, word_length):\n                word = current_window[j : j + word_length]\n                if word in word_map:\n                    if word in seen_words:\n                        seen_words[word] += 1\n                    else:\n                        seen_words[word] = 1\n\n                    # 如果出现次数超过了在 words 中的次数，跳出\n                    if seen_words[word] > word_map[word]:\n                        break\n                else:\n                    break\n            else:\n                # 如果所有单词都匹配，则记录索引\n                result_indices.append(i)\n\n        return result_indices\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/30#issuecomment-2335135554","body":"# 代码\n```\nclass Solution:\n    def minSubarray(self, nums: List[int], p: int) -> int:\n        total = sum(nums)\n        target = total % p\n        \n        if target == 0:\n            return 0  # Already divisible by p\n        \n        n = len(nums)\n        prefix_sum = {0: -1}  # 记录前缀和的索引\n        current_sum = 0\n        min_length = float('inf')\n        \n        for i in range(n):\n            current_sum += nums[i]\n            mod_value = current_sum % p\n            \n            # 如果当前前缀和减去 target 后的值在哈希表中，说明找到了符合条件的子数组\n            if (mod_value - target) % p in prefix_sum:\n                min_length = min(min_length, i - prefix_sum[(mod_value - target) % p])\n            \n            # 更新哈希表\n            prefix_sum[mod_value] = i\n    \n        return min_length if min_length != float('inf') else -1\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2336532065","body":"# 代码\n```\nclass Solution:\n    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        length = 1\n        midNode = head\n\n        while head.next is not None:\n            length += 1\n            head = head.next\n\n        for i in range(0, int(length / 2)):\n            midNode = midNode.next\n\n        return midNode\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2338055316","body":"# 代码\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        i = 0  # 指针 i 用于定位唯一元素的位置\n        for j in range(1, len(nums)):\n            if nums[i] != nums[j]:  # 找到新的唯一元素\n                i += 1  # 移动唯一元素的位置\n                nums[i] = nums[j]  # 更新原数组\n\n        return i + 1\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/35#issuecomment-2346459249","body":"# 思路\n如果被信任+1，信任别人-1，只有存在信任值为n-1的人则返回这个人，否则返回-1\n# 代码\n```\nclass Solution:\n    def findJudge(self, n: int, trust: List[List[int]]) -> int:\n        trustVal = [0] * (n + 1)\n        for i in range(0, len(trust)):\n            trustVal[trust[i][0]] -= 1\n            trustVal[trust[i][1]] += 1\n\n        for j in range(1, n + 1):\n            if trustVal[j] == n - 1:\n                return j\n\n        return -1\n```\n# 复杂度\n时间复杂度：O（N）\n空间复杂度：O（N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/36#issuecomment-2349118012","body":"# 代码\n```\nclass Solution:\n    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:\n        # 初始化颜色数组，0表示未染色\n        color = [0] * (n + 1)  # 1到n的人，索引0不使用\n\n        # 定义邻接表\n        graph = {i: [] for i in range(1, n + 1)}\n        for a, b in dislikes:\n            graph[a].append(b)\n            graph[b].append(a)\n\n        def dfs(person, c):\n            color[person] = c  # 给当前人染色\n            for neighbor in graph[person]:\n                if color[neighbor] == 0:  # 邻居未染色，继续染色\n                    if not dfs(neighbor, -c):  # 递归染色，使用相反的颜色\n                        return False\n                elif color[neighbor] == c:  # 如果邻居已经染色且颜色相同，返回 False\n                    return False\n            return True\n\n        # 遍历每个人\n        for person in range(1, n + 1):\n            if color[person] == 0:  # 如果当前人未染色\n                if not dfs(person, 1):  # 从当前人开始染色\n                    return False\n\n        return True\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2351619642","body":"# 代码\n```\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:\n        moveMap = {\n            \"L\": [0, 1],\n            \"R\": [0, -1],\n            \"U\": [1, 0],\n            \"D\": [-1, 0]\n        }\n        originLoc = [0, 0]\n        for i in range(0, len(moves)):\n           move = moveMap[moves[i]]\n           originLoc[0] += move[0]\n           originLoc[1] += move[1]\n        \n        return True if originLoc == [0, 0] else False\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/39#issuecomment-2353308752","body":"# 代码\n```\nimport heapq\n\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        # 将任务数组扩展为 (enqueueTime, processingTime, task_index) 的形式\n        indexed_tasks = [(task[0], task[1], i) for i, task in enumerate(tasks)]\n\n        # 按任务的 enqueueTime 进行排序\n        indexed_tasks.sort(key=lambda x: x[0])\n\n        result = []\n        min_heap = []\n        time = 0\n        i = 0\n        n = len(tasks)\n\n        # 模拟任务调度\n        while i < n or min_heap:\n            # 如果没有可执行任务，则将时间推进到下一个任务的 enqueueTime\n            if not min_heap:\n                time = max(time, indexed_tasks[i][0])\n\n            # 将所有在当前时间点之前或等于当前时间的任务加入最小堆\n            while i < n and indexed_tasks[i][0] <= time:\n                heapq.heappush(min_heap, (indexed_tasks[i][1], indexed_tasks[i][2]))\n                i += 1\n\n            # 从堆中选择最小执行时间的任务执行\n            processing_time, task_index = heapq.heappop(min_heap)\n            time += processing_time\n            result.append(task_index)\n\n        return result\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/40#issuecomment-2356319608","body":"# 代码\n```\nclass Solution:\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\n        longinTimeValue = int(loginTime[0:2]) * 60 + int(loginTime[3:5])\n        logoutTimeValue = int(logoutTime[0:2]) * 60 + int(logoutTime[3:5])\n\n        if logoutTimeValue < longinTimeValue:\n            logoutTimeValue = logoutTimeValue + 1440\n        \n        if longinTimeValue % 15 != 0:\n            longinTimeValue = (longinTimeValue + 15) // 15 * 15\n        else:\n            longinTimeValue = longinTimeValue // 15 * 15\n\n        return max(0, logoutTimeValue - longinTimeValue) // 15\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/41#issuecomment-2358580789","body":"# 代码\n```\nclass Solution:\n    def minCharacters(self, a: str, b: str) -> int:\n        from collections import Counter\n\n        count_a = Counter(a)\n        count_b = Counter(b)\n\n        len_a = len(a)\n        len_b = len(b)\n\n        pre_a = [0] * 26\n        pre_b = [0] * 26\n\n        for i in range(26):\n            pre_a[i] = (\n                pre_a[i - 1] + count_a[chr(ord(\"a\") + i)]\n                if i > 0\n                else count_a[chr(ord(\"a\") + i)]\n            )\n            pre_b[i] = (\n                pre_b[i - 1] + count_b[chr(ord(\"a\") + i)]\n                if i > 0\n                else count_b[chr(ord(\"a\") + i)]\n            )\n\n        res = float(\"inf\")\n\n        for i in range(26):\n            res = min(\n                res,\n                len_a - count_a[chr(ord(\"a\") + i)] + len_b - count_b[chr(ord(\"a\") + i)],\n            )\n\n        for i in range(25):\n            res = min(res, len_a - pre_a[i] + pre_b[i])  # a 严格小于 b\n\n        for i in range(25):\n            res = min(res, len_b - pre_b[i] + pre_a[i])  # b 严格小于 a\n\n        return res\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/42#issuecomment-2359936970","body":"# 代码\n```\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        nums.sort()  # 原地排序\n        return nums\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2363700470","body":"# 代码\n```\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        if x < 2:\n            return x\n\n        left, right = 2, x // 2\n\n        while left <= right:\n            mid = left + (right - left) // 2\n            mid_squared = mid * mid\n\n            if mid_squared == x:\n                return mid\n            elif mid_squared < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return right\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/44#issuecomment-2365221565","body":"# 代码\n```\n# The isBadVersion API is already defined for you.\n# def isBadVersion(version: int) -> bool:\n\n\nclass Solution:\n    def firstBadVersion(self, n: int) -> int:\n        left = 1\n        right = n\n        while left < right:\n            mid = left + (right - left) // 2\n            if isBadVersion(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/45#issuecomment-2365538507","body":"# 代码\n```\nclass Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        def merge_and_count(left, right):\n            count = 0\n            j = 0\n            \n            for i in left:\n                while j < len(right) and i > 2 * right[j]:\n                    j += 1\n                count += j  \n\n            sorted_arr = []\n            i, j = 0, 0\n            \n            while i < len(left) and j < len(right):\n                if left[i] <= right[j]:\n                    sorted_arr.append(left[i])\n                    i += 1\n                else:\n                    sorted_arr.append(right[j])\n                    j += 1\n\n            sorted_arr.extend(left[i:])\n            sorted_arr.extend(right[j:])\n            \n            return sorted_arr, count\n\n        def sort_and_count(nums):\n            if len(nums) < 2:\n                return nums, 0\n            mid = len(nums) // 2\n            left, left_count = sort_and_count(nums[:mid])\n            right, right_count = sort_and_count(nums[mid:])\n            merged, cross_count = merge_and_count(left, right)\n            \n            return merged, left_count + right_count + cross_count\n\n        _, total_count = sort_and_count(nums)\n        return total_count\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/47#issuecomment-2370119302","body":"# 代码\n```\ndef findKSmallestAbsPairs(nums:list[int], k: int) -> int:\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append(abs(nums[i] - nums[j]))\n    pairs.sort()\n    return pairs[k]\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/49#issuecomment-2377289540","body":"# 代码\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        maxVowelLength = 0\n        currentVowelCount = 0\n        vowels = set(\"aeiou\")\n\n        # 计算第一个窗口的元音数量\n        for i in range(k):\n            if s[i] in vowels:\n                currentVowelCount += 1\n        \n        maxVowelLength = currentVowelCount\n\n        # 移动窗口\n        for i in range(k, len(s)):\n            if s[i] in vowels:\n                currentVowelCount += 1\n            if s[i - k] in vowels:\n                currentVowelCount -= 1\n            \n            maxVowelLength = max(maxVowelLength, currentVowelCount)\n\n        return maxVowelLength\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/50#issuecomment-2379556753","body":"# 代码\n···\nclass Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        if k == 0 or n >= k + maxPts:\n            return 1.0\n\n        dp = [0] * (n + 1)\n        window_sum = 1.0\n        dp[0] = 1.0\n\n        for i in range(1, n + 1):\n            dp[i] = window_sum / maxPts\n\n            if i < k:\n                window_sum += dp[i]\n            if i >= maxPts:\n                window_sum -= dp[i - maxPts]\n\n        return sum(dp[k:])\n···","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/51#issuecomment-2380644259","body":"# 代码\n```\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        # 结果列表\n        result = []\n\n        # 统计 p 中字符的频率\n        p_count = [0] * 26\n        for char in p:\n            p_count[ord(char) - ord(\"a\")] += 1\n\n        # 当前窗口的字符频率\n        s_count = [0] * 26\n        p_length = len(p)\n\n        for i in range(len(s)):\n            # 添加当前字符到窗口\n            s_count[ord(s[i]) - ord(\"a\")] += 1\n\n            # 如果窗口大小超过 p 的长度，移除左边的字符\n            if i >= p_length:\n                s_count[ord(s[i - p_length]) - ord(\"a\")] -= 1\n\n            # 如果窗口大小等于 p 的长度，进行比较\n            if i >= p_length - 1:\n                if s_count == p_count:\n                    result.append(i - p_length + 1)\n\n        return result\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"peggyhao":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2290825128","body":"**_day1:_**:数组形式的整数加法\r\n**思路：**\r\n从num数组最后一位开始和k的最后一位开始相加，如果有进位的话（相加>10的时候），加到k上,，每位相加的和-10；如果最后k还有数值的话，就继续把k值的每一位放到返回的list中，最后反转list,因为放的时候是从数字的低位开始放的，需要变成从高位开始放。\r\n**代码：**\r\n```\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        int n = num.length;\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            res.add(sum);\r\n        }\r\n        \r\n        while (k > 0) {\r\n            res.add(k % 10);\r\n            k /= 10;\r\n        }\r\n      \r\n        Collections.reverse(res);\r\n        return res;\r\n    }\r\n}\r\n```\r\n**复杂度：**\r\ntime：O(max(n,logk))\r\nspace：O(1)。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293740454","body":"_**Day2: 821. 字符的最短距离**_ \r\n**思路：**\r\n先从左边遍历，更新一波最短距离，再从右边遍历，更新最短距离。\r\n**代码：**\r\n```\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int[] ans = new int[n];\r\n\r\n        for (int i = 0, idx = -n; i < n; i++) {\r\n            if (s.charAt(i) == c) {\r\n                idx = i;\r\n            }\r\n            ans[i] = i - idx;\r\n        }\r\n\r\n        for (int i = n - 1, idx = 2 * n; i >= 0;--i) {\r\n            if (s.charAt(i) == c) {\r\n                idx = i;\r\n            }\r\n            ans[i] = Math.min(ans[i], idx - i);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n```\r\n**复杂度：**\r\ntime: O(n)\r\nspace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295307567","body":"```\r\nclass Solution {\r\n    int ptr;\r\n\r\n    public String decodeString(String s) {\r\n        LinkedList<String> stk = new LinkedList<String>();\r\n        ptr = 0;\r\n\r\n        while (ptr < s.length()) {\r\n            char cur = s.charAt(ptr);\r\n            if (Character.isDigit(cur)) {\r\n           \r\n                String digits = getDigits(s);\r\n                stk.addLast(digits);\r\n            } else if (Character.isLetter(cur) || cur == '[') {\r\n            \r\n                stk.addLast(String.valueOf(s.charAt(ptr++))); \r\n            } else {\r\n                ++ptr;\r\n                LinkedList<String> sub = new LinkedList<String>();\r\n                while (!\"[\".equals(stk.peekLast())) {\r\n                    sub.addLast(stk.removeLast());\r\n                }\r\n                Collections.reverse(sub);\r\n\r\n                stk.removeLast();\r\n   \r\n                int repTime = Integer.parseInt(stk.removeLast());\r\n                StringBuffer t = new StringBuffer();\r\n                String o = getString(sub);\r\n\r\n                while (repTime-- > 0) {\r\n                    t.append(o);\r\n                }\r\n               \r\n                stk.addLast(t.toString());\r\n            }\r\n        }\r\n\r\n        return getString(stk);\r\n    }\r\n\r\n    public String getDigits(String s) {\r\n        StringBuffer ret = new StringBuffer();\r\n        while (Character.isDigit(s.charAt(ptr))) {\r\n            ret.append(s.charAt(ptr++));\r\n        }\r\n        return ret.toString();\r\n    }\r\n\r\n    public String getString(LinkedList<String> v) {\r\n        StringBuffer ret = new StringBuffer();\r\n        for (String s : v) {\r\n            ret.append(s);\r\n        }\r\n        return ret.toString();\r\n    }\r\n}\r\n\r\n\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2296134994","body":"**_Day 5: 232. 用栈实现队列_**\r\n**思路：**\r\n第一个栈负责push,第二个栈负责pop和peek， 两个栈都空的话才算empty. \r\n**代码**\r\n```\r\nclass MyQueue {\r\n    Deque<Integer> inStack;\r\n    Deque<Integer> outStack;\r\n    public MyQueue() {\r\n        inStack = new ArrayDeque<>();\r\n        outStack = new ArrayDeque<>();\r\n    }\r\n    \r\n    public void push(int x) {\r\n        inStack.push(x);\r\n    }\r\n    \r\n    public int pop() {\r\n        while (outStack.isEmpty()) {\r\n            in2out();\r\n        }\r\n        return outStack.pop();\r\n    }\r\n    \r\n    public int peek() {\r\n        while (outStack.isEmpty()) {\r\n            in2out();\r\n        }\r\n        return outStack.peek();\r\n    }\r\n    \r\n    public boolean empty() {\r\n        return outStack.isEmpty() && inStack.isEmpty();\r\n    }\r\n\r\n    private void in2out() {\r\n        while (!inStack.isEmpty()) {\r\n            outStack.push(inStack.pop());\r\n        }\r\n    }\r\n}\r\n```\r\n**复杂度：**\r\ntime: O(1)\r\nspace: O(n)  n为操作总数\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2299198152","body":"```\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        Deque<Integer> stack = new ArrayDeque<Integer>();\r\n        for (int num : arr) {\r\n            if (stack.isEmpty() || num >= stack.peek()) {\r\n                stack.push(num);\r\n            } else {\r\n                int mx = stack.pop();\r\n                while (!stack.isEmpty() && stack.peek() > num) {\r\n                    stack.pop();\r\n                }\r\n                stack.push(mx);\r\n            }\r\n        }\r\n        return stack.size();\r\n    }\r\n}\r\n\r\n\r\n```\r\ntime: O(n)\r\nspace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2302432319","body":"```\r\nclass Solution {\r\n    public ListNode rotateRight(ListNode head, int k) {\r\n        if (k == 0 || head == null || head.next == null) {\r\n            return head;\r\n        }\r\n        int n = 1;\r\n        ListNode iter = head;\r\n        while (iter.next != null) {\r\n            iter = iter.next;\r\n            n++;\r\n        }\r\n        int add = n - k % n;\r\n        if (add == n) {\r\n            return head;\r\n        }\r\n        iter.next = head;\r\n        while (add-- > 0) {\r\n            iter = iter.next;\r\n        }\r\n        ListNode ret = iter.next;\r\n        iter.next = null;\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n```\r\ntime: O(n)\r\nspace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2304391017","body":"每两个节点为一层递归，每一层：1.第一个节点连接下一层返回的head  2.第二个节点指向第一个接点，实现交换 3. 返回第二个节点，等于是一个链表的新head。递归就是专注于每一层要做的事情。\r\n```\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if (head == null || head.next == null) {\r\n            return head;\r\n        }\r\n        ListNode newHead = head.next;\r\n        head.next = swapPairs(newHead.next);\r\n        newHead.next = head;\r\n        return newHead;\r\n    }\r\n}\r\n```\r\ntime: O(n)\r\nspace; O(n)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2307002453","body":"```\r\nclass Solution {\r\n    ListNode globalHead;\r\n\r\n    public TreeNode sortedListToBST(ListNode head) {\r\n        globalHead = head;\r\n        int length = getLength(head);\r\n        return buildTree(0, length - 1);\r\n    }\r\n\r\n    public int getLength(ListNode head) {\r\n        int ret = 0;\r\n        while (head != null) {\r\n            ++ret;\r\n            head = head.next;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    public TreeNode buildTree(int left, int right) {\r\n        if (left > right) {\r\n            return null;\r\n        }\r\n        int mid = (left + right + 1) / 2;\r\n        TreeNode root = new TreeNode();\r\n        root.left = buildTree(left, mid - 1);\r\n        root.val = globalHead.val;\r\n        globalHead = globalHead.next;\r\n        root.right = buildTree(mid + 1, right);\r\n        return root;\r\n    }\r\n}\r\n\r\n```\r\ntime: O(n)\r\nspace: O(logn)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2308164539","body":"两个指针走的步数一样, a + c + b 和 b + c + a 所以最终会相遇，如果不相遇的话，结果就是null\r\n```\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        if (headA == null || headB == null) {\r\n            return null;\r\n        }\r\n        ListNode pA = headA, pB = headB;\r\n        while (pA != pB) {\r\n            pA = pA == null ? headB : pA.next;\r\n            pB = pB == null ? headA : pB.next;\r\n        }\r\n        return pA;\r\n    }\r\n}\r\n```\r\ntime: O(m + n)  m , n represents the length of each list\r\nspace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308790851","body":"\r\n```\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n         if (head == null) {\r\n            return null;\r\n         }\r\n         ListNode slow = head, fast = head;\r\n         while (fast != null) {\r\n            slow = slow.next;\r\n            if (fast.next != null) {\r\n                fast = fast.next.next;\r\n            } else {\r\n                return null;\r\n            }\r\n            if (fast == slow) {\r\n                ListNode ptr = head;\r\n                while (ptr != slow) {\r\n                    ptr = ptr.next;\r\n                    slow = slow.next;\r\n                }\r\n                return ptr;\r\n            }\r\n         }\r\n         return null;\r\n    }\r\n\r\n}\r\n```\r\ntime: O(n)\r\nspace: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/18#issuecomment-2310449940","body":"```\r\nclass LRUCache extends LinkedHashMap<Integer, Integer> {\r\n    class DLinkedNode {\r\n        int key;\r\n        int value;\r\n        DLinkedNode prev;\r\n        DLinkedNode next;\r\n        public DLinkedNode() {}\r\n        public DLinkedNode(int _key, int _value) {\r\n            key = _key;\r\n            value = _value;\r\n        }\r\n    }\r\n\r\n    private Map<Integer, DLinkedNode> cache = new HashMap<>();\r\n    private int size;\r\n    private int capacity;\r\n    private DLinkedNode head, tail;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.size = 0;\r\n        this.capacity = capacity;\r\n        head = new DLinkedNode();\r\n        tail = new DLinkedNode();\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        DLinkedNode node = cache.get(key);\r\n        if (node == null) {\r\n            return -1;\r\n        }\r\n        moveToHead(node);\r\n        return node.value;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        DLinkedNode node =  cache.get(key);\r\n        if (node == null) {\r\n            DLinkedNode newNode = new DLinkedNode(key, value);\r\n            cache.put(key, newNode);\r\n            addToHead(newNode);\r\n            ++size;\r\n            if (size > capacity) {\r\n                DLinkedNode tail = removeTail();\r\n                cache.remove(tail.key);\r\n                --size;\r\n            } \r\n        } else {\r\n        node.value = value;\r\n        moveToHead(node);\r\n    }\r\n    } \r\n\r\n    private void addToHead(DLinkedNode node) {\r\n        node.prev = head;\r\n        node.next = head.next;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n    \r\n    private void removeNode(DLinkedNode node) {\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    private void moveToHead(DLinkedNode node) {\r\n        removeNode(node);\r\n        addToHead(node);\r\n    }\r\n\r\n    private DLinkedNode removeTail() {\r\n        DLinkedNode res = tail.prev;\r\n        removeNode(res);\r\n        return res;\r\n    }\r\n\r\n}\r\n\r\n\r\n```\r\ntime: O(1)\r\nspace: O(capacity)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2312944329","body":"dfs 先得到左子树的height,再得到右子树的height 取两者最大的值 +1 后返回   结束条件为 root == null\r\n```\r\nclass Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if (root == null) {\r\n            return 0;\r\n        } else {\r\n            int leftHeight = maxDepth(root.left);\r\n            int rightHeight = maxDepth(root.right);\r\n            return Math.max(leftHeight, rightHeight) + 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\ntime: O(n)\r\nspace: O(n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2315724126","body":"dfs: 先看是否都是null,返回true;一个null， 一个不是null,返回false; 都不是null，val 不同返回false;左右子树也满足，都返回true,结果为true,否则为false.\r\n递归，把每一层都看作能得到子递归返回，想象着某一层需要做什么，比如这次就是每一层判断是否满足条件，然后假设左右递归都能返回想要的值。递归如果把那种容易判断的先判断了，就可以不用走那么多次了，可以降低时间复杂度。\r\n```\r\nclass Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        if (p == null && q == null) {\r\n            return true;\r\n        } else if (p == null || q == null) {\r\n            return false;\r\n        } else if (p.val != q.val) {\r\n            return false;\r\n        } else {\r\n            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\r\n        }\r\n    }\r\n}\r\n```\r\ntime: O(min(m, n)) m, n represent the total nodes of each tree separately  最多走完那个节点数少的树，因为结构不同。\r\nspace: O(min(m, n) 最多是节点数少的树的深度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/21#issuecomment-2318213839","body":"用一个helper函数来帮忙，传入之前的sum值，每一层用之前的sum * 10加上当前的节点的值。如果当前节点的左右节点都为空，说明是叶子节点，返回sum;如果左右节点有一个不为空，则返回 左右子树各自遍历后返回的值相加后的值。如果节点是空，则返回0；\r\n```\r\nclass Solution {\r\n    public int sumNumbers(TreeNode root) {\r\n        return dfs(root, 0);\r\n    }\r\n\r\n    public int dfs(TreeNode root, int prevSum) {\r\n        if (root == null) {\r\n            return 0;\r\n        }\r\n        int sum = prevSum * 10 + root.val;\r\n        if (root.left == null && root.right == null) {\r\n            return sum;\r\n        } else {\r\n            return dfs(root.left, sum) + dfs(root.right, sum);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\ntime: O(n) \r\nspace: O(n) 最大是树的高度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2321724771","body":"```\r\nclass Solution {\r\n    public int findBottomLeftValue(TreeNode root) {\r\n        int ret = 0;\r\n        Queue<TreeNode> queue = new ArrayDeque<TreeNode>();\r\n        queue.offer(root);\r\n        while (!queue.isEmpty()) {\r\n            TreeNode p = queue.poll();\r\n            if (p.right != null) {\r\n                queue.offer(p.right);\r\n            }\r\n            if (p.left != null) {\r\n                queue.offer(p.left);\r\n            }\r\n            ret = p.val;\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322885595","body":"```\r\npublic class Codec {\r\n    public String serialize(TreeNode root) {\r\n        return rserialize(root, \"\");\r\n    }\r\n  \r\n    public TreeNode deserialize(String data) {\r\n        String[] dataArray = data.split(\",\");\r\n        List<String> dataList = new LinkedList<String>(Arrays.asList(dataArray));\r\n        return rdeserialize(dataList);\r\n    }\r\n\r\n    public String rserialize(TreeNode root, String str) {\r\n        if (root == null) {\r\n            str += \"None,\";\r\n        } else {\r\n            str += str.valueOf(root.val) + \",\";\r\n            str = rserialize(root.left, str);\r\n            str = rserialize(root.right, str);\r\n        }\r\n        return str;\r\n    }\r\n  \r\n    public TreeNode rdeserialize(List<String> dataList) {\r\n        if (dataList.get(0).equals(\"None\")) {\r\n            dataList.remove(0);\r\n            return null;\r\n        }\r\n  \r\n        TreeNode root = new TreeNode(Integer.valueOf(dataList.get(0)));\r\n        dataList.remove(0);\r\n        root.left = rdeserialize(dataList);\r\n        root.right = rdeserialize(dataList);\r\n    \r\n        return root;\r\n    }\r\n}\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/24#issuecomment-2323406938","body":"先深度优先遍历，把每个节点的行，列，值存进nodes这个list，然后再排序，先按照行排序，然后按照列排序，然后按照值排序。再遍历nodes，把相同的列的节点的值放在一个list,实现方法是 如果跟上一次的col一样，就放进上一个 col在的列，如果不一样，就new一个新的list,最终返回包含所有列的list的list。 \r\n```\r\nclass Solution {\r\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\r\n        List<int[]> nodes = new ArrayList<int[]>();\r\n        dfs(root, 0, 0, nodes);\r\n        Collections.sort(nodes, new Comparator<int[]>() {\r\n            public int compare(int[] tuple1, int[] tuple2) {\r\n                if (tuple1[0] != tuple2[0]) {\r\n                    return tuple1[0] - tuple2[0];\r\n                } else if (tuple1[1] != tuple2[1]) {\r\n                    return tuple1[1] - tuple2[1];\r\n                } else {\r\n                    return tuple1[2] - tuple2[2];\r\n                }\r\n            }\r\n        });\r\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\r\n        int size = 0;\r\n        int lastcol = Integer.MIN_VALUE;\r\n        for (int[] tuple : nodes) {\r\n            int col = tuple[0], row = tuple[1], value = tuple[2];\r\n            if (col != lastcol) {\r\n                lastcol = col;\r\n                ans.add(new ArrayList<Integer>());\r\n                size++;\r\n            }\r\n            ans.get(size - 1).add(value);\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    public void dfs(TreeNode node, int row, int col, List<int[]> nodes) {\r\n        if (node == null) {\r\n            return;\r\n        }\r\n        nodes.add(new int[]{col, row, node.val});\r\n        dfs(node.left, row + 1, col - 1, nodes);\r\n        dfs(node.right, row + 1, col + 1, nodes);\r\n    }\r\n}\r\n\r\n```\r\ntime: O(nlogn) 排序 nlogn 遍历O(n) \r\nspace: O(n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2325020267","body":"遍历数组，检查是否该target-当前元素的值在hashMap中，如果在， 则返回当前元素的索引和hashMap的target减去当前元素的值的索引，如果不在，则将当前元素的值作为key,当前元素的索引作为value，存进hashMap中。 通过存进map中，在查找的时候 就不用每次去再遍历一遍数组了，所以每次查找时间复杂度降低到O(1).所以，最后总的时间复杂度为O(n),空间复杂度为 hashMap 的空间，即O(n).\r\n```\r\nclass Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        Map<Integer, Integer> visitedNums = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            if (visitedNums.containsKey(target - nums[i])) {\r\n                return new int[]{i, visitedNums.get(target - nums[i])};\r\n            } \r\n            visitedNums.put(nums[i], i);\r\n            \r\n        }\r\n        return new int[0];\r\n    }\r\n}\r\n```\r\ntime: O((n)\r\nspace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/26#issuecomment-2326711153","body":"```\r\nclass Solution {\r\n    public int[] topKFrequent(int[] nums, int k) {\r\n        Map<Integer, Integer> occurrences = new HashMap<Integer, Integer>();\r\n        for (int num : nums) {\r\n            occurrences.put(num, occurrences.getOrDefault(num, 0) + 1);\r\n        }\r\n\r\n      \r\n        PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new Comparator<int[]>() {\r\n            public int compare(int[] m, int[] n) {\r\n                return m[1] - n[1];\r\n            }\r\n        });\r\n        for (Map.Entry<Integer, Integer> entry : occurrences.entrySet()) {\r\n            int num = entry.getKey(), count = entry.getValue();\r\n            if (queue.size() == k) {\r\n                if (queue.peek()[1] < count) {\r\n                    queue.poll();\r\n                    queue.offer(new int[]{num, count});\r\n                }\r\n            } else {\r\n                queue.offer(new int[]{num, count});\r\n            }\r\n        }\r\n        int[] ret = new int[k];\r\n        for (int i = 0; i < k; ++i) {\r\n            ret[i] = queue.poll()[0];\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/27#issuecomment-2327631356","body":"遍历points数组，内存再遍历一遍数组，用欧式距离算出两点之间的距离，然后存在hashMap中。在内层循环中，遍历当前存储的map，每层给最终答案加上m * (m - 1)，也就是用排列的方式来从m中选择2个。 最后ans就是所有的回旋标的数量。\r\n```\r\nclass Solution {\r\n    public int numberOfBoomerangs(int[][] points) {\r\n        int ans = 0;\r\n        for (int[] p : points) {\r\n            Map<Integer, Integer> cnt = new HashMap<>();\r\n            for (int[] q : points) {\r\n                int dis = (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]);\r\n                cnt.put(dis, cnt.getOrDefault(dis, 0) + 1); \r\n            }\r\n         \r\n\r\n            for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\r\n                int m = entry.getValue();\r\n                ans += m * (m - 1);\r\n            }\r\n        }\r\n        return ans;\r\n}\r\n}\r\n```\r\ntime: O(n2)\r\nspace: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2331998481","body":"```\r\nclass Solution {\r\n    public int lengthOfLongestSubstring(String s) {\r\n   \r\n        Set<Character> occ = new HashSet<Character>();\r\n        int n = s.length();\r\n\r\n        int rk = -1, ans = 0;\r\n        for (int i = 0; i < n; ++i) {\r\n            if (i != 0) {\r\n               \r\n                occ.remove(s.charAt(i - 1));\r\n            }\r\n            while (rk + 1 < n && !occ.contains(s.charAt(rk + 1))) {\r\n       \r\n                occ.add(s.charAt(rk + 1));\r\n                ++rk;\r\n            }\r\n           \r\n            ans = Math.max(ans, rk - i + 1);\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n\r\n\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sleepydog25":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2291517431","body":"## 思路\r\n1. 先比較 array 的長度，比較長的前面補 0\r\n2. 處理進位\r\n\r\n## Code\r\n```java\r\nclass Solution {\r\n    public List<Integer> addToArrayForm(int[] num, int k) {\r\n        // converting k to digits\r\n        int[] kDigits = Integer.toString(k).chars().map(c -> c - '0').toArray();\r\n\r\n        // lengths\r\n        int numLength = num.length;\r\n        int kLength = kDigits.length;\r\n\r\n        // Adjust lengths by adding zeros to the shorter array\r\n        if (numLength > kLength) {\r\n            // Prepend zeros to kDigits\r\n            int[] adjustedKDigits = new int[numLength];\r\n            int zeros = numLength - kLength;\r\n            System.arraycopy(kDigits, 0, adjustedKDigits, zeros, kLength);\r\n            kDigits = adjustedKDigits;\r\n        } else {\r\n            int[] adjustedNum = new int[kLength];\r\n            int zeros = kLength - numLength;\r\n            System.arraycopy(num, 0, adjustedNum, zeros, numLength);\r\n            num = adjustedNum;\r\n        }\r\n\r\n        // carry handling\r\n        List<Integer> result = new ArrayList<>();\r\n        int carry = 0;\r\n        for (int i = num.length - 1; i >= 0; i--) {\r\n            int sum = num[i] + kDigits[i] + carry;\r\n            carry = sum / 10;  \r\n            result.add(sum % 10);  // Store the current digit\r\n        }\r\n        \r\n        \r\n        if (carry > 0) {\r\n            result.add(carry);\r\n        }\r\n\r\n        // reverse it\r\n        List<Integer> finalResult = new ArrayList<>();\r\n        for (int i = result.size() - 1; i >= 0; i--) {\r\n            finalResult.add(result.get(i));\r\n        }\r\n\r\n        return finalResult;\r\n        }\r\n\r\n\r\n}\r\n```\r\n## 複雜度\r\n1. 時間複雜度:O(n)\r\n2. 空間複雜度:O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293762788","body":"## Approach\r\n1. find Char c's position inside the string\r\n2. create an array for result\r\n3. calculate the shortest distances\r\n\r\n## Code\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n    \r\n    //putting char positions into a list\r\n    List <Integer> temp = new ArrayList<>();\r\n    int position = s.indexOf(c);\r\n\r\n    while (position != -1){\r\n        temp.add(position);\r\n        position = s.indexOf(c, position + 1);\r\n    }\r\n\r\n    // answer array\r\n        int n = s.length();\r\n        int[] result = new int[n];\r\n        \r\n    //Calculate shortest distances\r\n        for (int i = 0; i < n; i++) {\r\n            int minDis = Integer.MAX_VALUE; \r\n            for (int e : temp) {\r\n                minDis = Math.min(minDis, Math.abs(i - e));\r\n            }\r\n            result[i] = minDis;\r\n        }\r\n        \r\n        return result;\r\n\r\n    //testing code\r\n    //int[] tempArray = temp.stream().mapToInt(Integer::intValue).toArray();\r\n\r\n        \r\n    }\r\n}\r\n```\r\n\r\n## Complexity\r\n1. Time Complexity: O(n*c): iterating over each index and comparing with all positions, c is the number of occurrences of c.\r\n2. Space Complexity: O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2296884280","body":"## Approach\nUsing two stack implementing queue, stackOne doing push while stackTwo doing pop and peek, if two stacks are empty, then return empty\n\n## Algorithm\n```java\nclass MyQueue {\n\n        private Stack <Integer> stackOne;\n        private Stack <Integer> stackTwo;\n\n    public MyQueue() {\n        stackOne = new Stack<Integer>();\n        stackTwo = new Stack<Integer>();\n    }\n    \n    public void push(int x) {\n        stackOne.push(x);   \n    }\n    \n    public int pop() {\n        if( stackTwo.isEmpty() ) {\n            while ( ! stackOne.isEmpty() ) {\n                stackTwo.push ( stackOne.pop() );\n            }\n        }\n        return stackTwo.pop();\n    }\n    \n    public int peek() {\n        if ( stackTwo.isEmpty() ) {\n            while( ! stackOne.isEmpty() ) {\n                stackTwo.push( stackOne.pop() );\n            }\n        }\n        return stackTwo.peek();\n        \n    }\n    \n    public boolean empty() {\n        if ( stackOne.isEmpty() && stackTwo.isEmpty() ) {\n            return true;\n        } else{\n            return false;\n        }\n        \n    }\n}\n```\n## Complexity\n1. push: O(1)\n2. pop: worst:O(n) / best:O(1)\n3. peek: worst:O(n) / best:O(1)\n4. Empty: O(1)\nspace complexity : O(n)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/14#issuecomment-2304794165","body":"## Approach\n1. First create a dummy head before the real head of the linked list.\n2. While the linked list isn't empty\n3. Swap the node, make -1->2->1->3\n4. Make the previous and head moving forward\n\n\n## Algorithm\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        \n        //make a pretend head, before the real head\n        ListNode x = new ListNode(-1);\n        x.next = head;\n        ListNode previous = x;\n\n        while(head != null && head.next != null){\n            ListNode first = head;\n            ListNode second = head.next;\n\n            //swaping\n            previous.next = second;\n            first.next = second.next;\n            second.next = first;\n\n            // move the previous and head forward\n            previous = first;\n            head = first.next;\n        }\n        return x.next;\n    }\n}\n```\n## Complexity\n1. Time Complexity: O(n), we have to go through the linked list so n is the nodes of the linked list\n2. Space Complexity: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/15#issuecomment-2307440669","body":"## Approach\n1. find the middle of the BST\n    1. 3 pointers when the two go to the end of the linked list, dummy should right in the middle\n    2. make the left of the linked list disappear, so that the left part ends right before the middle and the right part begins in the middle\n2. recursive, the right tree and the left tree of the BST should also be BST\n\n## Algorithm\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if (head != null){\n\n            ListNode mid = findMid(head);\n            \n            TreeNode root = new TreeNode (mid.val);\n\n            if (head == mid){\n                return root;\n            }\n            root.left = sortedListToBST(head);\n            root.right = sortedListToBST(mid.next);\n            \n            return root;\n\n        }else\n          return null;\n    }\n\n    private static ListNode findMid(ListNode head){\n\n        ListNode one = head;\n        ListNode two = head;\n        ListNode dummy = null;\n        \n        while (two != null && two.next != null){\n            dummy = one;\n            one = one.next;\n            two = two.next.next;\n        }\n\n        if (dummy != null){\n            dummy.next = null;\n        }\n        \n        return one;\n    }\n}\n```\n## Complexity\n1. Time Complexity:O(n log n)\n2. Space Complexity:O(log n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2308437107","body":"## Approach\nGoal: find where pointerA = pointerB\n1. make the two list same length(when pointer A finish going through listA and it will go through listB)\n2. traversal\n## Algorithm\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA != null && headB != null){\n            ListNode pointerA = headA;\n            ListNode pointerB = headB;\n\n            while(pointerA != pointerB){\n                if (pointerA == null){\n                    pointerA = headB;\n                }else\n                    pointerA = pointerA.next;\n\n                if (pointerB == null){\n                    pointerB = headA;\n                } else\n                    pointerB = pointerB.next;     \n            }\n            return pointerA;\n\n        }\n\n        else\n            return null;\n    }\n}\n```\n## Complexity\n1. time complexity:O(A + B): A,B represents the length of the list of A, B\n2. space complexity:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/17#issuecomment-2308870978","body":"## Approach\n1. Create a set \n2. Store the nodes you've been through in the set\n\n## Algorithm\n1. Also passed leetcode 141\n```java\n/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n          if (head == null)\n            return null;\n        \n        HashSet <ListNode> store = new HashSet <ListNode> ();\n        ListNode pointer = head;\n        \n        while (pointer != null){\n            if (store.contains(pointer)){\n                return pointer;\n            }\n            store.add(pointer);\n            pointer = pointer.next;\n        }\n        return null;\n    }\n}\n```\n## Complexity\n1. Time Complexity:O(n)\n2. Space Complexity:O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/19#issuecomment-2312782200","body":"## Apporach\n1. return 0 when root is null\n2. recursion through the left tree\n3. recursion through the right tree\n4. count the max height of the left / right tree and +1\n\n## Algorithm\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null)\n          return 0;\n        \n        int countLeft = maxDepth (root.left);\n        int countRight = maxDepth (root.right);\n\n        return Math.max(countLeft,countRight) + 1;\n    }\n}\n```\n## Complexity\n1. Time Complexity: O(n)\n2. Space Complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2315736064","body":"## 思路\n跟昨天那題很像，也可以用遞迴解。\n前面先將null 和兩個 node value 不一樣排除，最後 return 兩個相比的布林值。\n\n## Code\n```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n\n        if(q == null && p == null)\n          return true;\n        \n        if (p == null || q == null || p.val != q.val)\n          return false;\n\n        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n        \n    }\n}\n```\n## Complexity\nTime: O(n)\nSpace:O(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2324910634","body":"## Approach\nbrute force,using double loop\n## Algorithm\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int x [] = new int[2];\n\n        for (int i = 0; i < nums.length ; i++){\n            for (int j = i+1; j < nums.length ; j++){\n                if (nums[i]+nums[j] == target){\n                    x[0] = i;\n                    x [1] = j;\n                }\n            }\n        }\n        return x;\n    }\n}\n```\n## Complexity\n1. Time Complexity: O(n<sup>2</sup>)\n2. Space Complexity:O(1)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/28#issuecomment-2331699882","body":"## Approach\nsliding window technique\n\n## Algorithm\n```java\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        Set <Character> storage = new HashSet <>();\n\n        int start = 0;\n        int answer = 0;\n\n        for (int i=0; i < s.length(); i++){\n\n            Character current = s.charAt(i);\n\n            while (storage.contains(current)){\n                char remove = s.charAt(start);\n                storage.remove(remove);\n                start ++;\n            }\n            storage.add(current);\n\n            answer = Math.max(i-start+1 , answer);\n        }    \n        return answer;    \n    }\n}\n```\n## Complexity\n1. Time Complexity:O(n)\n2. Space Complexity:O(n)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/31#issuecomment-2336703850","body":"## Approach \nfast and slow pointer\nWhen fast reaches the end, slow will be right at the middle\n\n## Algorithm\n```java\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n\n        ListNode slow = head;\n        ListNode fast = head;\n\n        while (fast != null && fast.next != null){\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        return slow;   \n    }\n}\n```\n## Complexity\n1. Time Complexity: O(n)\n2. Space Complexity: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2338443090","body":"## Approach \ntwo pointers\n\n## Algorithm\n```java\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n\n        if (nums.length == 0)\n          return 0;\n        \n        int first = 1; //represents the first element of the array(always unique)\n        for (int i=1 ; i<nums.length; i++){\n            if (nums[i] != nums[i-1]){\n                nums[first] = nums[i]; //put the element at where it suppose to be \n                first++; //make the pointer to move \n            }\n        }\n        return first;\n    }\n}\n```\n## Complexity\n1. Time Complexity: O(n);\n2. Space Complexity: O(1);","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/33#issuecomment-2341341984","body":"## Approach\nbrute force\n\n## Algorithm\n```java\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n         for (int i = 0; i < nums.length; i++) {\n            if (nums[i] >= target)\n              return i;\n         }\n         return nums.length;\n    }\n}\n```\n## Complexity\n1. Time Complexity:O(n)\n2. Space Complexity:O(1)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/38#issuecomment-2351633784","body":"## Approach\n1. create hashmap for every move and it's opposite move\n2. create another hashmap to store the moves\n3. loop through the string to get the moves\n4. if L== R, U==D is true; else false\n\n## Algorithm\n```java\nclass Solution {\n    public boolean judgeCircle(String moves) {\n\n        HashMap<Character, Character> Moves = new HashMap<>();\n        Moves.put('L', 'R');\n        Moves.put('R', 'L');\n        Moves.put('U', 'D');\n        Moves.put('D', 'U');\n\n        HashMap<Character, Integer> moveCounts = new HashMap<>();\n        moveCounts.put('L', 0);\n        moveCounts.put('R', 0);\n        moveCounts.put('U', 0);\n        moveCounts.put('D', 0);\n\n        for (char e : moves.toCharArray()) {\n            if (moveCounts.containsKey(e)) {\n                moveCounts.put(e, moveCounts.get(e) + 1);\n            }\n        }\n\n        boolean isOrigin = (moveCounts.get('L').equals(moveCounts.get('R'))) && (moveCounts.get('U').equals(moveCounts.get('D')));\n\n        return isOrigin;\n\n    }\n}\n```\n## Complexity\n1. time complexity: O(n), n is the length of the string\n2. space complexity:O(1) ","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/41#issuecomment-2358857501","body":"## Approach\r\n我偷看解答寫出來的\r\n寫起來的時候感覺好難，看完解答之後發現難的是怎麼切分問題\r\n\r\n## Algorithm\r\n```java\r\nclass Solution {\r\n    public int minCharacters(String A, String B) {\r\n\r\n        HashMap<Character, Integer> countA = new HashMap<>();\r\n        HashMap<Character, Integer> countB = new HashMap<>();\r\n\r\n        for (char c : A.toCharArray()) {\r\n            countA.put(c, countA.getOrDefault(c, 0) + 1);\r\n        }\r\n\r\n        for (char c : B.toCharArray()) {\r\n            countB.put(c, countB.getOrDefault(c, 0) + 1);\r\n        }\r\n\r\n        int minChanges = Integer.MAX_VALUE;\r\n\r\n        for (int i = 1; i < 26; i++) {\r\n            int count = 0;\r\n            for (char j = 'a'; j < 'a' + i; j++) {\r\n                count += countA.getOrDefault(j, 0);\r\n            }\r\n            for (char j = (char) ('a' + i); j < 'z' + 1; j++) {\r\n                count += countB.getOrDefault(j, 0);\r\n            }\r\n            minChanges = Math.min(minChanges, count);\r\n        }\r\n\r\n        for (int i = 1; i < 26; i++) {\r\n            int count = 0;\r\n            for (char j = 'a'; j < 'a' + i; j++) {\r\n                count += countB.getOrDefault(j, 0);\r\n            }\r\n            for (char j = (char) ('a' + i); j < 'z' + 1; j++) {\r\n                count += countA.getOrDefault(j, 0);\r\n            }\r\n            minChanges = Math.min(minChanges, count);\r\n        }\r\n\r\n        for (char i = 'a'; i <= 'z'; i++) {\r\n            int totalChanges = A.length() + B.length() - countA.getOrDefault(i, 0) - countB.getOrDefault(i, 0);\r\n            minChanges = Math.min(minChanges, totalChanges);\r\n        }\r\n\r\n        return minChanges;\r\n        \r\n    }\r\n}\r\n```\r\n\r\n## Complexity\r\n1. Time complexity:O(n)\r\n2. Space complexity:O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/42#issuecomment-2361403961","body":"## Approach\nquick sort\nnow stuck at test case 17 with a bunch of 2s\n## Algorithm\n```java\nclass Solution {\n     public int[] sortArray(int[] nums) {\n        quickSort(nums, 0, nums.length - 1);\n        return nums; \n    }\n\n    public static void quickSort(int[] nums, int low, int high) {\n        if (low < high) {\n            int pivot_loc = partition(nums, low, high);\n            quickSort(nums, low, pivot_loc - 1);\n            quickSort(nums, pivot_loc + 1, high);\n        }\n    }\n\n    public static int partition(int[] nums, int low, int high) {\n        int pivot = nums[high];\n        int wall = low; \n\n        for (int i = low; i < high; i++) { \n            if (nums[i] < pivot) {\n                int temp = nums[i];\n                nums[i] = nums[wall];\n                nums[wall] = temp;\n\n                wall++; \n            }\n        }\n\n        int temp2 = nums[wall];\n        nums[wall] = nums[high];\n        nums[high] = temp2;\n\n        return wall;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/43#issuecomment-2371508134","body":"## Approach\n二分法\n要記得型別轉換\n\n## Algorithm\n```java\nclass Solution {\n    public int mySqrt(int x) {\n\n        if (x == 0 || x == 1)\n          return x;\n\n        long start = 1;\n        long end = x;\n\n        while(start <= end){\n\n            long mid = (end-start)/2 + start;\n\n            if (mid*mid == x)\n              return (int)mid;\n            \n            else if (mid*mid < x)\n                start = mid +1;\n            \n            else\n              end = mid-1;\n        }  \n        \n        return (int)end;\n    }\n}\n```\n## Complexity\n1. Time Complexity:O(logn)\n2. Space Complexity:O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/44#issuecomment-2365234272","body":"## Approach\r\nusing brute force will get TLE\r\nBinary search \r\n\r\n## Algorithm\r\n```java\r\n/* The isBadVersion API is defined in the parent class VersionControl.\r\n      boolean isBadVersion(int version); */\r\n\r\npublic class Solution extends VersionControl {\r\n    public int firstBadVersion(int n) {\r\n        int left  =1;\r\n        int right = n;\r\n         while(left < right){\r\n\r\n            //making mid \r\n            int mid = left + (right - left)/2; \r\n            \r\n            if (isBadVersion(mid))\r\n                right = mid;\r\n\r\n            // narrow down the searching area\r\n            else\r\n                left = mid +1;\r\n         }\r\n         return right;\r\n    }\r\n}\r\n```\r\n## Complexity\r\n1. Time Complexity: O(logn)\r\n2. Space Complexity:O(1)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/49#issuecomment-2377342731","body":"先打卡\n```java\nclass Solution {\n    public int maxVowels(String s, int k) {\n\n        int maxVowels = 0;\n        int currentVowelCount = 0;\n        String vowels = \"aeiou\";\n\n        // Count vowels in the first window\n        for (int i = 0; i < k; i++) {\n            if (vowels.indexOf(s.charAt(i)) != -1) {\n                currentVowelCount++;\n            }\n        }\n        maxVowels = currentVowelCount;\n\n        // Slide the window\n        for (int i = k; i < s.length(); i++) {\n            if (vowels.indexOf(s.charAt(i - k)) != -1) {\n                currentVowelCount--; // Remove the vowel going out of the window\n            }\n            if (vowels.indexOf(s.charAt(i)) != -1) {\n                currentVowelCount++; // Add the new vowel coming into the window\n            }\n            maxVowels = Math.max(maxVowels, currentVowelCount);\n        }\n\n        return maxVowels;\n\n    }\n\n}\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/51#issuecomment-2380715704","body":"## Approach\r\nsliding window\r\n\r\n## Algo\r\n```java\r\n  List<Integer> result = new ArrayList<>();\r\n        int pLength = p.length();\r\n        int sLength = s.length();\r\n        \r\n        // Edge case: if s is shorter than p, return empty list\r\n        if (sLength < pLength) return result;\r\n\r\n        // Sort the target string p\r\n        char[] pArray = p.toCharArray();\r\n        Arrays.sort(pArray);\r\n        String sortedP = new String(pArray);\r\n        \r\n        // Sliding window to check each substring of s\r\n        for (int i = 0; i <= sLength - pLength; i++) {\r\n            String currentSubstring = s.substring(i, i + pLength);\r\n            char[] currentArray = currentSubstring.toCharArray();\r\n            Arrays.sort(currentArray);\r\n            String sortedCurrent = new String(currentArray);\r\n\r\n            if (sortedCurrent.equals(sortedP)) {\r\n                result.add(i);\r\n            }\r\n        }\r\n\r\n        return result;\r\n```\r\n## Complexity\r\n1. time complexity:\r\n2.  space complexity:\r\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/54#issuecomment-2386179744","body":"## Approach\n1. change hour and minute into binary\n2. loop through all the possibilities\n3. if hour and minute equals turnedon , then add it into the list\n\n\n## Algorithm\n```java\nclass Solution {\n    public List<String> readBinaryWatch(int turnedOn) {\n\n        List<String> result = new ArrayList<>();\n\n        for (int i = 0; i <= 11; i++) {\n            int hourCount = 0;\n            int minuteCount = 0;\n\n            for (int k = 0; k <= 59; k++) {\n                hourCount = Integer.bitCount(i);\n                minuteCount = Integer.bitCount(k);\n\n                if (hourCount + minuteCount == turnedOn) {\n                    String time = String.format(\"%d:%02d\", i, k);\n                    result.add(time);\n                }\n\n            }\n        }\n\n        return result;\n\n    }\n}\n```\n## Complexity\n1. Time Complexity:O(1)(actually is O(720))\n2. Space Complexity:O(1)(actually is O(720))","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/57#issuecomment-2393997089","body":"```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nclass Solution {\n    public int maxDistance(int[][] grid) {\n        int n = grid.length;\n\n        // Initialize queue for BFS\n        Queue<int[]> queue = new LinkedList<>();\n\n        // Add all land cells (1s) to the queue\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    queue.offer(new int[] {i, j});\n                }\n            }\n        }\n\n        // Edge case: If no land or no water, return -1\n        if (queue.size() == 0 || queue.size() == n * n) {\n            return -1;\n        }\n\n        // Directions array for up, down, left, right\n        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n\n        int maxDistance = -1;\n\n        // BFS to find the maximum distance from land to water\n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            int x = cell[0], y = cell[1];\n\n            // Explore neighbors in 4 directions\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n\n                // Check if the neighbor is within bounds and is water (0)\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n && grid[newX][newY] == 0) {\n                    // Update the water cell with distance and mark as visited\n                    grid[newX][newY] = grid[x][y] + 1;\n                    maxDistance = Math.max(maxDistance, grid[newX][newY] - 1);\n                    queue.offer(new int[] {newX, newY});\n                }\n            }\n        }\n\n        return maxDistance;\n    }\n}\n\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/60#issuecomment-2397265453","body":"## Approach\nDP\n## Algorithm\n```java\nclass Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        int [] dp = new int [n];\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n\n        for(int i=2; i<n; i++){\n            dp[i] = cost[i] + Math.min(dp[i -1],dp[i-2]);\n        }\n\n        return Math.min(dp[n-1],dp[n-2]);\n        \n    }\n}\n```\n## Complexity\n1. Time Complexity:O(n)\n2. Space Complexity:O(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/65#issuecomment-2408602982","body":"```java\nclass Solution {\n\n    public double knightProbability(int n, int k, int row, int column) {\n        int[][] MOVES = {\n                { 2, 1 }, { 1, 2 }, { -1, 2 }, { -2, 1 },\n                { -2, -1 }, { -1, -2 }, { 1, -2 }, { 2, -1 }\n        };\n\n        double[][][] dp = new double[n][n][k + 1];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j][0] = 1.0;\n            }\n        }\n\n        for (int step = 1; step <= k; step++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    double prob = 0.0;\n                    for (int[] move : MOVES) {\n                        int prevRow = i - move[0];\n                        int prevCol = j - move[1];\n                        if (prevRow >= 0 && prevRow < n && prevCol >= 0 && prevCol < n) {\n                            prob += dp[prevRow][prevCol][step - 1] / 8.0;\n                        }\n                    }\n                    dp[i][j][step] = prob;\n                }\n            }\n        }\n\n        return dp[row][column][k];\n\n    }\n}\n```\n## Complexity\n1. Time:O(n^2 * k)\n2. space:O(n^2) ","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/70#issuecomment-2419889561","body":"## approach\ndp\n\n## algorithm\n```java\nclass Solution {\n    public int change(int amount, int[] coins) {\n\n        int [] dp = new int[amount+1];\n\n        dp[0] = 1;\n\n\n        for (int coin : coins){\n            for (int i=coin; i<=amount; i++){\n                dp[i] = dp[i] +dp[i-coin];\n            }\n\n        }\n\n        return dp[amount];\n\n        \n    }\n}\n```\n\n## complexity\n1. time complexity:O(n * amount)\n2. space complexity: O(amount)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/73#issuecomment-2425011012","body":"## Algo\n\n```java\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int far =0;\n\n        for (int i=0; i<nums.length; i++){\n            if(i>far){\n                return false;\n            }\n\n            far = Math.max(far,i+nums[i]);\n\n            if(far >= nums.length -1){\n                return true;\n            }\n        }\n\n        return false;\n        \n    }\n}\n```\n\n## Complexity\n1. Time Complexity:O(n)\n2. Space Complexity:O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"edwineo":[null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/2#issuecomment-2291622571","body":"## 思路\r\n从后往前遍历相加，进位\r\n## 代码\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function(num, k) {\r\n    // carry 进位\r\n    const res = []\r\n    const len = num.length\r\n    let carry = 0\r\n    for (let i = len - 1; i >= 0; i--) {\r\n        const plus = k % 10\r\n        k = Math.floor(k / 10)\r\n        const temp = num[i] + plus + carry\r\n        if (temp >= 10) {\r\n            carry = 1\r\n        } else {\r\n            carry = 0\r\n        }\r\n        res.unshift(temp % 10)\r\n    }\r\n    // k 还没遍历完\r\n    while (k) {\r\n        const plus = k % 10\r\n        k = Math.floor(k / 10)\r\n        const temp = plus + carry\r\n        if (temp >= 10) {\r\n            carry = 1\r\n        } else {\r\n            carry = 0\r\n        }\r\n        res.unshift(temp % 10)\r\n    }\r\n    if (carry) {\r\n        res.unshift(carry)\r\n    }\r\n    return res\r\n};\r\n```\r\n\r\n## 复杂度\r\n时间复杂度：O(N)\r\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293801379","body":"## 思路\r\n贪心法\r\n## 代码\r\n```js\r\n/**\r\n * @param {string} s\r\n * @param {character} c\r\n * @return {number[]}\r\n */\r\nvar shortestToChar = function(s, c) {\r\n    // 贪心\r\n    // https://leetcode-solution.cn/solutionDetail?type=3&id=2&max_id=2\r\n    \r\n    const res = new Array(s.length)\r\n    // 第一次遍历，从左往右，计算距离\r\n    for (let i = 0; i < s.length; i++) {\r\n        if (s[i] === c) {\r\n            res[i] = 0\r\n        } else {\r\n            res[i] = res[i - 1] === undefined ? Infinity : res[i - 1] + 1 // 如果没有，则与左边最近的一个同步\r\n        }\r\n    }\r\n    \r\n    // 第二次遍历，从右往左\r\n    // 看右侧出现的 C 字符距离更近，就更新 res[i] 距离\r\n    for (let i = s.length - 1; i >= 0; i--) {\r\n        // 只需看是否覆盖\r\n        if (res[i] === Infinity || res[i + 1] + 1 < res[i]) {\r\n            res[i] = res[i + 1] + 1\r\n        }\r\n    }\r\n\r\n    return res\r\n};\r\n```\r\n## 复杂度\r\n时间复杂度：O(N)\r\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/10#issuecomment-2295317101","body":"## 思路\n括号匹配，栈\n## 代码\n```js\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    // 括号匹配\n    // 栈\n    // 递归与迭代\n    // https://leetcode-solution.cn/solutionDetail?type=3&id=4&max_id=2\n    const stack = []\n    const len = s.length\n    for (let i = 0; i < len; i++) {\n        if (s[i] === ']') {\n            let repeatStr = ''\n            let repeatNum = ''\n            // 计算 repeatStr\n            while (stack.length && stack[stack.length - 1] !== '[') {\n                repeatStr = stack.pop() + repeatStr // 注意要从后面 +\n            }\n            // 遇到 '['\n            stack.pop()\n            // 计算 repeatNum\n            while (stack.length && !isNaN(stack[stack.length - 1])) {\n                repeatNum = stack.pop() + repeatNum // 注意要从后面 +\n            }\n            const res = repeatStr.repeat(Number(repeatNum))\n            stack.push(res) // 将此次结果放在栈内\n        } else {\n            // 只要不为 ']'，就一直 push\n            stack.push(s[i])\n        }\n    }\n    return stack.join('')\n};\n```\n## 复杂度\n时间复杂度：O(n) // 只遍历一次\n空间复杂度：O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/11#issuecomment-2305078941","body":"## 思路\n读栈和写栈，辅助栈\n## 代码\n```js\n\nvar MyQueue = function() {\n    this.inStack = []\n    this.outStack = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.inStack.push(x)\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    if (this.outStack.length) {\n        return this.outStack.pop()\n    } else {\n        while (this.inStack.length) {\n            this.outStack.push(this.inStack.pop())\n        }\n        return this.outStack.pop()\n    }\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    if (this.outStack.length) {\n        return this.outStack[this.outStack.length - 1]\n    } else {\n        while (this.inStack.length) {\n            this.outStack.push(this.inStack.pop())\n        }\n        return this.outStack[this.outStack.length - 1]\n    }\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return !this.inStack.length && !this.outStack.length\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n```\n## 复杂度\n时间复杂度：O(N)\n空间复杂度：O(N)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/23#issuecomment-2322754334","body":"## 思路\ndfs 前序遍历\n## 代码\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    if (!root) {\n        return 'X' // 空的用 X 表示\n    }\n    const left = serialize(root.left)\n    const right = serialize(root.right)\n    return `${root.val},${left},${right}`\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    const list = data.split(',') // data 本身是字符串\n    const buildTree = (list) => {\n        const rootVal = list.shift() // 一定要先取出来 root 值\n        if (rootVal === 'X') { // 空的用 X 表示\n            return null\n        }\n        // 如果 rootVal 有值\n        const root = new TreeNode(rootVal)\n        root.left = buildTree(list) // 下一个就是 left，递归构建 left 子树\n        root.right = buildTree(list) // 再下一个是 right，递归构建 right 子树\n        return root // 返回构建的根节点\n    }\n    return buildTree(list)\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */\n```\n## 复杂度\n时间复杂度：O(N) ，N 为 number of node\n空间复杂度：O(N)","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2333991090","body":"## 思路\n哈希表记录字符串长度\n## code\n```js\n/**\n * @param {string} s\n * @param {string[]} words\n * @return {number[]}\n */\nvar findSubstring = function(s, words) {\n    // 哈希表\n    const res = []\n    const map = new Map()\n    if (!words || !words.length) {\n        return res\n    }\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i]\n        if (map.has(word)) {\n            map.set(word, map.get(word) + 1)\n        } else {\n            map.set(word, 1)\n        }\n    }\n\n    const sLen = s.length\n    const wordLen = words[0].length\n    const count = words.length\n\n    // wordLen * count 是串联子串必须达到的长度\n    for (let i = 0; i < sLen - wordLen * count + 1; i++) {\n        // 得到当前窗口字符串\n        const cur = s.slice(i, i + wordLen * count)\n        const temp = new Map()\n        let j = 0\n        while (j < cur.length) {\n            // 单个字符长度\n            const word = cur.slice(j, j + wordLen)\n            // 剪枝\n            if (!map.has(word)) {\n               break \n            }\n            temp.set(word, temp.has(word) ? temp.get(word) + 1 : 1)\n            // 剪枝\n            if (temp.get(word) > map.get(word)) {\n                break\n            }\n            // 此时满足条件，向前进\n            j += wordLen\n        }\n        // 说明 cur 这一段满足全部字符匹配的条件\n        if (j === cur.length) {\n            res.push(i) // 注意是把 i 加进去\n        }\n    }\n    return res\n};\n```\n## 复杂度\n时间复杂度：O(n * m * k)\n空间复杂度：O(m)\nn 为字符串 S 长度, m 为 words 数组元素个数, k 为单个 word 字串长度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/68#issuecomment-2414423945","body":"```js\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar findTargetSumWays = function(nums, target) {\n    let count = 0;\n    const backtrack = (nums, target, index, sum) => {\n        if (index === nums.length) {\n            if (sum === target) {\n                count++;\n            }\n        } else {\n            backtrack(nums, target, index + 1, sum + nums[index]);\n            backtrack(nums, target, index + 1, sum - nums[index]);\n        }\n    }\n    \n    backtrack(nums, target, 0, 0);\n    return count;\n};\n```","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"panfx":[null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/3#issuecomment-2293248676","body":"### 解法\r\n1. 先遍历字符串找出c的所有索引值缓存至索引列表\r\n2. 再遍历字符串计算每个索引到索引列表最小值得出结果\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        List<Integer> cIndex = new ArrayList<>();\r\n        for (int i = 0; i < s.length(); i++) {\r\n            char a = s.charAt(i);\r\n            if (s.charAt(i) == c) {\r\n                cIndex.add(i);\r\n            }\r\n        }\r\n\r\n        int[] result = new int[s.length()];\r\n        for (int i = 0; i < s.length(); i++) {\r\n            int distance = Math.abs(i - cIndex.get(0));\r\n            if (distance == 0) {\r\n                result[i] = 0;\r\n                continue;\r\n            }\r\n            for (int j = 1; j < cIndex.size(); j++) {\r\n                int jd = cIndex.get(j);\r\n                int currentDistance = Math.abs(i - jd);\r\n                if (currentDistance < distance) {\r\n                    distance = currentDistance;\r\n                }\r\n            }\r\n            result[i] = distance;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n```\r\n### 复杂度\r\n时间复杂度：O(n^2)\r\n空间复杂度：O(n)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2298043453","body":"### 思路\r\n已经分好的块，始终有：右边块的最小值>=左边块的最大值\r\n```java\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        LinkedList<Integer> list = new LinkedList<>();\r\n        for (int num : arr) {\r\n            if (list.isEmpty() || num >= list.peek()) {\r\n                list.push(num);\r\n            } else {\r\n                int mx = list.pop();\r\n                while (!list.isEmpty() && list.peek() > num) {\r\n                    list.pop();\r\n                }\r\n                list.push(mx);\r\n            }\r\n        }\r\n        return list.size();\r\n    }\r\n}\r\n```\r\n### 复杂度\r\n时间复杂度：O(n)\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2301287974","body":"### 思路\r\n涉及到链表的，特别是类似旋转K个元素的问题等，优先考虑双指针解法。A指针走K个元素，B指针启动，到A指针走到结尾，B指针此时距离结尾刚好K个元素，此时将A指针元素与当前链表头部相连，再将B指针元素指向NULL\r\n### 代码\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode rotateRight(ListNode head, int k) {\r\n        if (k == 0 || head == null || head.next == null) {\r\n            return head;\r\n        }\r\n        ListNode result = null;\r\n        ListNode tail = null;\r\n        ListNode a = head;\r\n        ListNode b = head;\r\n        ListNode it = head;\r\n        int i = 0;\r\n        while (true) {\r\n            if (a.next == null) {\r\n                a.next = head;\r\n                tail = a;\r\n                if (i < k) {\r\n                    // k对链表长度取余，使k小于链表长度，节约循环时间,重新遍历\r\n                    i++;\r\n                    k = k%i;\r\n                    i = 0;\r\n                    a = head;\r\n                    continue;\r\n                }\r\n               \r\n            }\r\n\r\n            // a指针已遍历到末尾\r\n            if (a == tail) {\r\n                // 判断b指针是否已经启动\r\n                if (i >= k) {\r\n                    result = b.next;\r\n                    b.next = null;\r\n                    break;\r\n                } \r\n            }\r\n            \r\n            // 继续移动\r\n            a = a.next;\r\n            if (i >= k) {\r\n                b = b.next;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n```\r\n### 复杂度\r\n时间复杂度O(n)\r\n空间复杂度O(1)","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/16#issuecomment-2308399351","body":"```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode pA = headA;\n        ListNode pB = headB;\n        while(true) {\n            if (pA == null && pB == null) {\n                return null;\n            } else if (pA == null) {\n                pA = headB;\n            } else if (pB == null) {\n                pB = headA;\n            }\n            if (pA == pB) {\n                return pA;\n            }\n\n            pA = pA.next;\n            pB = pB.next;\n        }\n    }\n}\n```","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/20#issuecomment-2314350861","body":"```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if (p == null && q == null) {\n            return true;\n        } else if (p == null || q == null) {\n            return false;\n        }\n\n        return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n    }\n}\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2323722247","body":"```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i=0; i < nums.length; i++) {\n            Integer x = map.get(target - nums[i]);\n            if (x != null) {\n                return new int[]{x, i};\n            }\n\n            map.put(nums[i], i);\n        }\n\n        return new int[]{};\n    }\n}\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/32#issuecomment-2337798734","body":"```java\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int fast = 1, slow = 1;\n        while (fast < n) {\n            if (nums[fast] != nums[fast - 1]) {\n                nums[slow] = nums[fast];\n                ++slow;\n            }\n            ++fast;\n        }\n        return slow;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liudi9047":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/12#issuecomment-2299131215","body":"class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        int n = arr.length, ans = 0;\n        int[] tmp = arr.clone();\n        Arrays.sort(tmp);\n        Map<Integer, Integer> map1 = new HashMap<>(), map2 = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            map1.put(tmp[i], map1.getOrDefault(tmp[i], 0) + 1);\n            map2.put(arr[i], map2.getOrDefault(arr[i], 0) + 1);\n            if (map1.equals(map2)) ans++;\n        }\n        return ans;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/13#issuecomment-2302376929","body":"class Solution(object):\n    def rotateRight(self, head, k):\n        if head is None or head.next is None: return head\n        start, end, len = head, None, 0\n        while head:\n            end = head\n            head = head.next\n            len += 1\n        end.next = start\n        pos = len - k % len\n        while pos > 1:\n            start = start.next\n            pos -= 1\n        ret = start.next\n        start.next = None\n        return ret","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allanli-lhh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/22#issuecomment-2319970380","body":"### Method1\nBFS reversed level order traversal,\n### Code\n\n```java\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Deque<TreeNode> queue = new ArrayDeque<>();\n        queue.add(root);\n        TreeNode cur = null;\n        while(!queue.isEmpty()){\n            cur = queue.poll();\n            // offer the right child node into the queue\n            if(cur.right != null){queue.offer(cur.right);}\n            if(cur.left != null){ queue.offer(cur.left);}\n        }\n        return cur.val;\n    }\n}\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N) the number of nodes in the tree\n- 空间复杂度：O(N) the number of node in last level is approximately N/2\n\n### Method 2\nDFS preorder traversal. Find out the first occurrence of node with the longest path from the root node. \nRecursive order guarantees the leftmost node of the bottom level could be visited firstly. \n\n### Code\n\n```java\nclass Solution {\n    private TreeNode ans = null;\n    public int findBottomLeftValue(TreeNode root) {\n        dfs(root, 0, new int[]{Integer.MIN_VALUE});\n        return ans.val;\n    }\n    private void dfs(TreeNode root, int len, int[] maxlen){\n        if(root == null){\n            return;\n        }\n        if(len> maxlen[0]){\n            ans = root;\n            maxlen[0] = len;\n        }\n        dfs(root.left, len+1, maxlen);\n        dfs(root.right, len+1, maxlen);\n    }\n}\n```\n\n**复杂度分析**\n- 时间复杂度：O(N) NumOfBranch(2) ^ NumberOfLevel(LogN)\n- 空间复杂度：O(N) the number of node in last level is approximately N/2\n\n\n### ith value in last row:\n```java\nclass Solution {\n    private TreeNode ans = null;\n    public int findBottomLeftValue(TreeNode root) {\n        dfs(root, 0, new int[]{Integer.MIN_VALUE}, new int[]{0}, 5);\n        return ans.val;\n    }\n    private void dfs(TreeNode root, int len, int[] maxlen, int[] k, int i){\n        if(root == null){\n            return;\n        }\n        if(len> maxlen[0]){\n            k[0] = 1;\n        }\n        if(len == maxlen[0]){\n            k[0]++;\n            if(k[0] == i){\n                ans = root;\n            }\n        }\n        maxlen[0] = Math.max(maxlen[0], len);\n        dfs(root.left, len+1, maxlen, k, i);\n        dfs(root.right, len+1, maxlen, k, i);\n    }\n}\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/29#issuecomment-2333539596","body":"### 思路\n\nBrute force. Use two HashMap to record the number of each String in words and strings we have met\n\n### 代码\n\n\n```java\n\n    public List<Integer> findSubstring(String s, String[] words) {\n        List<Integer> ans = new ArrayList<>();\n        if(s == null || s.length()== 0 || words.length ==0){\n            return ans;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for(String e: words){\n            map.put(e, map.getOrDefault(e, 0)+1);\n        }\n        int len = words[0].length();\n        \n        for(int i =0; i<= s.length() - (words.length * len); i++){\n            Map<String, Integer> record = new HashMap<>();\n            int num = 0;\n            while(num < words.length){\n                String cur = s.substring(i + num*len, i+ (num+1)*len);\n                if(map.containsKey(cur)){\n                    record.put(cur, record.getOrDefault(cur, 0)+1);\n                    if(record.get(cur)> map.get(cur)){\n                        break;\n                    }\n                }else{\n                    break;\n                }\n\n                num++;\n            }\n            if(num == words.length){\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n\n\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(s.length() * words.length)。\n- 空间复杂度：O(words,length)\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xchen172":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/24#issuecomment-2323578133","body":"time complexity: O(nlogn)\r\nDFS: O(N) + sorting O(nlogn) + result O(N) \r\nSpace: O(N)\r\n\r\n先用dfs， 对于左子节点，列索引减1（c-1）；对于右子节点，列索引加1（c+1）。行索引对于左右子节点都加1（r+1）。\r\n然后排序后按照组展示出来。 \r\n\r\n```python\r\nclass Solution(object):\r\n    def verticalTraversal(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        self.path =[]\r\n        def dfs(node, r, c,path ):\r\n            if not node:\r\n                return\r\n            else:\r\n                path.append((c,r,node.val))\r\n                dfs(node.left, r+1,c-1,path)\r\n                dfs(node.right,r+1,c+1,path)\r\n        \r\n        dfs(root,0,0,self.path)\r\n        \r\n        self.path.sort()\r\n        \r\n        res = []\r\n        curr = float('-inf')\r\n        carry = []\r\n        for i in self.path:\r\n            if i[0] != curr :\r\n                if len(carry)>0:\r\n                    res.append(carry)\r\n                \r\n                carry = [i[2]]\r\n                \r\n                curr = i[0]\r\n               \r\n            else:\r\n                carry.append(i[2])\r\n                \r\n        res.append(carry)\r\n        return res\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/25#issuecomment-2325176377","body":"用一个 dict 储存\r\ntime: O((n)\r\nspace: O(n)\r\n ```python\r\n  def twoSum(self, nums: List[int], target: int) -> List[int]:\r\n      nmap = {}\r\n      for i, num in enumerate(nums):\r\n          if target - num in nmap:\r\n              return [i, nmap[target - num]]\r\n          nmap[num] = i\r\n      return []\r\n```","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaoeve":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/45#issuecomment-2366812059","body":"class Solution:\r\n    def reversePairs(self, nums):\r\n        # 归并排序并统计重要翻转对\r\n        def merge_sort_and_count(nums, left, right):\r\n            if left >= right:\r\n                return 0\r\n            \r\n            mid = (left + right) // 2\r\n            count = merge_sort_and_count(nums, left, mid) + merge_sort_and_count(nums, mid + 1, right)\r\n            \r\n            # 统计符合条件的翻转对\r\n            j = mid + 1\r\n            for i in range(left, mid + 1):\r\n                while j <= right and nums[i] > 2 * nums[j]:\r\n                    j += 1\r\n                count += j - (mid + 1)\r\n            \r\n            # 归并两个有序数组\r\n            nums[left:right + 1] = sorted(nums[left:right + 1])\r\n            return count\r\n        \r\n        # 统计翻转对\r\n        return merge_sort_and_count(nums, 0, len(nums) - 1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/46#issuecomment-2368359159","body":"# 思路：以三个灯能不能覆盖到所有房子作为逻辑条件，取得最合适的半径r\n#代码：\ndef can_cover_with_radius(nums, r):\n    # 贪心地用 3 个灯覆盖所有房子\n    lamps = 3\n    n = len(nums)\n    i = 0\n    while i < n and lamps > 0:\n        lamps -= 1  # 放置一个灯\n        light_position = nums[i] + r  # 灯放置在 nums[i] + r\n        # 跳过所有在 [nums[i], nums[i] + 2*r] 范围内的房子\n        while i < n and nums[i] <= light_position + r:\n            i += 1\n    # 如果所有房子都被覆盖，返回 True\n    return i == n\n\ndef min_radius_to_cover(nums):\n    nums.sort()\n    left, right = 0, (nums[-1] - nums[0]) / 2  # 左边界为 0，右边界为最大间距的一半\n    # 二分查找最小的 r\n    while right - left > 1e-6:  # 控制精度在 1e-6\n        mid = (left + right) / 2\n        if can_cover_with_radius(nums, mid):\n            right = mid  # 可以用当前半径覆盖，尝试更小的半径\n        else:\n            left = mid  # 无法覆盖，尝试更大的半径\n    return right\n#时间复杂度：O(nlog(n))\n空间复杂度：O(n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/51#issuecomment-2380643680","body":"思路：将字符串转换成数组，遍历s比较与p长度一样的字符子串，通过哈希表可以确保包含的不同字符数量一致，\n        在不同字符数量一致后，通过字典作差，如果所有字符的差都为0，说明即使重复出现，也是一致的\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        se = []\n        for i in s:\n            se.append(i)\n\n        pe = []\n        for i in p:\n            pe.append(i)\n\n        dic_countp = collections.Counter(pe)\n        seen = set(pe)\n        indexs = []\n\n        for j in range(len(se) - len(pe) + 1):\n            list_s = se[j:j + len(pe)]\n            dic_counts = collections.Counter(list_s)\n            seen1 = set(list_s)\n            result = {k: dic_countp[k] - dic_counts[k] for k in dic_countp if k in dic_counts}\n            if not seen1 - seen and not seen-seen1 and all(v == 0 for v in result.values()):\n                indexs.append(j)\n        return indexs\n时间复杂度：O（M*N）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/52#issuecomment-2381371822","body":"### 思路：滑动窗口\r\n\r\nclass Solution:\r\n    def minWindow(self, s: str, t: str) -> str:\r\n        ans_left, ans_right = -1, len(s)\r\n        cnt = defaultdict(int)  # 比 Counter 更快\r\n        for c in t:\r\n            cnt[c] += 1\r\n        less = len(cnt)  # 有 less 种字母的出现次数 < t 中的字母出现次数\r\n        left = 0\r\n        for right, c in enumerate(s):  # 移动子串右端点\r\n            cnt[c] -= 1  # 右端点字母移入子串\r\n            if cnt[c] == 0:\r\n                # 原来窗口内 c 的出现次数比 t 的少，现在一样多\r\n                less -= 1\r\n            while less == 0:  # 涵盖：所有字母的出现次数都是 >=\r\n                if right - left < ans_right - ans_left:  # 找到更短的子串\r\n                    ans_left, ans_right = left, right  # 记录此时的左右端点\r\n                x = s[left]  # 左端点字母\r\n                if cnt[x] == 0:\r\n                    # x 移出窗口之前，检查出现次数，\r\n                    # 如果窗口内 x 的出现次数和 t 一样，\r\n                    # 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少\r\n                    less += 1\r\n                cnt[x] += 1  # 左端点字母移出子串\r\n                left += 1\r\n        return \"\" if ans_left < 0 else s[ans_left: ans_right + 1]\r\n\r\n时间复杂度：O(m+n)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/57#issuecomment-2393297935","body":"```\r\nclass Solution: \r\ndef maxDistance(self, grid: List[List[int]]) -> int: \r\n    n = len(grid) \r\n    queue = collections.deque([(i, j) for i in range(n) for j in range(n) if grid[i][j]])\r\n    if len(queue) == 0 or len(queue) == n * n:\r\n        return -1\r\n    distance = -1\r\n\r\n    while queue:\r\n        distance += 1\r\n        for _ in range(len(queue)):\r\n            x, y = queue.popleft()\r\n            for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1)):\r\n                nx, ny = x + dx, y + dy\r\n                if 0 <= nx < n and 0 <= ny < n and not grid[nx][ny]:\r\n                    grid[nx][ny] = 1\r\n                    queue.append((nx, ny))\r\n    return distance\r\n```\r\n\r\n<br>时间复杂度：O(n^2)\r\n<br>空间复杂度：O(n^2)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/62#issuecomment-2402480998","body":"`class Solution:\r\n\r\n    def findNumberOfLIS(self, nums: List[int]) -> int:\r\n\r\n        n = len(nums)\r\n\r\n        if n == 1: return 1\r\n\r\n\r\n\r\n        dp = [1] * n\r\n\r\n        count = [1] * n\r\n\r\n        max_length = 0\r\n\r\n        for i in range(1, n):\r\n\r\n            for j in range(i):\r\n\r\n                if nums[i] > nums[j]:\r\n\r\n                    if dp[j] + 1 > dp[i]:\r\n\r\n                        dp[i] = dp[j] + 1\r\n\r\n                        count[i] = count[j]\r\n\r\n                    elif dp[j] + 1 == dp[i]:\r\n\r\n                        count[i] += count[j]\r\n\r\n            max_length = max(max_length, dp[i])\r\n\r\n\r\n\r\n        res = 0\r\n\r\n        for i in range(n):\r\n\r\n            if dp[i] == max_length:\r\n\r\n                res += count[i]\r\n\r\n        return res`\r\n时间复杂度：O（N^2）","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/66#issuecomment-2408983432","body":"‘class Solution:\n\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:\n\n        if maxChoosableInteger >= desiredTotal: return True\n\n        if (1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal: return False\n\n\n\n        def dfs(state, desiredTotal, dp):\n\n            if dp[state] != None:\n\n                return dp[state]\n\n            for i in range(1, maxChoosableInteger + 1):\n\n                cur = 1 << (i - 1)\n\n                if cur & state != 0:\n\n                    continue\n\n                \n\n                if i >= desiredTotal or not dfs(cur | state, desiredTotal - i, dp):\n\n                    dp[state] = True\n\n                    return True\n\n            dp[state] = False\n\n            return False\n\n        \n\n        return dfs(0, desiredTotal, [None] * (1 << maxChoosableInteger))’","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-14-daily-check/issues/69#issuecomment-2416799747","body":"思路：递归搜索\n代码：\n‘class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        def dfs(i: int, c: int) -> int:\n            if i < 0:\n                return 0 if c == 0 else inf\n            if c < coins[i]:\n                return dfs(i - 1, c)\n            return min(dfs(i - 1, c), dfs(i, c - coins[i]) + 1)\n        ans = dfs(len(coins) - 1, amount)\n        return ans if ans < inf else -1’\n复杂度：O(n⋅amount)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}