{"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":[],"37":[],"38":[],"39":[],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":[],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":[],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":[],"84":[],"85":[],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"839781960":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"954545647":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1541732340":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"michaelxi3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rabbit2010520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ellie-wu05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yopming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckytwj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzz607":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoulufeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxoojs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wyz999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ricjli":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhaoling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flaming-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gelxgx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jessie725":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lsunxh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qilin88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengheng-yun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smz1995":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"size-of":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moyuanhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"9vivian88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guxuehua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirosola":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maoting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youzhaing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hanwangxxx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dujt-x":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"degndaixingqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gzgzgzgzgzgz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyi-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zenwangzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyyxw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fourierhai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangz001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haoyangxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chjillout":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mhcn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coconutice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackgaoyuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufeng727":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fontendart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingchehu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cobayaz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomato-tomato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xfliudx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"djd28176":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xilutian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053574990","body":"### js代码\n```JavaScript\nvar maxChunksToSorted = function (arr) {\n  const stack = [];\n  for (let i = 0; i < arr.length; i++) {\n    a = arr[i];\n    if (stack.length > 0 && stack[stack.length - 1] > a) {\n      const cur = stack[stack.length - 1];\n      while (stack && stack[stack.length - 1] > a) stack.pop();\n      stack.push(cur);\n    } else {\n      stack.push(a);\n    }\n  }\n  return stack.length;\n};\n\n```\n\n### 复杂度分析\n- 时间复杂度: O(N)\n- 空间复杂度: O(N)","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2060871609","body":"### js代码\n```JavaScript\nlet getIntersectionNode = (headA,headB)=>{\n    let pA = headA,pB = headB\n    if(pA === null || pB === null){\n        return null\n    }\n    while(pA != pB){\n        pA = pA?pA.next:headB\n        pB = pB?pB.next:headA\n    }\n    return pA\n}\n\n```\n\n### 复杂度分析\n- 时间复杂度: O(N)\n- 空间复杂度: O(1)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068436709","body":"### js代码\n```JavaScript\nvar sumNumbers = function (nums) {\n    let dfs = (node,pre)=>{\n        if(!node) return 0\n        const sum = pre * 10 + node.val\n        if(node.left === null && node.right === null){\n            return sum\n        }\n        return dfs(node.left,sum) + dfs(node.right,sum)\n    }\n    return dfs(root,0)\n}\n\n```\n\n### 复杂度分析\n- 时间复杂度: O(N)\n- 空间复杂度: O(H)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shunanch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yppah-eb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raychenlei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"woshichuanqilz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"willuuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christina-soda":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jia98shanliang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user-vannnn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnvsd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yueza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawyuan97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victorhuang99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cusanity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jay-xzj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiradaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyue-ma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"steven72574":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowangcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james0608":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaneyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"azl397985856":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chengfengfengwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bulingbulingbuling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eden-ye":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingtrains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"starorbiting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo-xiaoxiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"passengersa":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shellylcooper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testplm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tom-zhouch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skylarxu214":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taihui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huaxueguakele":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yang-chenyu104":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mlking15":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"-3":[],"cyonline":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jetery":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"klspta":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bookyue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jancerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"buer1121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ceramickitten":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gg925407590":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alyenor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dark-volute":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmastella":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dd2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayloveless":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuexi001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nineis7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsw9818":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaomingshixiaotang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snmyj":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2043024166","body":"```\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        vector<int> res,ans;\n        int jw = 0;\n        int pos = num.size() - 1;\n        for ( int i = pos; i>=0; i-- ) {\n             int s = num[i] + k % 10 + jw;\n             jw = s/10;\n             k/=10;\n             res.push_back(s % 10);\n             \n        }\n        while (jw > 0 || k > 0) {\n            int s =( jw + k%10 );\n            jw = s/10;\n            k /= 10;\n            res.push_back(s%10);\n        }\n        for ( int i = res.size() - 1 ;i>=0;i--) {\n           ans.push_back(res[i]);\n        }\n        return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045548930","body":"```\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.length();\n        vector<int> ans(n);\n        int index;\n\n        index = -2*n; \n        for (int i = 0; i < n; i++) {\n            if (s[i] == c) {\n                index = i;\n            }\n            ans[i] = i - index;\n        }\n\n        index = 2*n;\n        for (int i = n - 1; i >= 0; i--) {\n            if (s[i] == c) {\n                index = i;\n            }\n            ans[i] = min(ans[i], index - i);\n        }\n        return ans;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flipn9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wabw1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqmmy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-pricity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sclihuiming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amazeding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tzuikuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ringo1597":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brucezhang-utf-8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luanxing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihua1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cuizezhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiandao043":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"restlessbreeze":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruikiwi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiminren":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saitochen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtdcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"albert556":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wuxiaoshawn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zrtch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzhu096":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whoam-challenge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"syh-coder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaaller":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyrie96521":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cavecrypto":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cxgbro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erjian96":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2041877241","body":"```\r\nclass Solution:\r\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\r\n        ans = []\r\n        overflow = 0\r\n        k = [int(i) for i in str(k)]\r\n        num = num[::-1]\r\n        k = k[::-1]\r\n        for i in range(max(len(num), len(k))):\r\n            if i <= len(num) - 1 and i <= len(k) - 1:\r\n                overflow, cur = divmod((num[i] + k[i] + overflow), 10)\r\n                ans.append(cur)\r\n            elif i <= len(num) - 1:\r\n                overflow, cur = divmod((num[i] + overflow), 10)\r\n                ans.append(cur)\r\n            elif i <= len(k) - 1:\r\n                overflow, cur = divmod((k[i] + overflow), 10)\r\n                ans.append(cur)\r\n        if overflow != 0:\r\n            ans.append(overflow)\r\n        return ans[::-1] \r\n```\r\ntime: O(len(num)+len(k)) space max(len(num), len(k))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2043461515","body":"```\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        # compute the dis from its left \r\n        ans = []\r\n        pre = float(\"-inf\")\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                pre = i\r\n            ans.append(i-pre)\r\n        pre = float(\"inf\")\r\n        for i in range(len(s)-1, -1, -1):\r\n            if s[i] == c:\r\n                pre = i\r\n            ans[i] = min(ans[i], pre-i)\r\n        return ans\r\n```\r\n\r\ntwo passes: 1. compute the dis from its left 2. compute the dis from its right, the val is min(ans[i], pre-i)\r\n\r\ntime: n, space 1","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046555340","body":"```\r\nclass CustomStack:\r\n\r\n    def __init__(self, maxSize: int):\r\n        self.stack = []\r\n        self.size = 0\r\n        self.maxSize = maxSize\r\n        self.add = []\r\n        \r\n\r\n    def push(self, x: int) -> None:\r\n        if self.size < self.maxSize:\r\n            self.stack.append(x)\r\n            self.size += 1\r\n            self.add.append(0)\r\n        \r\n\r\n    def pop(self) -> int:\r\n        if self.size > 0:\r\n            self.size -= 1\r\n            inc = self.add.pop()\r\n            if self.size > 0:\r\n                self.add[-1] += inc\r\n            val = self.stack.pop()\r\n            return val+inc\r\n        return -1\r\n        \r\n        \r\n\r\n    def increment(self, k: int, val: int) -> None:\r\n        n = min(k, self.size)\r\n        if n >= 1:\r\n            self.add[n-1] += val\r\n```\r\n\r\ntime: push O(1), pop O(1), increment O(1), space O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049179153","body":"```\r\nclass Solution:\r\n    def decodeString(self, s: str) -> str:\r\n        stack = []\r\n        for c in s:\r\n            if c == \"]\":\r\n                rep = []\r\n                while True:\r\n                    top = stack.pop()\r\n                    if top == \"[\":\r\n                        k = []\r\n                        while stack and stack[-1] in \"0123456789\":\r\n                            k.append(stack.pop())\r\n                        k = int(\"\".join(k[::-1]))\r\n                        for i in range(k):\r\n                            stack += rep[::-1]\r\n                        break\r\n                    else:\r\n                        rep.append(top)\r\n            else:\r\n                stack.append(c)\r\n        return \"\".join(stack)\r\n```\r\ntime N space N where N is the len(decoded s)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2050503396","body":"```\r\nclass MyQueue:\r\n\r\n    def __init__(self):\r\n        self.forward = []\r\n        self.backward = []\r\n        \r\n\r\n    def push(self, x: int) -> None:\r\n        self.forward.append(x)\r\n        \r\n\r\n    def pop(self) -> int:\r\n        if self.backward:\r\n            return self.backward.pop()\r\n        else:\r\n            while self.forward:\r\n                self.backward.append(self.forward.pop())\r\n            return self.backward.pop()\r\n        \r\n\r\n    def peek(self) -> int:\r\n        if self.backward:\r\n            return self.backward[-1]\r\n        return self.forward[0]\r\n        \r\n\r\n    def empty(self) -> bool:\r\n        if len(self.forward) or len(self.backward):\r\n            return False\r\n        else:\r\n            return True\r\n  ```\r\n  space O(N) time O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2052393185","body":"```\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        if len(arr) == 1:\r\n            return 1\r\n        stack = []\r\n        stack.append(arr[0])\r\n        for i in range(1, len(arr)):\r\n            if arr[i] < stack[-1]:\r\n                cur = stack.pop()\r\n                while stack and arr[i] < stack[-1]:\r\n                    stack.pop()\r\n                stack.append(cur)\r\n            else:\r\n                stack.append(arr[i])\r\n        return len(stack)\r\n```\r\nEach element in the stack represents a block in which the element is the biggest number. Iterate the arr and if find a value smaller than the top of the stack, this value needs to be merged into the blocks in the stack. To determine which block this value should be merged in, we need to compare it with the element in the blocks. At least, it should be merged with the block stored on the top of the stack, but it is also necessary to merage some blocks in the stack together as if the value is very small, for instance, stack=[3,4] and value=1, block 3, 4 and value 1 should be merged into one block. So, we first pop the last block or element in the stack (if the value is smaller than the top of stack, at least it should be merged into the top block), then we compare the value with left blocks and if find value < left_block, we need to pop left_block. We discard or merge the left_block by popping it. Finally we append the previous popped top block in the stack. \r\n\r\nTime O(N), space O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2053729208","body":"```\r\nclass Solution:\r\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\r\n        if not head:\r\n            return head\r\n        if not k:\r\n            return head\r\n        # get the length of head\r\n        p = head\r\n        length = 0\r\n        while p:\r\n            length += 1\r\n            p = p.next\r\n        _, k = divmod(k, length)\r\n        if not k:\r\n            return head\r\n        # start rotateRight, find the length-k node\r\n        loc = 0\r\n        p = head\r\n        while p:\r\n            loc += 1\r\n            if loc == length - k:\r\n                break\r\n            else:\r\n                p = p.next\r\n        new_head = p.next\r\n        p.next = None\r\n        pointer = new_head\r\n        while pointer.next:\r\n            pointer = pointer.next\r\n        pointer.next = head\r\n        return new_head\r\n```\r\ntime O(N) space O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2054630072","body":"```\r\nclass Solution:\r\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        if not head or not head.next:\r\n            return head\r\n        num = 0\r\n        p = head\r\n        while p:\r\n            num += 1\r\n            p = p.next\r\n        swap_num = int(num/2)\r\n        cur_p = head\r\n        pre = ListNode(next=head)\r\n        for i in range(swap_num):\r\n            next_p = cur_p.next\r\n            cur_p.next = next_p.next\r\n            next_p.next = cur_p\r\n            pre.next = next_p\r\n            pre = cur_p\r\n            if i == 0:\r\n                new_head = next_p\r\n            cur_p = cur_p.next\r\n        return new_hea\r\n```\r\ntime O(N) space O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2057589502","body":"```\r\nclass Solution:\r\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\r\n        if not head:\r\n            return None\r\n        nodes = []\r\n        p = head\r\n        while p:\r\n            nodes.append(p.val)\r\n            p = p.next\r\n        root = self.sortedListToBSTHelper(nodes)\r\n        return root\r\n    \r\n    def sortedListToBSTHelper(self, nodes):\r\n        if nodes:\r\n            mid = len(nodes) // 2\r\n            root = TreeNode(val=nodes[mid])\r\n            root.left = self.sortedListToBSTHelper(nodes[:mid])\r\n            root.right = self.sortedListToBSTHelper(nodes[mid+1:])\r\n            return root\r\n        else:\r\n            return None\r\n   ```\r\ntime O(N), space O(N)\r\n   \r\n   ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2059631676","body":"```\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        set_a = set()\r\n        p_a = headA\r\n        while p_a:\r\n            set_a.add(p_a)\r\n            p_a = p_a.next\r\n        p_b = headB\r\n        while p_b:\r\n            if p_b in set_a:\r\n                return p_b\r\n            p_b = p_b.next\r\n        return None\r\n ```\r\n \r\n Time O(N) Space O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2061908903","body":"```\r\nclass Solution:\r\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        nodes = set()\r\n        p = head\r\n        while p:\r\n            if p in nodes:\r\n                return p\r\n            nodes.add(p)\r\n            p = p.next\r\n        return None\r\n```\r\nTime O(N) Space O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2065796146","body":"```\r\nclass Dlist:\r\n    def __init__(self, val=None, key=None):\r\n        self.val = val\r\n        self.key = key\r\n        self.pre = None\r\n        self.next = None\r\n\r\nclass LRUCache:\r\n        \r\n    def __init__(self, capacity: int):\r\n        self.map = {}\r\n        self.capacity = capacity\r\n        self.head = Dlist()\r\n        self.tail = Dlist()\r\n        self.head.next = self.tail\r\n        self.tail.pre = self.head\r\n\r\n    def move2tail(self, n):\r\n        # if already at the end, take no action\r\n        if n == self.tail.pre:\r\n            return\r\n        # find the node\r\n        pre_n = n.pre\r\n        next_n = n.next\r\n        pre_tail = self.tail.pre\r\n        # take out the node\r\n        pre_n.next = next_n\r\n        next_n.pre = pre_n\r\n        # move to the end\r\n        pre_tail.next = n\r\n        n.pre = pre_tail\r\n        n.next = self.tail\r\n        self.tail.pre = n\r\n\r\n    def add2tail(self, n):\r\n        pre_tail = self.tail.pre\r\n        pre_tail.next = n\r\n        n.pre = pre_tail\r\n        self.tail.pre = n\r\n        n.next = self.tail\r\n\r\n    def delete_head(self):\r\n        self.top = self.head.next\r\n        self.top_next = self.top.next\r\n        # delete the top node\r\n        self.head.next = self.top_next\r\n        self.top_next.pre = self.head\r\n        # set pointer to None\r\n        self.top.pre = None\r\n        self.top.next = None\r\n        del self.map[self.top.key]\r\n        \r\n    def get(self, key: int) -> int:\r\n        n = self.map.get(key, -1)\r\n        if n == -1:\r\n            return -1\r\n        self.move2tail(n)\r\n        return n.val\r\n\r\n    def put(self, key: int, value: int) -> None:\r\n        if key in self.map:\r\n            self.map[key].val = value\r\n            self.move2tail(self.map[key])\r\n        else:\r\n            if len(self.map) == self.capacity:\r\n                self.delete_head()\r\n            self.map[key] = Dlist(val=value, key=key)\r\n            self.add2tail(self.map[key])\r\n```\r\ndict to store (key, double_linked_list_node)\r\n\r\ntime O(1) space O(capacity)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067196395","body":"```\r\nclass Solution:\r\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\r\n        if not root:\r\n            return 0\r\n        max_depth = [-1]\r\n        self.dfs(root, 0, max_depth)\r\n        return max_depth[0]\r\n    \r\n    def dfs(self, root, current_depth, max_depth):\r\n        if not root:\r\n            return\r\n        current_depth += 1\r\n        max_depth[0] = max(max_depth[0], current_depth)\r\n        self.dfs(root.left, current_depth, max_depth)\r\n        self.dfs(root.right, current_depth, max_depth)   \r\n```\r\ntime O(N) space O(logN)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067910204","body":"```\r\nclass Solution:\r\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\r\n        if p and q:\r\n            if p.val == q.val:\r\n                return True and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\r\n            else:\r\n                return False\r\n        elif not p and not q:\r\n            return True\r\n        else:\r\n            return False   \r\n```\r\n    \r\n    Time O(N) Space O(logN)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068231540","body":"```\r\nclass Solution:\r\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\r\n        ans = [0]\r\n        self.dfs(root, 0, ans)\r\n        return ans[0]\r\n    \r\n    def dfs(self, root, score, ans):\r\n        score = score*10 + root.val\r\n        if not root.left and not root.right:\r\n            ans[0] += score\r\n        else:\r\n            if root.left:\r\n                self.dfs(root.left, score, ans)\r\n            if root.right:\r\n                self.dfs(root.right, score, and)\r\n```\r\ntime O(N) space O(logN)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/16#issuecomment-2070428695","body":"```\r\nfrom collections import deque\r\nclass Solution:\r\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\r\n        q = deque([root])\r\n        ans = root.val\r\n        while q:\r\n            next_layer = []\r\n            while q:\r\n                n = q.popleft()\r\n                if n.left:\r\n                    next_layer.append(n.left)\r\n                if n.right:\r\n                    next_layer.append(n.right)\r\n            q = deque(next_layer)\r\n            if next_layer:\r\n                ans = next_layer[0].val\r\n        return ans\r\n```\r\ntime O(N) space(logN)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bwspsu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arinzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mdge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yin02":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elsa-zhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asur4s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlesugarman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhihaowan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"apockira":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guowei0223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuqianyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sj941127":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yongxi-zhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darwintk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"h-steven":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mischaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wurongronga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miduoliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyshenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y4h2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yoco323":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanshuiqiankun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"annabellhyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huibinny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggmybro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleetcodejourney":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"want2333":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"staringwhere":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryanbaiyansong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dou-yu-xuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cs12300":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiehw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aesir-idun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaldsk12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hxj2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhilin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yfu6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengsixing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"import-ant":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangqianqian202301":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"airwalkers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hjy-u":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"csthaha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zepherust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feefeefee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hughlin07":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huizsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hshen11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"horace7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzh0114":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dragonfcl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huifeng248":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sarah11qing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"el1as7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zcytm3000":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xb798298436":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"limbo42":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorapocket":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoeyzyzyzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jasonqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lp1506947671":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"texamc2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joemonkeylee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dominique9898":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wl678":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"meisgithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sye9286":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fuku-l":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangliqi1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richardtaok":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chocolate-emperor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjiahuan17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seanutf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyong-hub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erquaner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiujingxukong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x1aox1a":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"drinkmorekaik":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dinjufen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzmt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"munmust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan-jie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hktangshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpbc007":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linlizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"firehaosky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chao-cc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quieter2018":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeliu13":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaoq777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxiner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franciszq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangqinsen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"manwzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"soso1105":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenya-zhu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wty9sky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skyoct":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingzxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaodingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jyjsunny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aoxiangw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"enrilwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aswrise":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aneureka":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ljqchlsw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jingyuzhou123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dianlandu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jameswangxin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenxied":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuozhouzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shin-guid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bochengwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyo-tom":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uratora":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guitarys":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sosdogecoin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zol013":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lrwhc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwewwt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyk1337":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyu1131":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"diana21170648":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"61hhh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quaaaaaack":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acy925":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bi9potato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangsizhongbin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaoygcq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"catkathy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yqycs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuxinyu-znb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freesan44":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo660":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sencc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"randong22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beginner-jamji":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yzhyzhyzh123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunstrongchina":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dongzegithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"metsystem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miller-em":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorian-byte":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yizhewill":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaojunch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhouliuhuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beanza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kingxiaozhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ygnauh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzbwzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iambigchen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weiboshi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"master-guang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jennyjgao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangjay408":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chang-you":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rocjemaintiendrai":[null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044133557","body":"### 思路\n对数组进行两次遍历。\n第一次从左向右使用一个指针来记录最靠近当前字母左边的c的位置，并记录下距离。\n第二次从右向左同样使用指针来计算当前字母与最靠近的右边的c的距离并与第一次遍历的结果进行对比取最小值。\n\n### 代码\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        final int n = s.length();\n        int pos = -n;\n        int[] res = new int[n];\n\n        for(int i = 0; i < n; i++) {\n            if(s.charAt(i) == c) {\n                pos = i;\n            }\n            res[i] = i - pos;\n        }\n\n        for(int i = pos; i >= 0; i--) {\n            if(s.charAt(i) == c) {\n                pos = i;\n            }\n            res[i] = Math.min(res[i], pos - i);\n        }\n\n        return res;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(2N)，两次遍历\n- 空间复杂度：O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046502850","body":"### 思路\n额外创建一个数组int[] inc来记录对应的index上增加的值，index = Math.min(k, stack.size()) - 1。 当pop操作时，将pop出的值与inc[i]的值相加返回，inc[i-1]的值要加上inc[i]的值，之后inc[i]变为0.\n\n### 代码\nclass CustomStack {\n    int n;\n    int[] inc;\n    Stack<Integer> stack;\n\n    public CustomStack(int maxSize) {\n        n = maxSize;\n        inc = new int[n];\n        stack = new Stack<>();\n    }\n    \n    public void push(int x) {\n        if(stack.size() < n) {\n            stack.push(x);\n        }\n    }\n    \n    public int pop() {\n        int i = stack.size() - 1;\n        if(i < 0) {\n            return -1;\n        }\n        if(i > 0) {\n            inc[i - 1] += inc[i];\n        }\n        int res = stack.pop() + inc[i];\n        inc[i] = 0;\n        return res;\n    }\n    \n    public void increment(int k, int val) {\n        int i = Math.min(k, stack.size()) - 1;\n        if(i >= 0) {\n            inc[i] += val;\n        }\n    }\n}\n\n```\n\n**复杂度分析**\n- 时间复杂度：所有操作均为O(1)\n- 空间复杂度：开了新的数组所以为O(N)","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2058193567","body":"### 思路\n快慢指针 + 递归\n\n### 代码\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if(head == null) return null;\n        return toBST(head, null);\n    }\n\n    private TreeNode toBST(ListNode head, ListNode tail) {\n        if(head == tail) return null;\n\n        ListNode slow = head;\n        ListNode fast = head;\n        while(fast != tail && fast.next != tail) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        TreeNode newHead = new TreeNode(slow.val);\n        newHead.left = toBST(head, slow);\n        newHead.right = toBST(slow.next, tail);\n        return newHead;\n    }\n}\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(n)\n- 空间复杂度：O(tree height)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ainfinitedz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christ36":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengistchan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiyingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyli4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"momogir":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jamjid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freeroo2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ycan253":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laurallalala":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"danielyan86":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rennzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"larscheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qingkediguo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"adfvcdxv":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"javajianghu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chloe-c11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"verkru":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eggeggliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dr-kkk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinhma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"emergence23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"0christ1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junru281":[null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046543534","body":"Cool. 时隔半年再做, 终于可以很快做出来了. \n\n```python\nclass CustomStack:\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.array = []\n\n    def push(self, x: int) -> None:\n        if len(self.array) < self.maxSize:\n            self.array.append(x)\n\n    def pop(self) -> int:\n        if len(self.array) == 0:\n            return -1\n        else:\n            return self.array.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.array))):\n            self.array[i] += val\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061538300","body":"```python\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        data = set()\n        while headA:\n            data.add(headA)\n            headA = headA.next\n\n        while headB:\n            if headB in data:\n                return headB\n            else: headB = headB.next\n\n```","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067696137","body":"```python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        # 不用check的原因是,我们已经在leaf node的时候return 0了\n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        return max(left_depth, right_depth) + 1\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joe-the-plumber":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jsaki":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"witerth":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ludwig-ll":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luster-lyl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smallppgirl":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2043123861","body":"思路： 遍历 数组和整数k的每一个数字，然后逐位相加，如果遇到进位，加在下一轮\n算法\n\n```python\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        i = len(A) - 1\n        while K:\n            A[i] += K\n            K, A[i] = A[i] // 10, A[i] % 10\n            i -= 1\n\n            if i < 0 and K:\n                A.insert(0,0)\n                i = 0\n        return A\n```\n\n时间复杂：O(len(num)+len(K))\n空间复杂： O(max(len(num)+len(K)))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045543788","body":"思路：遍历找到所有的c存入listc，然后遍历整个list依次计算所有绝对值差，找出最小的追加进入一个新的list\r\n\r\n代码\r\n\r\n```python\r\nclass Solution:\r\n    def shortestToChar(self, s: str, c: str) -> List[int]:\r\n        res = []\r\n        cpos = []\r\n        for i in range(len(s)):\r\n            if s[i] == c:\r\n                cpos.append(i)\r\n        for i in range(len(s)):\r\n            nearest = len(s)\r\n            for p in cpos:\r\n                dis = abs(i-p)\r\n                if dis < nearest:\r\n                    nearest = dis\r\n            res.append(nearest)\r\n        return res\r\n                \r\n```\r\n\r\n时间复杂度： O(nm)  #m 是c 的个数\r\n空间： O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2050014346","body":"思路： stack \n代码：\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        res = \"\"\n        mul = 0\n        for ch in s:\n            if ch == \"[\":\n                stack.append((mul, res))\n                res, mul = \"\", 0\n            elif ch == \"]\":\n                cur_mul, last_res = stack.pop()\n                res = last_res + cur_mul * res\n            elif \"0\" <= ch <= \"9\":\n                mul = mul * 10 + int(ch)\n            else:\n                res += ch\n        return res\n```\n\n时间 ：O(n)\n空间： O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053676862","body":"思路：未排序 数组 和排序数组 遍历，当满足前N个元素出现频次完全一致， 则前N 个元素可以成为一组，以此遍历整个数组找出一共多少组\n\n代码\n```python\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        cnt = Counter()\n        res = 0\n        for a, b in zip(arr, sorted(arr)):\n            cnt[a] += 1\n            if cnt[a] == 0:\n                del cnt[a]\n            cnt[b] -= 1\n            if cnt[b] == 0:\n                del cnt[b]\n            if len(cnt) == 0:\n                res += 1\n        return res\n```\n时间复杂 O(nlogn), 排序复杂度为 O(nlogn)\n空间复杂度 O(n), ","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2057199061","body":"class Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        newHead = head.next\n        head.next = self.swapPairs(newHead.next)\n        newHead.next = head\n        return newHead\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2064328518","body":"思路 快慢指针\r\n\r\n代码\r\n```python\r\nclass Solution:\r\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        f, s = head, head\r\n        while True:\r\n            if not (f and f.next): \r\n                return\r\n            f, s = f.next.next, s.next\r\n            if f == s:\r\n                break\r\n        f = head\r\n        while f != s:\r\n            f, s = f.next, s.next\r\n        return f\r\n```\r\n时间 O(n)\r\n空间 O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"realduxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awilekong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwz223":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2041912942","body":"```javascript\r\nvar addToArrayForm = function (num, k) {\r\n  const knum = k.toString().split('').reverse();\r\n  num = num.reverse();\r\n  const max = Math.max(num.length, knum.length);\r\n  let isUp = 0;\r\n  let ni = 0,\r\n    ki = 0,\r\n    sub = 0;\r\n  for (let i = 0; i < max; i++) {\r\n    ni = Number(num[i]) || 0;\r\n    ki = Number(knum[i]) || 0;\r\n    sub = ni + ki + isUp;\r\n    num[i] = sub % 10;\r\n    isUp = Number(sub >= 10);\r\n  }\r\n  if (isUp) num.push(1);\r\n  return num.reverse();\r\n};\r\n```\r\n\r\ntime：O(n)\r\nspace：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044684145","body":"### 思路\n采用双指针的方式进行求解，分别从两个方向进行遍历，头部 -> 尾部，尾部 -> 头部，通过取最小值的方式将之前保存的距离进行覆盖\n\n### 代码\n```var shortestToChar = function (s, c) {\n  let i = 0;\n  let k = s.length - 1;\n  let iKey = -1;\n  let kKey = -1;\n  let arr = [];\n  while (i < s.length) {\n    if (s[i] !== c) {\n      arr[i] = Math.min(iKey >= 0 ? i - iKey : 10000, arr[i] || 10000);\n    } else {\n      iKey = i;\n      arr[i] = 0;\n    }\n    if (s[k] !== c) {\n      arr[k] = Math.min(kKey >= 0 ? kKey - k : 10000, arr[k] || 10000);\n    } else {\n      kKey = k;\n      arr[k] = 0;\n    }\n    i++;\n    k--;\n  }\n  return arr;\n};\n```\n### 复杂度分析\n\n时间复杂度：使用了一层循环 O(N)\n空间复杂度：创建了一个数组和多个变量，数组长度为s的长度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2047192573","body":"```javascript\nclass CustomStack {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n  }\n  /**\n   * 最大值\n   * @param {number} maxSize\n   */\n  maxSize = 0;\n  /**\n   * 栈空间\n   */\n  stack = [];\n  /**\n   * 初始化\n   * @param {number} maxSize\n   */\n  /**\n   * 入栈\n   * @param {number} maxSize\n   * @return {void}\n   */\n  push(x) {\n    if (this.stack.length < this.maxSize) this.stack.push(x);\n    return null;\n  }\n  /**\n   * 出栈\n   * @param {number} x\n   * @return {number}\n   */\n  pop(x) {\n    if (this.stack.length > 0) return this.stack.pop();\n    return -1;\n  }\n  /**\n   * 增加值操作\n   * @param {number} k\n   * @param {number} val\n   */\n  increment(k, val) {\n    for (let i = 0; i < k && i < this.stack.length; i++) {\n      this.stack[i] += val;\n    }\n    return null;\n  }\n}\n\n// 输入：\nconst action = ['CustomStack', 'push', 'push', 'pop', 'push', 'push', 'push', 'increment', 'increment', 'pop', 'pop', 'pop', 'pop'];\nconst param = [[3], [1], [2], [], [2], [3], [4], [5, 100], [2, 100], [], [], [], []];\n\nconst run = (action, param) => {\n  let stack = null;\n  let result = [];\n  let res = null;\n  action.map((a, i) => {\n    if (a === 'CustomStack') {\n      stack = new CustomStack(...param[i]);\n      res = null;\n    } else {\n      res = stack[a](...param[i]);\n    }\n\n    result.push(res);\n  });\n  return result;\n};\n\nconsole.log(run(action, param));\n```\n\n### 复杂度分析\n时间复杂度： push、pop: O(1)   increment：O(k)\n空间复杂度：O(maxsize)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049536790","body":"### 思路\n定义了三个栈空间，分别存放返回数据、循环次数数组、left坐标数组，通过同步进栈出栈保持同步\n\n\n### 答案\n```javascript\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function (s) {\n  let stack = [];\n  let numsStack = [];\n  let leftStack = [];\n  let num = 0;\n  let left = 0;\n  for (let i = 0; i < s.length; i++) {\n    k = s[i];\n    if (k === '[') {\n      numsStack.push(num);\n      leftStack.push(i);\n      num = 0;\n    } else if (k === ']') {\n      num = numsStack.pop();\n      left = leftStack.pop();\n\n      num--;\n      if (num > 0) {\n        i = left - 1;\n      }\n    } else if (!isNaN(Number(k))) {\n      num = num > 0 ? num * 10 + Number(k) : Number(k);\n    } else {\n      num = 0;\n      stack.push(k);\n    }\n  }\n  return stack.join('');\n};\n```\n \n### 复杂度分析  O(n2)\n### 空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051571539","body":" ## 代码\n```javascript\nclass Stack {\n  constructor() {\n    this.stack = [];\n  }\n  push(x) {\n    this.stack.push(x);\n  }\n  pop() {\n    return this.stack.pop();\n  }\n  size() {\n    return this.stack.length;\n  }\n\n  empty() {\n    return this.stack.length === 0;\n  }\n}\n\nclass MyQueue {\n  constructor() {\n    this.stack = new Stack();\n    this.queue = new Stack();\n  }\n\n  push(x) {\n    this.queue.push(x);\n  }\n\n  pop() {\n    if (this.queue.size() === 0) return null;\n    while (this.queue.size() > 1) {\n      this.stack.push(this.queue.pop());\n    }\n    const head = this.queue.pop();\n    while (this.stack.size() > 0) {\n      this.queue.push(this.stack.pop());\n    }\n    return head;\n  }\n  peek() {\n    if (this.queue.size() === 0) return null;\n    while (this.queue.size() > 1) {\n      this.stack.push(this.queue.pop());\n    }\n    const head = this.queue.pop();\n    this.queue.push(head)\n    while (this.stack.size() > 0) {\n      this.queue.push(this.stack.pop());\n    }\n    return head;\n  }\n  empty() {\n    return this.queue.size() === 0;\n  }\n}```\n\n时间复杂度\npush：O(1)\npop：O(2N) 两次循环\npeek: O(2N) 两次循环\n\n空间复杂度  O（1）\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2056636366","body":"### 代码\n\n```js\nvar swapPairs = function (head) {\n    if (head === null || head.next === null) return head;\n\n    let tmp = head.next;\n    head.next = swapPairs(tmp.next);\n    tmp.next = head;\n    return tmp;\n};\n\n```\n\n**复杂度分析**\n\n- 时间复杂度 O（N）\n- 空间复杂度 每两个节点的交换需要借助一个节点， O（1/2N）\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2060990707","body":"### 思路\n先循环headA，把链表1的所有节点保存起来，然后遍历链表2，找到相同的节点，返回该节点的next\n\n### 代码\n\n```js\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function (headA, headB) {\n    const visited = new Set();\n    let temp = headA;\n    while (temp !== null) {\n        visited.add(temp);\n        temp = temp.next;\n    }\n    temp = headB;\n\n    while (temp !== null) {\n        if (visited.has(temp)) {\n            return temp;\n        }\n        temp = temp.next;\n    }\n\n    return null\n};\n```\n\n### 复杂度分析\n\n- 时间复杂度: O(m + n)\n- 空间复杂度: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2063536306","body":"### 代码\n```javascript\nvar detectCycle = function (head) {\n  let temp = head;\n  const set = new Set();\n  while (temp) {\n    if (set.has(temp)) return temp;\n    set.add(temp);\n    temp = temp.next;\n  }\n  return null\n};\n```\n\n### 复杂度分析\n时间复杂度 O（N）\n空间复杂度O（N）\n\n\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2069053458","body":"```javascript\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar maxDepth = function(root) {\r\n    let i = 0\r\n    const getDepth = (node,index)=>{\r\n        if(!root || root.val === null) return index\r\n        index ++ \r\n        let left  = index\r\n        let right = index\r\n        if(node.left) {\r\n            left = getDepth(node.left,index)\r\n        }\r\n        if (node.right){\r\n           right = getDepth(node.right,index)\r\n        }\r\n        return Math.max(left,right) \r\n    }\r\n  \r\n    return getDepth(root, 0)\r\n};\r\n```\r\n\r\n### 复杂度分析\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)\r\n","onTime":false},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/16#issuecomment-2071807515","body":"### 思路\n采用深度遍历的方式，从右子节点开始深度遍历，记录left值和maxDeep的值，采用从右往左的方式的目的是为了遍历同一层级的时候左节点值可以对右节点值进行覆盖，这里的核心逻辑就是判断当前deep是否大于等于maxDeep，如果大于则代表是更深的一层，所以对left进行一个重新赋值\n\n### 代码\n\n```js\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n    let left = root.val; \n    let maxDeep = 0;\n    const order = (node, deep) => {\n        if(!node || node.val === null) return \n        if(deep >= maxDeep){\n            maxDeep = deep\n            left = node.val\n        }\n        order(node.right, deep + 1);\n        order(node.left, deep + 1);\n    }\n    order(root,1)\n    return left\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度 O(N) N为二叉树的节点个数\n- 空间复杂度 O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjinzhepro":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042264449","body":"## 题解\r\n\r\n```js\r\nvar addToArrayForm = function(num, k) {\r\n  const arr = [];\r\n  let carry = 0;\r\n  for (let i = num.length - 1; i >= 0; i--) {\r\n    let sum = num[i] + k % 10 + carry;\r\n    carry = Math.floor(sum / 10);\r\n    sum = sum % 10;\r\n    arr.unshift(sum);\r\n    k = Math.floor(k / 10); \r\n  }\r\n\r\n  for (; k > 0 || carry > 0 ;) {\r\n    let sum = k % 10 + carry;\r\n    carry = Math.floor(sum / 10);\r\n    arr.unshift(sum % 10);\r\n    k = Math.floor(k / 10);\r\n  }\r\n\r\n  return arr;\r\n};\r\n```\r\n\r\n## 复杂度\r\n\r\n时间复杂度： 取决于num的长度和k的大小(取最大)：O(n)\r\n空间复杂度：常量忽略，只定义了一个arr：O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044578441","body":"## 题解\n```js\nfunction shortestToChar(s, c) {\n  var arr = new Array(s.length);\n  var left = -Infinity\n  var right = s.indexOf(c)\n  for (var i = 0; i < s.length; i++) {\n    if(i === right){\n      left = right\n      right = s.indexOf(c, right+1)\n    }\n    arr[i] = Math.min(right < 0 ? Infinity : right - i, i - left)\n  }\n  console.log(arr)\n  return arr\n}\n```\n\n## 复杂度分析\n双指针，只有一次循环，时间复杂度O(n)\n空间复杂度取决去数据规模 O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046658210","body":"## 题解\n```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n  this.stack = []\n  this.length  = maxSize\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n  if(this.stack.length !== this.length){\n    this.stack.push(x);\n  }\n\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n  if(this.stack.length === 0) return -1\n  return this.stack.pop();\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n  const l =  k  > this.stack.length ? this.stack.length : k\n  for(let i = 0; i < l; i++) {\n    this.stack[i] += val\n  }\n};\n\n```\n\n## 复杂度\n时间复杂度：push、pop O(1) increment O(n)\n空间复杂度：push、pop O(1) increment O(n)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049545313","body":"## 思路\n使用栈结构，存放string和num，然后匹配`]`依次推出\n```js\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n  var stack = []\n  var string = ''\n  var num = 0\n  for (var i = 0; i < s.length; i++) {\n    if(!isNaN(s[i])) {\n      num = num * 10 + Number(s[i])\n    }else if(s[i] === '[') {\n      stack.push([string, num])\n      string = ''\n      num = 0\n    }else if(s[i] === ']'){\n      const val = stack.pop()\n      string = val[0] + string.repeat(val[1])\n    }else{\n      string += s[i]\n    }\n  }\n  console.log(string)\n  return string\n};\n```\n\n## 复杂度\n时间复杂度O(n)\n空间复杂度O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2052022040","body":"```js\n\nvar MyQueue = function() {\n    this.stack1 = []; \n    this.stack2 = []; \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.stack1.push(x);\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    if (this.stack2.length === 0) {\n        while (this.stack1.length > 0) {\n            this.stack2.push(this.stack1.pop());\n        }\n    }\n    return this.stack2.pop();\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    if (this.stack2.length === 0) {\n        while (this.stack1.length > 0) {\n            this.stack2.push(this.stack1.pop());\n        }\n    }\n    return this.stack2[this.stack2.length - 1];\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return this.stack1.length === 0 && this.stack2.length === 0;\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n```\n\n时间复杂度 push, pop, peek, O(N); empty O(1)\n空间复杂度 O(N)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2056944475","body":"```js\r\nvar rotateRight = function(head, k) {\r\n    if (!head || !head.next || k === 0) {\r\n        return head;\r\n    }\r\n\r\n    let length = 1;\r\n    let tail = head;\r\n    while (tail.next) {\r\n        tail = tail.next;\r\n        length++;\r\n    }\r\n\r\n    k = k % length;\r\n\r\n    if (k === 0) {\r\n        return head;\r\n    }\r\n\r\n    tail.next = head;\r\n\r\n    let newTail = head;\r\n    for (let i = 0; i < length - k - 1; i++) {\r\n        newTail = newTail.next;\r\n    }\r\n\r\n    let newHead = newTail.next;\r\n\r\n    newTail.next = null;\r\n\r\n    return newHead;\r\n};\r\n\r\n```\r\n\r\n时间复杂度O(n) 空间复杂度O(1)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"atom-set":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042268392","body":"### 思路\r\n\r\n这个题目可以理解为大数相加的变形。\r\n\r\n- step1: 去 num 和 k 的最大长度\r\n- step2: 对 num 和 k(k 需要转换为数组) 进行前置补 0\r\n- step3: 逆序遍历按位相加，同时需要考虑是否有进位(大于 9，即有进位)\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * @param {number[]} num\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar addToArrayForm = function (num, k) {\r\n  if (num === 0) return k;\r\n\r\n  // k 计算 k 的长度\r\n  var kLen = 0;\r\n  var secondNum = [];\r\n  var firstNum = [];\r\n  var kLen = String(k).length;\r\n  // 最大长度\r\n  var maxLen = num.length > kLen ? num.length : kLen;\r\n\r\n  // 补0\r\n  for (var j = maxLen - 1; j >= 0; j--) {\r\n    if (j > num.length - 1) {\r\n      firstNum.push(0);\r\n    } else {\r\n      firstNum.push(num.shift());\r\n    }\r\n  }\r\n\r\n  for (var i = maxLen - 1; i >= 0; i--) {\r\n    if (i > kLen.length - 1) {\r\n      secondNum.push(0);\r\n    } else {\r\n      secondNum.unshift(k % 10);\r\n      k = (k - (k % 10)) / 10;\r\n    }\r\n  }\r\n\r\n  // 遍历相加\r\n  var bit = 0;\r\n  for (var k = maxLen - 1; k >= 0; k--) {\r\n    var sum = firstNum[k] + secondNum[k] + bit;\r\n    if (sum >= 10) {\r\n      secondNum[k] = sum % 10;\r\n      bit = (sum - (sum % 10)) / 10;\r\n    } else {\r\n      bit = 0;\r\n      secondNum[k] = sum;\r\n    }\r\n  }\r\n\r\n  if (bit > 0) {\r\n    return [bit, ...secondNum];\r\n  }\r\n\r\n  return secondNum;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n对数据进补 0 和按位相加，进行了遍历，时间复杂度为 O(N)；\r\n\r\n声明了 firstNum 和 secondNum 临时变量存放数据，空间负责度为 O(N)\r\n\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044488976","body":"### 思路\r\n\r\n- 基本思想：从题目里可以得知，会用到回溯思想：字符 C 出现不止一次，当第 N + 1 次 (N >=1) 出现时，需要进行判断第 N + 1 次出现的位置和 第 N 次出现的位置之间的元素距离进行比对，取最小的那个距离。\r\n- 数据结构\r\n  - 栈: 结果存到到堆栈里，因为回溯会用到数据结果栈\r\n  - 队列: 从栈顶弹窗的元素，再次进栈需要用队列，先出栈的元素先进栈\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * @param {string} s\r\n * @param {character} c\r\n * @return {number[]}\r\n */\r\nvar shortestToChar = function (s, c) {\r\n  // 存放结果\r\n  var res = [];\r\n  var targetPos = -1;\r\n\r\n  // step1: 先将 s 转换成数组\r\n  var sArr = s.split(\"\");\r\n\r\n  // step2: 遍历 sArr\r\n  for (var i = 0; i < sArr.length; i++) {\r\n    if (sArr[i] !== c) {\r\n      // 长度默认设置为 1\r\n      res.push(\r\n        targetPos === -1\r\n          ? 10000\r\n          : Math.abs(i - (targetPos === -1 ? 0 : targetPos))\r\n      );\r\n      continue;\r\n    }\r\n    console.log(\"step1: res:\", res, targetPos, i);\r\n\r\n    if (sArr[i] === c) {\r\n      var tempArr = [];\r\n      // 先出栈到距离为0的元素\r\n      while (res.length > 0 && res[res.length - 1] !== 0) {\r\n        tempArr.unshift(res.pop());\r\n      }\r\n      console.log(\"step2: tempArr:\", tempArr);\r\n\r\n      // 再次进栈校验距离\r\n      while (tempArr.length > 0) {\r\n        var len = tempArr.length;\r\n        const head = tempArr.shift();\r\n        console.log(\"head:\", head);\r\n        if (head > len) {\r\n          res.push(len);\r\n        } else {\r\n          res.push(head);\r\n        }\r\n      }\r\n      res.push(0);\r\n      console.log(\"step3: res:\", res, targetPos, i);\r\n      targetPos = i;\r\n      continue;\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n空间复杂度取决于临时队列的长度，即 O(N)\r\n\r\n时间复杂度取决于回溯元素的长度，即 O(N)，遍历的时间复杂度也是 O(N)，这 2 个是叠加关系，及时间复杂度是 O(N)\r\n\r\n- 时间复杂度：O(N)\r\n- 空间复杂度：O(N)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046743925","body":"\r\n### 思路\r\n\r\n- 栈的结构特性: 先进先出，只能从一端进栈和出栈\r\n- 自定义栈类的要求:\r\n  - 限制了栈的长度，栈满了就不允许进栈\r\n  - 新增了 inc 操作\r\n\r\n可以借助数组数据结构模拟栈，进栈调用 `push` API，出栈调用 `pop` API。进栈的时候判断数组长度是不是大于 maxSize， 出栈的时候判断数组长度是否为 0\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n  this.maxSize = maxSize;\r\n  this.stack = [];\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n  if (this.stack.length < this.maxSize) {\r\n    this.stack.push(x);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n  if (this.stack.length > 0) {\r\n    return this.stack.pop();\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n * @param {number} k\r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n  var temp = [];\r\n  for (let i = 0; i < k; i++) {\r\n    if (this.stack.length > 0) {\r\n      temp.push(this.stack.shift());\r\n    }\r\n  }\r\n\r\n  while (temp.length > 0) {\r\n    const v = temp.pop();\r\n    this.stack.unshift(v + val);\r\n  }\r\n  return null;\r\n};\r\n...\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度\r\n  - 初始化（构造函数）: O(1)\r\n  - push: O(1)\r\n  - pop: O(1)\r\n  - inc: O(k)\r\n- 空间复杂度：O(maxSize) [这里用到了一个长度为 maxSize 的数组作为辅助空间]\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2048884473","body":"\r\n### 思路\r\n\r\n- 可以理解为括号匹配的升级版\r\n- 遍历字符串，借助数组存放过程态\r\n- 逆向遍历字符串，寻找 `[ ]` 之间包裹的字符串\r\n- 继续往前寻找数字，遇到字符结束\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar decodeString = function (s) {\r\n  var num = [];\r\n  var stack = [];\r\n  var len = String(s).length;\r\n  // 标识是否遇到\r\n  var flag = 0;\r\n\r\n  for (var p = len - 1; p >= 0; p--) {\r\n    var ch = s.charAt(p);\r\n    // 非数字进入\r\n    if (isNaN(Number(ch))) {\r\n      if (flag === 0) {\r\n        stack.push(ch);\r\n        continue;\r\n      }\r\n\r\n      // 数字\r\n      var k = Number(num.join(\"\"));\r\n      var stop = false;\r\n      var sub = [];\r\n      // console.log(\"k:\", stack, k);\r\n\r\n      while (!stop) {\r\n        var t = stack.pop();\r\n        if (t === \"[\") {\r\n          continue;\r\n        }\r\n        if (t === \"]\") {\r\n          // 重复 k 次\r\n          for (var n = 0; n < k; n++) {\r\n            stack.push(sub.join(\"\"));\r\n          }\r\n          stop = true;\r\n          continue;\r\n        } else {\r\n          sub.push(t);\r\n        }\r\n      }\r\n      stack.push(ch);\r\n      // console.log(\"step:\", stack, p);\r\n      flag = 0;\r\n      num = [];\r\n      sub = [];\r\n      continue;\r\n    } else {\r\n      num.unshift(ch);\r\n      flag = 1;\r\n    }\r\n  }\r\n\r\n  // console.log(\"step:\", stack, num);\r\n  if (num.length > 0) {\r\n    var k = Number(num.join(\"\"));\r\n    var stop = false;\r\n    var sub = [];\r\n    while (!stop) {\r\n      var t = stack.pop();\r\n      if (t === \"[\") {\r\n        continue;\r\n      }\r\n      if (t === \"]\") {\r\n        // 重复 k 次\r\n        // console.log(\"sub:\", sub, k);\r\n        for (var n = 0; n < k; n++) {\r\n          stack.push(sub.join(\"\"));\r\n        }\r\n        stop = true;\r\n        break;\r\n      }\r\n      sub.push(t);\r\n    }\r\n  }\r\n\r\n  return stack.reverse().join(\"\");\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051103778","body":"### 思路\r\n\r\n- 先用数组实现 Stack，支持的 API 有 push、pop、empty、size，其中 push、pop 时间复杂度是 O(1)，empty、size 时间复杂度是 O(N)\r\n- 队列的 push 操作调用栈的 push 操作即可\r\n- 队列的 peek 和 pop 操作是栈底元素，可以利用中间栈，将元素出栈放到中间栈，操作完后再把中间栈元素移到栈即可\r\n- 队列的 empty 操作调用栈的 empty 操作即可\r\n- 队列的 size 操作调用栈的 size 操作即可\r\n\r\n### 代码\r\n\r\n```js\r\nvar Stack = function () {\r\n  this.stack = [];\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nStack.prototype.push = function (x) {\r\n  this.stack.push(x);\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nStack.prototype.pop = function () {\r\n  if (this.stack.length > 0) {\r\n    return this.stack.pop();\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nStack.prototype.empty = function () {\r\n  return this.stack.length === 0;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nStack.prototype.size = function () {\r\n  return this.stack.length;\r\n};\r\n\r\nvar MyQueue = function () {\r\n  this.stack = new Stack();\r\n  this.queue = new Stack();\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyQueue.prototype.push = function (x) {\r\n  this.queue.push(x);\r\n  return null;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMyQueue.prototype.pop = function () {\r\n  if (this.queue.size() === 0) {\r\n    return null;\r\n  }\r\n\r\n  while (this.queue.size() > 1) {\r\n    this.stack.push(this.queue.pop());\r\n  }\r\n\r\n  var head = this.queue.pop();\r\n\r\n  while (this.stack.size() > 0) {\r\n    this.queue.push(this.stack.pop());\r\n  }\r\n  return head;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMyQueue.prototype.peek = function () {\r\n  if (this.queue.size() === 0) {\r\n    return null;\r\n  }\r\n\r\n  while (this.queue.size() > 1) {\r\n    this.stack.push(this.queue.pop());\r\n  }\r\n\r\n  var head = this.queue.pop();\r\n\r\n  this.queue.push(head);\r\n\r\n  while (this.stack.size() > 0) {\r\n    this.queue.push(this.stack.pop());\r\n  }\r\n\r\n  return head;\r\n};\r\n\r\n/**\r\n * @return {boolean}\r\n */\r\nMyQueue.prototype.empty = function () {\r\n  return this.queue.empty();\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度\r\n  - push: O(1)\r\n  - pop: O(N)，要把栈里元素都先遍历存起来\r\n  - peek: O(N)，要把栈里元素都先遍历存起来\r\n  - empty: O(N)，依赖于栈的 empty 时间复杂度\r\n  - size: O(N)，依赖于栈的 size 时间复杂度\r\n- 空间复杂度：O(N)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2056413454","body":"\r\n### 思路\r\n\r\n- step1: 先对链表进行翻转，同时记录链表长度(len)，同时记录最后一个节点的前驱节点(tailPrev) 和头节点 newHead\r\n- step2: 对 k 进行裁剪，只需要移动 k % len 次\r\n- step3: 每次移动时候，进行操作\r\n\r\n```\r\n// 暂存头结点\r\nvar headNextNode = newHead.next;\r\n// 最后一个节点的前驱节点后移\r\ntailPrev = tailPrev.next;\r\n// 更新最后一个节点为暂存的头结点\r\ntailPrev.next = newHead;\r\n// 切断链接\r\ntailPrev.next.next = null;\r\n// 更新头结点\r\nnewHead = headNextNode;\r\n```\r\n\r\n- step4: 再次进行翻转，输出\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @param {number} k\r\n * @return {ListNode}\r\n */\r\nvar rotateRight = function (head, k) {\r\n  if (!head || (head && !head.next) || k === 0) {\r\n    return head;\r\n  }\r\n\r\n  var newHead = null;\r\n  var tailPrev = null;\r\n  var len = 0;\r\n\r\n  // 头节点\r\n  while (head) {\r\n    //  1->2->3->4->5->NULL\r\n    const nextNode = head.next;\r\n\r\n    // 头插法。从头往后插入\r\n    head.next = newHead;\r\n    newHead = head;\r\n\r\n    head = nextNode;\r\n\r\n    if (newHead && newHead.next && !newHead.next.next) {\r\n      tailPrev = newHead;\r\n    }\r\n    len++;\r\n  }\r\n\r\n  for (var i = 0; i < k % len; i++) {\r\n    var headNextNode = newHead.next;\r\n    tailPrev = tailPrev.next;\r\n    tailPrev.next = newHead;\r\n    tailPrev.next.next = null;\r\n    newHead = headNextNode;\r\n  }\r\n\r\n  while (newHead) {\r\n    const nextNode = newHead.next;\r\n    // 头插法。从头往后插入\r\n    newHead.next = head;\r\n    head = newHead;\r\n\r\n    newHead = nextNode;\r\n  }\r\n\r\n  return head;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n对链表进行遍历，时间复杂度是 O(N)\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度: O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2058544224","body":"### 思路\r\n\r\n#### 分支 1: 边界条件判断，直接返回 head\r\n\r\n- 链表为空\r\n- 链表长度为 1\r\n\r\n#### 分支 2: 两两交互\r\n\r\n- step1: 定义两个指针，`p1` 和 `p2`, `p2` 是 `p1` 的后继\r\n- step2: 迭代逻辑，`p1` 和 `p2` 都不为看空，先进行交互，然后分别前进 `2` 位\r\n- step3: 退出条件：`p1` 和 `p2` 至少有 `1` 个为空\r\n\r\n### 代码\r\n\r\n```js\r\n/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\nvar swapPairs = function (head) {\r\n  // 边界条件判断\r\n  if (!head || (head && !head.next)) {\r\n    return head;\r\n  }\r\n\r\n  var p1 = new ListNode(0);\r\n  var p2 = new ListNode(0);\r\n  var p3 = new ListNode(0);\r\n  var p4 = new ListNode(0);\r\n  p1 = head;\r\n  p2 = p1.next;\r\n  p3.next = head;\r\n\r\n  // p3 -> 1 -> 2\r\n  // step1: p3 -> 1 <- 2\r\n  // step2: 1 <- 2 <- p3\r\n\r\n  while (p2) {\r\n    var nextP1 = p2.next;\r\n    var nextP2 = p2.next ? p2.next.next : null;\r\n    p2.next = p1;\r\n    p3.next = p2;\r\n    p1.next = null;\r\n    if (!p4.next) {\r\n      p4.next = p3.next;\r\n    }\r\n\r\n    p3 = p3.next.next;\r\n\r\n    p1 = nextP1;\r\n    p2 = nextP2;\r\n  }\r\n\r\n  if (p1) {\r\n    p3.next = p1;\r\n  }\r\n  return p4.next;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n对链表进行一次遍历即可\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度: O(1)\r\n","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2060275722","body":"### 思路\r\n题目要求不允许对链表进行修改，可以借助哈希表数据结果\r\n- step1: 先将链表 A 的数据都存到哈希表中\r\n- step2: 遍历链表 B，判断是否出现过，出现过返回\r\n- \r\n### 代码\r\n\r\n```js\r\n/**\r\n * @param {ListNode} headA\r\n * @param {ListNode} headB\r\n * @return {ListNode}\r\n */\r\nvar getIntersectionNode = function (headA, headB) {\r\n  const visited = new Set();\r\n  let temp = headA;\r\n  while (temp !== null) {\r\n    visited.add(temp);\r\n    temp = temp.next;\r\n  }\r\n\r\n  temp = headB;\r\n  while (temp !== null) {\r\n    if (visited.has(temp)) {\r\n      return temp;\r\n    }\r\n    temp = temp.next;\r\n  }\r\n  return null;\r\n};\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2062932994","body":"\r\n- 快慢指针，快指针每次走 2 步，慢指针每次走 1 步\r\n- 当快慢指针第一次相遇时，块指针和头结点分别走 1 步，再次相遇的节点就是环的入口节点\r\n\r\n```js\r\nvar detectCycle = function (head) {\r\n  var p1 = new ListNode(0);\r\n  var p2 = new ListNode(0);\r\n  var ptr = new ListNode(0);\r\n  p1.next = head;\r\n  p2.next = head;\r\n  ptr.next = head;\r\n\r\n  while (p1.next && p2.next) {\r\n    p1 = p1.next;\r\n    p2 = p2.next ? p2.next.next : null;\r\n    if (!p2) {\r\n      return null;\r\n    }\r\n\r\n    if (p1 === p2) {\r\n      while (ptr !== p2) {\r\n        ptr = ptr.next;\r\n        p2 = p2.next;\r\n      }\r\n      return ptr;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2065894177","body":"### 思路\r\n\r\n- LRU 要实现 get 和 set 操作复杂度为 O(1)，可以借助哈希表和双链表数据结构\r\n- LRU: 最近最少使用\r\n  - 即每次访问元素后，需要将其放到最前面\r\n  - 容量满了，添加的元素替换掉最后一个元素\r\n- 哈希表存放的是节点，通过节点可以获取前驱和后继指针\r\n- 通过哈希表实现 get 操作时间复杂度为 O(1) 的\r\n- 通过双链表实现 push 操作为 O(1) 时间复杂度\r\n\r\n### 代码\r\n\r\n```js\r\nclass DoubleListNode {\r\n  constructor(key, val, next, prev) {\r\n    this.key = key;\r\n    this.val = val;\r\n    this.next = next === undefined ? null : next;\r\n    this.prev = prev === undefined ? null : prev;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} capacity\r\n */\r\nvar LRUCache = function (capacity) {\r\n  this.capacity = capacity;\r\n  this.hashMap = new Map();\r\n  this.head = new DoubleListNode();\r\n  this.tail = new DoubleListNode();\r\n};\r\n\r\n/**\r\n * @param {number} key\r\n * @return {number}\r\n */\r\nLRUCache.prototype.get = function (key) {\r\n  if (this.capacity === 1) {\r\n    return this.hashMap.has(key) ? this.hashMap.get(key).val : -1;\r\n  }\r\n  if (this.hashMap.has(key)) {\r\n    var currentNode = this.hashMap.get(key);\r\n    var nextNode = currentNode.next;\r\n    var prevNode = currentNode.prev;\r\n\r\n    if (nextNode) {\r\n      prevNode.next = nextNode;\r\n      nextNode.prev = prevNode;\r\n    } else {\r\n      prevNode.next = null;\r\n    }\r\n\r\n    var headNextNode = this.head.next;\r\n    currentNode.next = headNextNode;\r\n    currentNode.prev = this.head;\r\n\r\n    if (headNextNode) {\r\n      headNextNode.prev = currentNode;\r\n    }\r\n    this.head.next = currentNode;\r\n\r\n    var p2 = this.head.next;\r\n    while (p2) {\r\n      if (!p2.next) {\r\n        this.tail.next = p2;\r\n      }\r\n      p2 = p2.next;\r\n    }\r\n\r\n    return this.hashMap.get(key).val;\r\n  }\r\n  return -1;\r\n};\r\n\r\n/**\r\n * @param {number} key\r\n * @param {number} value\r\n * @return {void}\r\n */\r\nLRUCache.prototype.put = function (key, value) {\r\n  // 容量为1\r\n  if (this.capacity === 1) {\r\n    this.hashMap.clear();\r\n    this.hashMap.set(key, new DoubleListNode(key, value));\r\n    return null;\r\n  }\r\n  // currentNode\r\n  var currentNode = new DoubleListNode(key, value);\r\n\r\n  if (this.capacity > this.hashMap.size) {\r\n    if (this.hashMap.has(key)) {\r\n      var temp = this.hashMap.get(key);\r\n      temp.val = value;\r\n      console.log(\"value:\", key, value, temp.val, temp.key);\r\n      this.hashMap.set(key, temp);\r\n      this.get(key);\r\n      return null;\r\n    }\r\n    // 容量不满\r\n    // head <-> a <-> b\r\n    var headNext = this.head.next;\r\n\r\n    currentNode.next = headNext;\r\n    if (headNext) {\r\n      headNext.prev = currentNode;\r\n    }\r\n\r\n    this.head.next = currentNode;\r\n    currentNode.prev = this.head;\r\n\r\n    if (!this.tail.next) {\r\n      this.tail.next = currentNode;\r\n    }\r\n    this.hashMap.set(key, currentNode);\r\n  } else {\r\n    if (this.hashMap.has(key)) {\r\n      var temp = this.hashMap.get(key);\r\n      temp.val = value;\r\n      console.log(\"value:\", key, value, temp.val, temp.key);\r\n      this.hashMap.set(key, temp);\r\n      this.get(key);\r\n      return null;\r\n    }\r\n\r\n    // 容量满了，删除最后一个节点\r\n    var lastNode = this.tail.next;\r\n\r\n    const prevNode = lastNode.prev;\r\n    prevNode.next = null;\r\n\r\n    this.hashMap.delete(lastNode.key);\r\n\r\n    this.tail.next = prevNode;\r\n\r\n    // 头部插入\r\n    var nextHeadNode = this.head.next;\r\n    currentNode.next = nextHeadNode;\r\n\r\n    if (nextHeadNode) {\r\n      nextHeadNode.prev = currentNode;\r\n    }\r\n    currentNode.prev = this.head;\r\n    this.head.next = currentNode;\r\n    this.hashMap.set(key, currentNode);\r\n  }\r\n};\r\n```\r\n\r\n### 复杂度分析\r\n\r\n- 时间复杂度: O(1)\r\n- 空间复杂度: O(N)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2069000425","body":"\r\n### 代码\r\n\r\n```js\r\nvar maxDepth = function (root) {\r\n  if (root === null) {\r\n    return 0;\r\n  }\r\n\r\n  return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\r\n};\r\n```\r\n\r\n**复杂度分析**\r\n\r\n- 时间复杂度: O(N)\r\n- 空间复杂度: O(H), H 是树的高度\r\n","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coderxiaowq":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042506523","body":"Java 时间复杂度 O(n)\r\n` public List addToArrayForm(int[] a, int k) {\r\nList list = new ArrayList<>();\r\nList K = new ArrayList<>();\r\n//将数据k保存到集合K\r\nwhile(k > 0){\r\nK.add(k % 10);\r\nk /= 10;\r\n}\r\n//开始计算\r\nint p = a.length - 1;//从右往左遍历a\r\nint i = 0;//从左往右遍历K\r\nint left = 0;//进位值\r\nwhile(p>=0 || i<K.size()){\r\nint sum = 0;//保存相加的和\r\nif(p>=0 && i<K.size()){\r\nsum = a[p]+K.get(i)+left;\r\n}else if(p<0){\r\nsum = K.get(i)+left;\r\n}else{\r\nsum = a[p]+left;\r\n}\r\nif(sum>9){\r\nlist.add(sum % 10);\r\nleft = sum / 10;\r\n}else{\r\nlist.add(sum);\r\nleft = 0;\r\n}\r\np--;\r\ni++;\r\n}\r\nif(left != 0){\r\nlist.add(left);\r\n}\r\n\r\n    List<Integer> rs = new ArrayList<>();\r\n    //反转list\r\n    for(int j = list.size() - 1; j>=0; j--){\r\n        rs.add(list.get(j));\r\n    }\r\n    \r\n    return rs;\r\n}`","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2043950862","body":"Java 时间复杂度O(n)\n```\npublic int[] shortestToChar(String s, char c) {\n        int[] rs = new int[s.length()];\n        char[] a = s.toCharArray();\n        //记录字符c出现在i\"左边\"\"的最近索引left<=i,第1次可能例外\n        int left = s.indexOf(c+\"\"); \n        for(int i = 0; i < a.length; i++){\n            char ch = a[i];//记录当前索引i位置的字符\n            if(ch == c){\n                rs[i] = 0;\n                left = i;\n                continue;\n            }else if(left > i){//left大于i,因为left是i\"左边\"的,所以不存在更近的右边索引了\n                rs[i]= left-i;\n                continue;\n            }\n            //运行到这里,说明left<i,需要查询i右边\n            int right = i + 1;\n            while(right < a.length && a[right] != c){\n                right++;\n            }\n            //找到i右边的第一个目标right, a[right]==c\n            if(right == a.length){//right越界\n                rs[i] = i - left;\n            }else{\n                rs[i]= Math.min(i-left,right-i);\n            }\n\n        }\n        return rs;\n    }\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046300464","body":"Java\r\n思路: 底层创建一个数组用于存储数据,并定义一个变量保存数组中的有效元素个数\r\n```\r\nclass CustomStack {\r\n    private int[] a;// 底层数组 保存数据\r\n    private int N;// 数组逻辑长度\r\n\r\n    public CustomStack(int maxSize) {// maxSize>=1\r\n        a = new int[maxSize];\r\n    }\r\n\r\n    public void push(int x) {\r\n        if (N == a.length)\r\n            return;\r\n        a[N++] = x;\r\n    }\r\n\r\n    public int pop() {\r\n        if (N == 0)\r\n            return -1;\r\n        return a[--N];\r\n    }\r\n\r\n    public void increment(int k, int val) {// k>=1\r\n        if (k >= N) {\r\n            for (int i = 0; i < N; i++) {\r\n                a[i] += val;\r\n            }\r\n        } else {\r\n            for (int i = 0; i < k; i++) {\r\n                a[i] += val;\r\n            }\r\n        }\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2050710577","body":"Java\r\n昨天写的时候思路有,但是代码实现总是差一点,最后虽然实现了,觉有运气的成分,心烦\r\n时间复杂度O(n)\r\n```\r\nclass Solution {\r\n    public String decodeString(String s) {\r\n        StringBuilder rs = new StringBuilder();\r\n        Stack<Integer> nums = new Stack<>();\r\n        Stack<String> chs = new Stack<>();\r\n        int num = 0;\r\n        char[] a = s.toCharArray();\r\n        for (char c : a) {\r\n            if (c >= '0' && c <= '9') {\r\n                num = num * 10 + c - '0';\r\n            } else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\r\n                rs.append(c);\r\n            } else if (c == '[') {\r\n                nums.push(num);\r\n                chs.push(rs.toString());\r\n                rs = new StringBuilder();//重置rs\r\n                num = 0;\r\n            } else {\r\n                int N = nums.pop();//重复次数N\r\n                String tmp = chs.pop();\r\n                for (int j = 0; j < N; j++) {\r\n                    tmp += rs.toString();\r\n                }\r\n                rs = new StringBuilder(tmp);\r\n            }\r\n\r\n        }\r\n        return rs.toString();\r\n    }\r\n}\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2050703883","body":"Java 时间复杂度O(1)\r\n因为是返回队列头部元素,因此需要将整个队列反转后放在另一个队列中\r\n定义两个队列保存数据\r\n```\r\nclass MyQueue {\r\n    private Deque<Integer> in;\r\n    private Deque<Integer> out;\r\n\r\n    public MyQueue() {\r\n        in = new LinkedList();\r\n        out = new LinkedList();\r\n    }\r\n\r\n    public void push(int x) {\r\n        in.push(x);\r\n    }\r\n\r\n    public int pop() {\r\n        if (out.isEmpty()) {//将in中的数据给到out\r\n            while (!in.isEmpty()) {\r\n                out.push(in.pop());\r\n            }\r\n        }\r\n        return out.pop();\r\n    }\r\n\r\n    public int peek() {\r\n        if(out.isEmpty()){\r\n            while (!in.isEmpty()) {\r\n                out.push(in.pop());\r\n            }\r\n        }\r\n        return out.peek();\r\n    }\r\n\r\n    public boolean empty() {\r\n        return out.isEmpty() && in.isEmpty();\r\n    }\r\n\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053604956","body":"Java 时间复杂度O(n)\n```\nclass Solution {\n    public int maxChunksToSorted(int[] a) {\n        if (a.length == 1) return 1;\n        List<Integer> list = new LinkedList<>();\n        list.add(a[0]);\n        for (int i = 1; i < a.length; i++) {\n            if(a[i]<list.getLast()){//当前遍历到的值a[i]小于队列末尾的值\n                int j = list.removeLast();//移除该值并保存,应该该值是list中最大的\n                while(list.size()!=0 && a[i]<list.getLast()){//持续移除list中的值,直到a[i]到达所在块的起始索引\n                    list.removeLast();\n                }\n                list.add(j);//将最大值添加回list\n            }else\n                list.add(a[i]);\n        }\n        return list.size();\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2053836912","body":"Java 时间复杂度 O(n)\n面向debug编程......\n```\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head==null || k == 0) return head;\n        //先获取链表长度 计算head偏移距离\n        ListNode cur = head;\n        int N = 1;\n        while(cur.next!=null){\n            cur = cur.next;\n            N++;\n        }\n        if(N == 1) return head;\n        k %= N;//计算实际偏移量 \n        if(k==0) return head;\n        cur.next = head;//将链表闭合 \n        //利用cur找位置\n        cur = head;\n        while(k<N-1){\n            cur = cur.next;\n            k++;\n        }\n        //cur指向要切开元素对左边那个 切断 0-1-2/-3-4\n        ListNode temp = cur.next;\n        cur.next = null;\n        return temp;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2055238112","body":"Java 时间复杂度O(n)\r\n使用虚拟头结点\r\n```\r\npublic ListNode swapPairs(ListNode head) {\r\n        if (head == null || head.next == null)\r\n            return head;\r\n        ListNode dummy = new ListNode(666, head);\r\n        ListNode cur = dummy;\r\n        // 交换1号和2号 cur.next和cur.next.next\r\n        while (cur.next != null && cur.next.next != null) {\r\n            ListNode first = cur.next;// 记录1号\r\n            ListNode seconde = cur.next.next;// 记录2号 用以访问下一个1号\r\n            first.next = seconde.next;// 1号指向下一个1号\r\n            seconde.next = first;// 2号指向1号\r\n            cur.next = seconde;// cur指向2号并且dummy第一次指向2号\r\n            // cur.next再次指向下一组1号\r\n            cur = first;\r\n        }\r\n        return dummy.next;\r\n    }\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061157329","body":"Java\n时间复杂度O(n)\n```\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode A, ListNode B) {\n        ListNode p1 = new ListNode(1);\n        ListNode p2 = new ListNode(1);\n        p1.next = A;\n        p2.next = B;\n        Map<ListNode,Integer> map = new HashMap<>();\n        while(p1.next != null){\n            map.put(p1.next,0);\n            p1=p1.next;\n        }\n        while(p2.next!=null){\n            if(map.containsKey(p2.next))\n                return p2.next;\n            p2=p2.next;\n        }\n        return null;\n    }\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hillsonziqiu":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042528858","body":"## 思路\r\n首先想到的方法是两个数求解嘛，直接数组转数字相加后再放到数组中。提交的时候发现了问题，js大数操作的时候精度会G掉，故这个方案不可行；\r\n那么就只能按位相加了，加法是从个位开始进行计算，那么反向获取一下数组, 按位相加.\r\n另一种情况：如果k的位数大于sum，那么需要将k多出来的位数追加到前面。\r\n最后数组取反即可；\r\n\r\n## 代码\r\n```javascript\r\n  const res = [];\r\n  const n = num.length;\r\n  for (let i = n - 1; i >= 0; --i) {\r\n    let sum = num[i] + (k % 10);\r\n    k = ~~(k / 10);\r\n    if (sum >= 10) {\r\n      k++;\r\n      sum -= 10;\r\n    }\r\n    res.push(sum);\r\n  }\r\n  while (k > 0) {\r\n    res.push(k % 10);\r\n    k = ~~(k / 10);\r\n  }\r\n  res.reverse();\r\n  return res;\r\n```\r\n\r\n## 复杂度\r\nn为sum的length，m为k的个数\r\n时间复杂度：O(n + |n-m|)\r\n空间复杂度：O(1) 没有用到新的存储空间","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2047036979","body":"## 思路\r\n正反来回两次遍历，正向遍历是获取距离左侧c的距离，反向遍历是获取距离右侧c的距离。第二次遍历的时候对比正向过来的值获取最小值。\r\n## 解法\r\n``` javascript\r\nvar shortestToChar = function (s, c) {\r\n  let res = [];\r\n  const n = s.length;\r\n  let mark = -n;\r\n  for (let i = 0; i < n; i++) {\r\n    if (s[i] === c) {\r\n      mark = i;\r\n    }\r\n    res[i] = i - mark;\r\n  }\r\n  mark = 2 * n;\r\n  for (let i = n - 1; i >= 0; --i) {\r\n    if (s[i] === c) {\r\n      mark = i;\r\n    }\r\n    res[i] = Math.min(res[i], mark - i);\r\n  }\r\n\r\n  return res;\r\n};\r\n```\r\n## 复杂度分析\r\n时间复杂度 O(n)  两次遍历   n+n   复杂度忽略常量\r\n空间复杂度 O(1)  就用到一个常量","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2047142482","body":"## 思路\r\n通过数组来模拟栈。通过push和pop来操作栈。CustomStack有两个属性一个是list，一个是maxSize；\r\nincrement的实现：\r\n遍历长度判断 const len = this.list.length > k ? k : this.list.length;\r\n如果栈长度大于k，那么就遍历到k，如果长度小于k，那么遍历整个list即可；\r\n\r\n## 题解\r\n```javascript\r\n/*\r\n * @lc app=leetcode.cn id=1381 lang=javascript\r\n *\r\n * [1381] 设计一个支持增量操作的栈\r\n */\r\n\r\n// @lc code=start\r\n/**\r\n * @param {number} maxSize\r\n */\r\nvar CustomStack = function (maxSize) {\r\n  const list = [];\r\n  //   list.length = maxSize;\r\n  this.maxSize = maxSize;\r\n  this.list = list;\r\n};\r\n\r\n/**\r\n * @param {number} x\r\n * @return {void}\r\n */\r\nCustomStack.prototype.push = function (x) {\r\n  if (this.list.length >= this.maxSize) {\r\n    return;\r\n  }\r\n  this.list.push(x);\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCustomStack.prototype.pop = function () {\r\n  if (this.list.length <= 0) {\r\n    return -1;\r\n  }\r\n  return this.list.pop();\r\n};\r\n\r\n/**\r\n * @param {number} k\r\n * @param {number} val\r\n * @return {void}\r\n */\r\nCustomStack.prototype.increment = function (k, val) {\r\n  const len = this.list.length > k ? k : this.list.length;\r\n  for (let i = 0; i < len; i++) {\r\n    this.list[i] += val;\r\n  }\r\n};\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * var obj = new CustomStack(maxSize)\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * obj.increment(k,val)\r\n */\r\n// @lc code=end\r\n\r\n\r\n```\r\n## 复杂度分析\r\n时间复杂度:\r\n* CustomStack O(1)\r\n* push O(1)\r\n* pop O(1)\r\n* increment O(n)\r\n空间复杂度: O（N）   N就是maxSize;\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049276667","body":"## 思路\r\n这类字符串匹配括号或者特殊符号的场景，我一般首先想到的要不就是用字符串替换法（正则），要不就用栈来操作。本题题解就用栈的形式进行操作：\r\n针对字符串做一次遍历，遍历过程中要处理几个条件：\r\n统一点，除了']'和数字类型需要单独处理外，将其余的char统统推入栈中；\r\n1. '!isNaN(char)'\r\n用于计算重复次数，之前以为数字只会是1位，导致用例 100[leetcode] 没过。\r\n在一次遍历中只能获取一位数字，那么在遇到'['之前数字是要累加的，算法为：```times = times * 10 + parseInt(item);```\r\n2. '[' \r\n将之前算好的次数推入栈中。并将全局变量times重置为0；\r\n3. ']'\r\n* 这里是重点 *，首先这里是要计算需要重复字符串的，循环从已有的stack中pop元素，当遇到'['需要停止，并再次pop出来之前计算的重复次数times，然后将``` += ```后的repeatStr推入栈中\r\n4. 其他\r\n当前char 统统推入栈中\r\n\r\n通过这次遍历，那么整个栈都只剩下``` string[] ``` 了。然后将字符串数组拼接起来，就是最终的答案了。\r\n\r\n## 解法\r\n```javascript\r\nvar decodeString = function (s) {\r\n  const stack = [];\r\n  let times = 0;\r\n  // 考虑栈的操作\r\n  for (const item of s) {\r\n    if (item === \"[\") {\r\n      stack.push(times);\r\n      stack.push(item);\r\n      times = 0;\r\n    } else if (item === \"]\") {\r\n      let repeatStr = \"\";\r\n      while (1) {\r\n        const stackPopItem = stack.pop();\r\n        if (stackPopItem === \"[\") {\r\n          const repeatTimes = stack.pop();\r\n          repeatStr = repeatStr.repeat(repeatTimes);\r\n          break;\r\n        } else {\r\n          repeatStr = stackPopItem + repeatStr;\r\n        }\r\n      }\r\n      stack.push(repeatStr);\r\n    } else if (!isNaN(item)) {\r\n      times = times * 10 + parseInt(item);\r\n    } else {\r\n      stack.push(item);\r\n    }\r\n  }\r\n\r\n  console.log(\"res\", stack);\r\n  return stack.join(\"\");\r\n};\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度：for 循环里包含了一个while循环 我感觉复杂度是 O(n^2)  然后还有个join 那么总时间复杂度应该是  O(n^2 + n); 按算法来看时间复杂度应该是O(n^2);\r\n空间复杂度：此处用了一个位数为n的栈，故空间复杂度为O(n)   。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051026867","body":"## 思路\r\n因为只能使用栈的操作，那么如果想用栈实现队列的话就需要两个栈相互倒蹬。\r\n\r\n## 题解\r\n```javascript\r\nvar MyQueue = function () {\r\n    this.inStack = [];\r\n    this.outStack = [];\r\n\r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyQueue.prototype.push = function (x) {\r\n    this.inStack.push(x);\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMyQueue.prototype.pop = function () {\r\n    if (!this.outStack.length) {\r\n        while (this.inStack.length) {\r\n            this.outStack.push(this.inStack.pop());\r\n        }\r\n    }\r\n\r\n    return this.outStack.pop();\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMyQueue.prototype.peek = function () {\r\n    if (!this.outStack.length) {\r\n        while (this.inStack.length) {\r\n            this.outStack.push(this.inStack.pop());\r\n        }\r\n    }\r\n\r\n    return this.outStack[this.outStack.length - 1];\r\n};\r\n\r\n/**\r\n * @return {boolean}\r\n */\r\nMyQueue.prototype.empty = function () {\r\n    return !this.inStack.length && !this.outStack.length;\r\n};\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * var obj = new MyQueue()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.peek()\r\n * var param_4 = obj.empty()\r\n */\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度：O(1)\r\n空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053606354","body":"## 思路\r\n单调栈的可以进行排序，正序经过栈可以变成倒序，倒序经过栈可以变成正序，利用这种特性，for循环遍历如果栈顶值小于遍历的item，那么推入stack栈中；否则，推出栈顶，对栈里面的栈底值进行比较，如果当前值小于最后一个，那么停止当前栈的推出。循环结束后插入循环前栈推出的值。最终栈中剩下的长度就是分割的块数。\r\n\r\n## 代码\r\n```javascript\r\n/**\r\n * @param {number[]} arr\r\n * @return {number}\r\n */\r\nvar maxChunksToSorted = function (arr) {\r\n  const stack = [];\r\n  for (item of arr) {\r\n    if (stack.length === 0 || item >= stack[stack.length - 1]) {\r\n      stack.push(item);\r\n    } else {\r\n      const maxItem = stack.pop();\r\n      while (stack.length > 0 && item < stack[stack.length - 1]) {\r\n        stack.pop();\r\n      }\r\n      stack.push(maxItem);\r\n    }\r\n  }\r\n\r\n  return stack.length;\r\n};\r\n```\r\n\r\n## 复杂度分析\r\n时间复杂度：O(n)  栈总共就是arr的长度，遍历中最糟糕的场景时间复杂度也就是 O(n + n) => O(n);\r\n空间复杂度：O(n) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054110908","body":"## 思路\r\n链表如果拼成一个“轮子”的话，那么就容易解决了。\r\n\r\n## 实现\r\n```javascript\r\nvar rotateRight = function (head, k) {\r\n  if (!head || !head.next || k === 0) return head;\r\n\r\n  let [n, cur] = [1, head];\r\n  while (cur.next) {\r\n    cur = cur.next;\r\n    n++;\r\n  }\r\n\r\n  let gap = n - (k % n);\r\n  if (gap === n) return head;\r\n\r\n  cur.next = head;\r\n  while (gap > 0) {\r\n    cur = cur.next;\r\n    gap--;\r\n  }\r\n\r\n  const res = cur.next;\r\n  cur.next = null;\r\n\r\n  return res;\r\n};\r\n```\r\n\r\n##  复杂度分析\r\n时间复杂度：O(n)    最多循环2次  故时间复杂度为O(n)\r\n空间复杂度：O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2056725430","body":"## 思路\r\n递归交换链表相邻两个值即可\r\n\r\n## 代码\r\n```javascript\r\nvar swapPairs = function(head) {\r\n    if (!head?.next) return head;\r\n\r\n    const nh = head.next;\r\n    head.next = swapPairs(nh.next);\r\n    nh.next = head;\r\n    return nh;\r\n};\r\n```\r\n\r\n## 复杂度分析\r\n* 时间复杂度：O(n)\r\n* 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2069866714","body":"## 思路\r\n树的深度优先遍历后相加即可\r\n\r\n## 代码\r\n```javascript\r\n// 深度优先\r\nconst dfs = (root, pre) => {\r\n  if (!root) return 0;\r\n\r\n  let sum = pre * 10 + root.val;\r\n  if (!root.left && !root.right) return sum;\r\n\r\n  return dfs(root.left, sum) + dfs(root.right, sum);\r\n};\r\n\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar sumNumbers = function (root) {\r\n  return dfs(root, 0);\r\n};\r\n```\r\n\r\n## 复杂度分析\r\n* 时间复杂度：O(n) 树的节点个数\r\n* 空间复杂度：O(h) 树的高度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexzhang-mini":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042571062","body":"## 代码\n\n```python\nclass Solution:\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\n        K = list(map(int,str(K)))\n        \n        diff = len(K) - len(A)\n        if diff: A = [0] * diff + A \n        if diff < 0: K = [0] * (-diff) + K\n        \n        flag = 0\n        for i in range(len(A)-1,-1,-1):\n            bit = A[i] + K[i] + flag\n            flag = 0\n            if bit >= 10:\n                flag = 1\n                bit %= 10\n            A[i] = bit \n        if flag: A = [1] + A \n        return A\n```\n\n时间复杂度：O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2046525998","body":"\n```python\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        result = [0] * len(s)\n        c_indices = [i for i in range(len(s)) if s[i] == c]\n        for i in range(len(s)):\n            min_distance = float('inf')\n            for index in c_indices:\n                distance = abs(index - i)\n                min_distance = min(min_distance, distance)\n            result[i] = min_distance\n        return result\n```\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046532493","body":"```python\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n         if self.stack:\n            return self.stack.pop()\n         else:\n            return -1  \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.stack))):\n            self.stack[i] += val\n```\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2058285278","body":"class Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        current_str = \"\"\n        repeat_num = 0\n\n        for char in s:\n            if char.isdigit():\n                repeat_num = repeat_num * 10 + int(char)\n            elif char.isalpha():\n                current_str += char\n            elif char == \"[\":\n                stack.append((current_str, repeat_num))\n                current_str = \"\"\n                repeat_num = 0\n            elif char == \"]\":\n                last_str, last_repeat = stack.pop()\n                current_str = last_str + current_str * last_repeat\n\n        return current_str\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2058289316","body":"class MyQueue:\n   def __init__(self):\n       self.input_stack = []  # 用于入队操作\n       self.output_stack = []  # 用于出队操作\n\n   def push(self, x: int) -> None:\n       self.input_stack.append(x)\n\n   def pop(self) -> int:\n       self._transfer_if_needed()\n       return self.output_stack.pop()\n\n   def peek(self) -> int:\n       self._transfer_if_needed()\n       return self.output_stack[-1]\n\n   def empty(self) -> bool:\n       return not self.input_stack and not self.output_stack\n\n   def _transfer_if_needed(self):\n       if not self.output_stack:\n           while self.input_stack:\n               self.output_stack.append(self.input_stack.pop())\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2058300417","body":"```python\nclass Solution:\n    def maxChunksToSorted(self, arr: list[int]) -> int:\n        length = 0\n        cnt = 0\n        while length < len(arr):\n            j = 0\n            lefttemp = arr[length:length + j + 1]\n            righttmep = arr[length + j + 1:]\n            while len(righttmep) and max(lefttemp) > min(righttmep):\n                j += 1\n                lefttemp = arr[length:length + j + 1]\n                righttmep = arr[length + j + 1:]\n                if not len(righttmep) or max(lefttemp) <= min(righttmep):\n                    break\n            length += len(lefttemp)\n            cnt += 1\n        return cnt\n\n```\n\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2058303980","body":"```python\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next or k == 0:\n            return head\n        \n        length = 1\n        tail = head\n        while tail.next:\n            tail = tail.next\n            length += 1\n        \n        k = k % length\n        if k == 0:\n            return head\n\n        tail.next = head\n        \n        new_head_prev = head\n        for i in range(length - k - 1):\n            new_head_prev = new_head_prev.next\n        \n        new_head = new_head_prev.next\n        new_head_prev.next = None\n        \n        return new_head\n\n```\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2058306020","body":"```python\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(0)\n        dummy.next = head\n        current = dummy\n        \n        while current.next and current.next.next:\n            first = current.next\n            second = current.next.next\n            first.next = second.next\n            current.next = second\n            current.next.next = first\n            current = current.next.next\n        \n        return dummy.next\n\n```\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2058308520","body":"```python\nclass Solution:\n    def findMiddle(self, head):\n        if not head or not head.next:\n            return head\n        \n        prev_ptr = None\n        slow_ptr = head\n        fast_ptr = head\n        \n        while fast_ptr and fast_ptr.next:\n            prev_ptr = slow_ptr\n            slow_ptr = slow_ptr.next\n            fast_ptr = fast_ptr.next.next\n        \n        if prev_ptr:\n            prev_ptr.next = None\n        \n        return slow_ptr\n    \n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return None\n        \n        mid = self.findMiddle(head)\n        root = TreeNode(mid.val)\n        \n        if head == mid:  \n            return root\n        \n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(mid.next)\n        \n        return root\n\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xil324":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042728270","body":"```\nvar addToArrayForm = function (num, k) {\n    const res = []; \n    let index = num.length - 1; \n    let currSum = k; \n    while(index >= 0 || currSum > 0) {\n        if(index >= 0) {\n            currSum += num[index]; \n            index--; \n        }\n        res.push(currSum % 10);\n        currSum = Math.floor(currSum / 10); \n    }\n    return res.reverse()\n};\n```\n\n思路：\n\n一个数组num和数字k相加，第一个想法是把数字转换层数组，然后从两个数组的末尾依次相加， 如何和超过10则进一位。 这样和用k与每一个num的数字相加，然后保留和的尾数，k除以10 是一样的。\n例如： \nnum = [1,2,3]\nk = 79\n- 79 + 3 = 82   [2]\n- 82/ 10 -> 8  \n- 8 + 2 = 10 [2, 0]\n- 10/10 -> 1\n- 1 + 1 = 2 [2, 0, 2]\n\n数组反转： [2,0,2]\n\n时间复杂度：\nnum长度为n, k包含的数组为m \n- n >= m O(n)\n- n < m. O(log(k))\n综合 O(max(n, log(k)) \n\n空间复杂度：\nO(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044072899","body":"\nfrom left to right: \nstartIndex = 11 \n[l,o,v,e,l,e,e,t,c,o,d,e] \n[11,10,9,0,1,0,0,1,2,3,4,0]\n\nfrom right to left:\nstartIndex = 0\n[3,2,1,0,1,0,0,4,3,2,1,0]\n\ncompare two arrays to get the min \n\n```\nvar shortestToChar = function(s, c) {\n    const res = []; \n    let index = s.length - 1; \n    for(let i = 0; i < s.length; i++) {\n        if(s[i] === c) index = i;\n        res[i] = Math.abs(index - i);  \n    }\n\n    index = 0;\n    for(let i = s.length-1; i >=0; i--) {\n        if(s[i] === c) index = i;\n        res[i] = Math.min(res[i], Math.abs(index - i)); \n    }\n\n    return res; \n    \n};\n```\ntime complexity: O(n)\nspace complexity: O(n)\n\n\n\n\n\n\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046475194","body":"```\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.maxSize = maxSize; \n    this.stack = []; \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stack.length === this.maxSize) return; \n    this.stack.push(x); \n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(this.stack.length === 0) return -1;\n    return this.stack.pop(); \n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    console.log(k, this.stack)\n    for (let i=0; i < k; i++) {\n        if(i < this.stack.length) {\n            this.stack[i] += val\n        }\n    }\n};\n\n```\ntime complexity: \npush: O(1) pop: O(1) increment O(k)\nspace complexity: O(n) n = maxSize","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049650306","body":"```\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    const stack = []; \n    for(const char of s) {\n        if(char !== ']') {\n            stack.push(char); \n            continue; \n        } \n        let arr = []; \n        while(stack.length && stack[stack.length-1] !== '['){\n            arr.unshift(stack.pop())\n        }\n        stack.pop(); \n        const str = arr.join(\"\"); \n\n        let repeatNumberArr = []\n        while(!Number.isNaN(Number(stack[stack.length-1]))) {\n            repeatNumberArr.unshift(stack.pop())\n        }\n        stack.push(str.repeat(Number(repeatNumberArr.join(\"\"))))\n    }\n    return stack.join(\"\")\n};\n```\ntime complexity: O(n) where n is the length of the string\nspace complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2050790223","body":"```\nvar MyQueue = function () {\n    this.stack = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n    this.stack.push(x)\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n    const removeElement = this.stack.shift();\n    return removeElement;\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n    return this.stack[0]\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n    return this.stack.length === 0\n};\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053106127","body":"```\n/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n    const stack = []; \n    for(const val of arr) {\n        if(!stack.length || stack[stack.length-1]<=val) {\n            stack.push(val); \n        } else {\n            const currentMaxVal = stack.pop(); \n            while(stack.length && stack[stack.length-1] > val) {\n                stack.pop(); \n            }\n            stack.push(currentMaxVal); \n        }\n    }\n    return stack.length; \n};\n```\ntime complexity: O(n) where n is the length of the array\nspace complexity: O(n) where n is the length of the array","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054080712","body":"```\nvar rotateRight = function(head, k) {\n    if(!head) return head;\n    let length = 0;\n    let node = head;\n    while(node) {\n        node = node.next;\n        length += 1;\n    }\n    k = k % length;\n    let slow = head, fast = head, result = head;\n    while(fast.next) {\n        fast = fast.next;\n        k -= 1;\n        if(k < 0) {\n            slow = slow.next; \n        }\n    }\n    fast.next = head;\n    result = slow.next;\n    slow.next = null\n    return result;\n};\n```\ntime complexity: O(n)\nspace complexity: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2056869909","body":"```\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    if(head === null || head.next === null) return head;\n    let first = head, second = head.next, rest = head.next.next;\n    second.next = first;\n    first.next = swapPairs(rest);\n    return second; \n};\n```\ntime complexity: O(n)\nspace complexity: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2058207851","body":"```\n**\n * @param {ListNode} head\n * @return {TreeNode}\n */\nvar sortedListToBST = function(head) {\n    const arr = []; \n    while(head) {\n        arr.push(head.val);\n        head = head.next;\n    }\n    return createTree(arr, 0, arr.length-1);\n};\n\nfunction createTree(arr, left, right) {\n    if(left > right) return null; \n    const mid = Math.floor((left + right)/2); \n    const node = new TreeNode(arr[mid]);\n    if(left === right) return node;\n    node.left = createTree(arr, left, mid -1);\n    node.right = createTree(arr, mid + 1, right);\n    return node; \n}\n```\ntime complexity: O(n)\nspace complexity:  O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2060317566","body":"```\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n    let first = headA, second = headB;\n    while(first !== second) {\n       first !== null ? first = first.next : first = headB;\n       second !== null ? second = second.next: second = headA;\n    }\n    return first;\n}; \n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2062941774","body":"```\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar detectCycle = function(head) {\n    let slow = head, fast = head;\n    while(fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if(slow === fast) break;\n    }\n    if(!fast || !fast.next) return null;\n    fast = head;\n    while (slow !== fast) {\n        slow = slow.next;\n        fast = fast.next;\n    }\n    return fast; \n};\n```\ntime complexity: O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2066583108","body":"/**\n * @param {number} capacity\n */\nvar LRUCache = function(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n    this.head = new ListNode(-1,-1);\n    this.tail = new ListNode(-1,-1); \n    this.head.next = this.tail;\n    this.tail.prev = this.head; \n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function(key) {\n    if(!this.cache.has(key)) return -1; \n    const node = this.cache.get(key);\n    this.remove(node);\n    this.add(node);\n    return node.val;\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function(key, value) {\n    if(this.cache.has(key)) {\n        const node = this.cache.get(key);\n        this.remove(node); \n    }\n    const newNode = new ListNode(key, value); \n    this.cache.set(key, newNode);\n    this.add(newNode); \n    \n    if(this.cache.size > this.capacity) {\n        const nodeToDelete = this.head.next; \n        this.remove(nodeToDelete); \n        this.cache.delete(nodeToDelete.key)\n    }\n };\n\n\n /** \n * @param {ListNode} node \n * @return {void}\n */\n\nLRUCache.prototype.add = function (node) {\n    const nodeBeforeTail = this.tail.prev;\n    nodeBeforeTail.next = node;\n    node.prev = nodeBeforeTail;\n    node.next = this.tail;\n    this.tail.prev = node;\n}\n\n /** \n * @param {ListNode} node \n * @return {void}\n */\nLRUCache.prototype.remove = function(node) {\n    node.prev.next = node.next;\n    node.next.prev = node.prev; \n}\n\n class ListNode {\n    constructor (key,val) {\n        this.key = key;\n        this.val = val;\n        this.next = null; \n        this.prev = null; \n    }\n }","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067877229","body":"/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n   if(!p && !q) return true; \n   if(!p || !q)  return false; \n   if(p.val !== q.val) return false;\n   return isSameTree(p.left, q.left) && isSameTree(p.right ,  q.right)\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068286367","body":"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n    let totalSum = 0; \n    traveseToGetSum(root, []); \n    return totalSum;\n\n    function traveseToGetSum(node, path) {\n        if(!node) return \n        path.push(node.val)\n        if(!node.left && !node.right) {\n            totalSum += parseInt(path.join(\"\"))\n        }\n        traveseToGetSum(node.left, path);\n        traveseToGetSum(node.right, path);\n        path.pop()\n    }\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bordergong":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2042730017","body":"var addToArrayForm = function(num, k) {\n    var numK = (k + '').split('');\n    var diff = num.length - numK.length > 0 ? num.length : numK.length;\n    var result = [];\n    var isStep = false;\n    for (var i = 0; i < diff; i++) {\n        var a = num[num.length - (1 + i)] || 0;\n        var b = numK[numK.length - (1 + i)] || 0;\n        var r = a + Number(b) + Number(isStep);\n        isStep = r >= 10;\n        result.unshift(r%10);\n    }\n    if (isStep) {\n        result.unshift(1);\n    }\n    return result;\n};\n\n时间复杂度： O(n)\n\n思路： 总体思路是模拟数学的加法\n1·数据格式对齐\n2.从各位开始遍历（数组尾部），依次累加，超过十进位取余\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044696860","body":"## 代码\n```javascript\nvar shortestToChar = function(s, c) {\n    const flag = 100000;\n    const n = s.length;\n    const answer = new Array(n).fill(flag);\n\n    let prev = -flag;\n    for (let i = 0; i < n; i++) {\n        if (s[i] === c) {\n            prev = i;\n        }\n        answer[i] = Math.min(answer[i], Math.abs(i - prev));\n    }\n\n    prev = flag;\n    for (let i = n - 1; i >= 0; i--) {\n        if (s[i] === c) {\n            prev = i;\n        }\n        answer[i] = Math.min(answer[i], Math.abs(i - prev));\n    }\n\n    return answer;\n};\n```\n## 思路\n通过两次遍历字符串 s，分别从左到右和从右到左，更新每个位置到字符 c 最近位置的距离，最终得到最短距离数组并返回。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2056528000","body":"## 代码\r\n```typescript\r\nclass CustomStack {\r\n    private maxSize: number;\r\n    private stack: number[];\r\n    private incMap: any;\r\n    constructor(maxSize) {\r\n        this.maxSize = maxSize;\r\n        this.stack = [];\r\n        this.incMap = {}; // 用于记录增量操作\r\n    }\r\n\r\n    push(x) {\r\n        if (this.stack.length < this.maxSize) {\r\n            this.stack.push(x);\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if (this.stack.length === 0) {\r\n            return -1;\r\n        }\r\n        // 处理增量操作\r\n        let inc = this.incMap[this.stack.length] || 0;\r\n        if (this.stack.length > 1) {\r\n            this.incMap[this.stack.length - 1] = (this.incMap[this.stack.length - 1] || 0) + inc;\r\n        }\r\n        return this.stack.pop() + inc;\r\n    }\r\n\r\n    increment(k, val) {\r\n        const top = Math.min(k, this.stack.length);\r\n        this.incMap[top] = (this.incMap[top] || 0) + val;\r\n    }\r\n}\r\n```\r\n## 时间复杂度\r\n- push O(1)\r\n- pop O(1)\r\n- increment O(n)\r\n\r\n## 思路\r\n用数组模拟栈\r\n","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hawkins-hjq":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2043020205","body":"### 思路\r\n遍历数组，将数组和K的每一位数字 ，从右到左 ，逐一相加，如果两个数相加大于等于10，则进位+1；\r\n\r\n### 代码\r\n\r\n```\r\nclass Solution {\r\npublic List<Integer> addToArrayForm(int[] num, int k) {\r\n        List<Integer> result = new ArrayList<>();\r\n        for (int i = num.length - 1; i >= 0; i--) {\r\n            // 逐位相加\r\n            int sum = num[i] + k % 10;\r\n            k /= 10;\r\n            // 进位\r\n            if (sum >= 10) {\r\n                k++;\r\n                sum -= 10;\r\n            }\r\n            result.add(0, sum); \r\n        }\r\n\r\n        for (; k > 0; k/= 10) {\r\n            result.add(0, k % 10);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n### 复杂度\r\n时间复杂度：O(max(n,logk));\r\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045398105","body":"### 思路\n暴力求解法：两次遍历，求最短距离；\n### 代码\n```\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] result = new int[s.length()];\n        List<Integer> posList =new ArrayList<>();\n        for(int i =0;i<s.length();i++){\n            if(s.charAt(i)==c){\n                posList.add(i);\n            }\n        }\n\n        for(int j =0;j<s.length();j++){\n           int distance = 10000;\n           for(int k =0;k<posList.size();k++){\n                if(Math.abs(j-posList.get(k))<distance){\n                    distance = Math.abs(j-posList.get(k));\n                }\n           }\n           result[j] = distance;\n        }\n\n        return result;\n    }\n}\n```\n\n### 复杂度\n时间复杂度：O(N^2);\n空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2047939857","body":"### 思路\n数组实现栈\n\n### 代码\n```\nclass CustomStack {\n    // 声明一个数组，作为自定义栈的底层实现\n    int[] stackArray;\n    // 栈顶位置监控\n    int pos = 0;\n\n    public CustomStack(int maxSize) {\n        stackArray = new int[maxSize];\n    }\n    \n    public void push(int x) {\n        // 栈空间满了，不能入栈\n        if(pos==stackArray.length){\n            return;\n        }\n        // 入栈\n        stackArray[pos++]=x;\n    }\n    \n    public int pop() {\n        if(pos==0){\n            return -1;\n        }\n        return stackArray[--pos];\n\n    }\n    \n    public void increment(int k, int val) {\n        // 栈中元素个数小于k\n        if(k>stackArray.length){\n            for(int i = 0;i<stackArray.length;i++){\n                stackArray[i] += val;\n            }\n        } else{\n              // 栈中元素个数小于k\n            for(int j =0;j<k;j++){\n                    stackArray[j] += val;\n                }\n        }\n    }\n}\n\n```\n### 复杂度\n时间复杂度： push、pop:  O(1),increment:O(K)\n空间复杂度：O(maxSize)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2050041025","body":"### 思路\n双栈\n### 代码\n```\nclass Solution {\n    public String decodeString(String s) {\n        Deque<StringBuilder> stack = new LinkedList<>();\n        Deque<Integer> numStack = new LinkedList<>();\n        StringBuilder sb = new StringBuilder();\n        int num = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isDigit(s.charAt(i))) {\n                num = num * 10 + s.charAt(i) - '0';\n            } else if (s.charAt(i) == '[') {\n                numStack.push(num);\n                num = 0;\n                stack.push(sb);\n                sb = new StringBuilder();\n            } else if (Character.isLetter(s.charAt(i))) {\n                sb.append(s.charAt(i));\n            } else {\n                StringBuilder temp = stack.pop();\n                int count = numStack.pop();\n                for (int j = 0; j < count; j++) {\n                    temp.append(sb);\n                }\n                sb = temp;\n            }\n        }\n        return sb.toString();\n\n    }\n}\n```\n### 复杂度\n时间复杂度：O（N）\n空间复杂度：O（N）","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cathyshang":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2043063331","body":"思路:\n1. 数组转换整数\n2. 相加\n3. 判断和的长度\n4. 整数转换数组\n\n代码:\n```cpp\nvector<int> addToArrayForm(vector<int>& num, int k) {\n    long long int h=0;\n    int n = num.size();\n    int cur_m = n-1;\n    for(int i=0; i<n; i++){\n        h = h + num[i]*pow(10,cur_m);\n        cur_m = cur_m -1; \n    }\n    //2\n    long long r; int l; //求和，输出长度\n    r = h+k;\n    //3\n    if(r>=pow(10,n)){\n        l = n+1;\n    } else{ l = n;}\n    // 判断一下k的长度，kl\n    int kl = 0;\n    if(k>=pow(10,4)){kl = 5;}\n    else if (k>=pow(10,3)){kl = 4;}\n    else if (k>=pow(10,2)){kl = 3;}\n    else if (k>=10){kl = 2;}\n    else{ kl = 1;}\n    if(kl > l){ l = kl;}\n    if(r>=pow(10, l)){\n        l = l+1;\n    }\n    //4\n    vector<int> res(l,0);\n    cur_m = l-1;\n\n    for(int j=0; j < l; j++){\n        if(j==l-1){ res[j]= r;}\n        else{\n            int temp = floor(r/pow(10,cur_m));\n            res[j] = temp;\n            r = r - res[j]*pow(10,cur_m);\n            cur_m = cur_m-1;\n            // cout << r;\n        }\n    }\n    return res;\n    }\n```\n复杂度:\n时间复杂度 $O(N)$  N = num.length()\n\n错误:\n由于是以num为主导，没有注意它范围很大，超出了程序变量的长度。\n后发现，将k转换为数组，再模拟数字加法，适合本题。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2044718204","body":"思路：\n两次遍历，a.一次求字符串元素s[i]到其右侧目标字符的距离最小值；b. 另一次求字符串元素s[i]到其左侧目标字符距离；\n距离通过索引相减获得。\n代码：\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int i=0;\n        int b=0; // 上一个同字符索引\n        int n = s.length();\n        std::vector<int> temp(n);\n        int cur;\n        // 到右侧 同字符距离 n\n        while( s[i]!='\\0'){\n            if(s[i]==c){\n                temp[i]=0;\n                for(int j = b; j<i; j++){\n                    cur = i-j;\n                    if(temp[j] > cur){temp[j] = cur;}          \n                }\n                b = i;}\n            else{temp[i]=n;}\n            i++;\n        }\n        // 到左侧 同字符距离\n        for(int i = 0, b= -n; i<n; ++i){\n            if(s[i]==c){\n                b = i;\n            }\n            temp[i] = min(temp[i], i-b);\n            // std::cout << temp[i]<<'\\n';\n        }\n        return temp;\n    }\n};\n```\n复杂度：\n时间复杂度$O(N^2)$\n空间复杂度$O(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2046219106","body":"思路：\n- 看到前k个增添一个增量，用数组实现。\n- 优化前，增添函数中for循环求和更新栈中元素，时间复杂度为$O(N)$ N=k\n- 前缀和优化，\n     - 增添函数更新增量数组，举例中，\"increment\",\"increment\", 对应 \"add[2]=100\",\"add[1]=100\"，其记录前k（k<top）个增量值val，\n     - 在pop()，通过stk[top]+add[top]获取增量后元素，并通过add[top-1] += add[top];更新增量数组。\n\n代码：\n```cpp\nclass CustomStack {\npublic:\n    vector<int> stk, add;\n    int top;\n\n    CustomStack(int maxSize) {\n        stk.resize(maxSize);\n        add.resize(maxSize);\n        top = -1; //没满栈,监测栈顶位置\n    }\n    \n    void push(int x) {\n        if(top != stk.size()-1){ //错误 if(top < stk.size()-1)\n            ++top;\n            stk[top] = x;\n            // std::cout << 'test';\n        }\n        // std::cout << top <<'\\n';\n    }\n    \n    int pop() {\n        int cur;\n        if(top==-1) return -1; //空了\n        cur = stk[top] + add[top];\n        if(top != 0) add[top-1] += add[top]; // 错误 add[top-1] = add[top]\n        add[top] = 0; //跟着元素出栈清零\n        --top;\n        return cur; \n    }\n    \n    void increment(int k, int val) {\n        int rag;\n        rag = min(k, top+1);\n        // 优化器前\n        // for(int i = 0; i<rag; ++i){\n        //     stk[i] += val;\n        // }\n        if( rag >= 1) add[rag-1] += val;\n    }\n};\n```\n复杂度：\n- 时间复杂度： push，pop，increment $O(1)$\n- 空间复杂度：$O(N)$ 使用两个长度为N=maxSize的数组\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2050020501","body":"思路\n- 用栈维护，记录字符型数字 与 字符串\n- 当遇到“[” 入栈;\n当遇到“]” 出栈。\n\n代码\n```cpp\nclass Solution {\npublic:\n    string decodeString(string s) {\n        // 解码   没跑通\n        stack<string> stkStr;\n        // stack<int> stkNum;\n        int n = s.size(), num;\n        string temp1,temp2,sNum;\n        string res;\n        int flag = -1, k=1;\n        string q; \n        // \n        for(int i=0; i<n; i++){\n            if(s[i]>='a' && s[i]<='z'){\n                temp1 += s[i];\n            }\n            else{sNum += s[i];}\n            if(s[i]=='['){\n                flag = 1;\n                if(sNum==''){sNum = \"1\";} // 错误\n                // else{num = stoi(sNum)}                \n                if(temp1!=''){stkStr.push(temp1);}\n                stkStr.push(num);\n                stkStr.push(s[i]);\n                // 入栈后清零\n                temp1 = '';\n                sNum = '';\n            }\n            if(s[i]==']'){\n                //出栈\n                q = stkStr.pop();\n                if(q=='['){\n                    k = stkStr.pop()\n                    k = stoi(k);\n                    for(int j =0; j<k; i++){\n                        temp2 += temp1;\n                    }\n                }\n                else{\n                    temp2 = stkStr.pop() + temp2;\n                    stkStr.pop()\n                }\n            }\n        }\n        k = stkStr.pop()\n        k = stoi(k);\n        for(int j =0; j<k; i++){\n            res += temp2;\n            }        \n        if(!flag){return temp1;}\n        else{\n            if(temp1!=''){\n                res += temp1;\n            }\n            return res;}\n    }\n};\n```\n\n复杂度\n- 时间复杂度$O(N)$\n- 空间复杂度$O(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051993043","body":"思路：\n- 栈与队列的区别：栈Last in, First out, LIFO; 队列 First in, First out, FIFO；\n- 发展仅元素输出顺序不同，一头一尾，那么用2个栈进行维护，在输出时，让先入栈的为栈的top()，就像把瓶子倒过来一样。\n- 当然，在输入的时候，需要查看stk2是否还有元素，若有得让它回到stk1，保持输入的顺序不发生改变。\n\n代码\n```cpp\nclass MyQueue {\npublic:\n    // 通过\n    stack<int> stk1;\n    stack<int> stk2;\n\n    MyQueue() {}\n    \n    void push(int x) {\n        if(!stk2.empty()){\n            // stk2中元素移到stk1\n            while(!stk2.empty()){\n                stk1.push(stk2.top());\n                stk2.pop();            \n            }\n        }\n        stk1.push(x);\n    }\n    \n    int pop() {\n        if(!stk1.empty()){\n            while(!stk1.empty()){\n                stk2.push(stk1.top());\n                stk1.pop();\n            }\n        }\n        int res = stk2.top();\n        stk2.pop();\n        return res;\n    }\n    \n    int peek() {\n        if(!stk1.empty()){\n            while(!stk1.empty()){\n                stk2.push(stk1.top());\n                stk1.pop();\n            }\n        }\n        int res = stk2.top();\n        return res;\n    }\n    \n    bool empty() {\n        if(stk1.empty()&&stk2.empty()){\n            return true;\n        }\n        else{return false;}\n    }\n};\n```\n\n复杂度\n- 时间复杂度 push(), pop(), peek() $O(N)$; empty() $O(1)$;\n- 空间复杂度 $O(N)$ 调用2个栈，栈内存放长度为N的元素。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053684901","body":"思路：\n单调栈，\n- 非递增是1\n- 非递减是n；错得和题解是一模一样，卡在[4,2,2,1,1]，后使用融合栈中保存区块中最大元素，但是无法在连续重复元素情况下判断序列增减情况\n- 序列的增减情况，是通过arr[i]，进行更新，面对[1,1,..]时，当arr[2]==2，则栈中存放[1,1,2]; 当arr[2]==0时，栈中存放[1]。这是if语句无法判断的，所以有了code不通过2。\n\n代码\n```cpp\nclass Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n        int n=arr.size();\n        stack<int> stk;\n        // 单调栈\n\n        for(int i=0;i<n ;i++){\n           if(!stk.empty()&&stk.top()>arr[i]){\n            int cur=stk.top();\n            while(!stk.empty()&&stk.top()>arr[i]){\n                //一开始有多个重复的满足\n                stk.pop();\n            }\n            stk.push(cur);\n           }\n\n           else{\n            stk.push(arr[i]);\n           }\n\n        }\n        return stk.size();\n    }\n};\n// 不通过2\n// class Solution {\n// public:\n//     int maxChunksToSorted(vector<int>& arr) {\n//         int n=arr.size();\n//         stack<int> stk;\n//         // 单调栈\n//         stk.push(arr[0]);\n//         std::cout<<arr[0]<<endl;\n//         int flag = 0;\n//         for(int i=1;i<n ;i++){\n//             if(arr[i]<stk.top()) {\n//                 flag=-1;\n//                 continue;}\n//             // 序列最大与下一元素相等\n//             else if(arr[i]==stk.top()){\n//                 if(flag){ //修改判别条件\n//                     stk.push(arr[i]);\n//                 }\n//             }\n//             //\n//             else if(arr[i]>stk.top()){\n//                 flag=1;\n//                 stk.push(arr[i]);\n//                 std::cout<<i<<\":\"<<arr[i]<<endl;\n//             } \n\n//         }\n//         return stk.size();\n//     }\n// };\n```\n复杂度：\n- 时间复杂度$O(N)$\n- 空间复杂度$O(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054088630","body":"思路：\n参考题解\n- 当链表长度小于1，k==0时，原链表输出；\n- 计链表长度n；\n- 当k%n==0时，原链表输出；\n- 链表成环\n- 在p = n-k%n处断开，输出\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        //当链表为空，或者长度为1，k=0\n        //head->next==nullptr||head==nullptr||k==0 报错[]\n        if(k==0||head==nullptr||head->next==nullptr){\n            return head;\n        }\n        int n=1;\n        //计数\n        ListNode* cur = head;\n        while(cur->next!=nullptr){\n            cur = cur->next;\n            n++;\n        }\n        //此时，cur指向尾节点\n        \n        //计算在哪里断开\n        int part = n-k%n;\n        if(part==n){\n            return head;\n        }\n        //成环\n        cur->next = head; //cur指向头部        \n        while(part>0){\n            cur = cur->next;\n            part--;\n        }\n        // 旋转后，cur指向链表尾节点\n        ListNode* res=cur->next; // 现在还是环，指向答案头部\n        // 断开\n        cur->next = nullptr;\n        return res;\n    }\n};\n```\n复杂度：\n- 时间复杂度 $O(N)$\n- 空间复杂度 $O(1)$ 这里均使用指针","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2057191992","body":"思路：\n- 迭代\n- 间1隔选取相邻2个节点进行交换\n（循环程序写的不对，死循环）\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        // 不通过，循环超时\n        // 小于1\n        if(head==nullptr||head->next==nullptr)return head;\n        ListNode* cur = head;\n        ListNode* temp = head->next;\n        ListNode* temp2;\n        ListNode* preHead=new ListNode(-1);\n        ListNode* res=preHead;\n        while(cur!=nullptr && temp!=nullptr){\n            std::cout << cur->val << endl;\n            // if(temp->next!=nullptr) temp2=temp->next;\n            // else{ temp2=nullptr; }\n            // cur->next = nullptr;\n            // temp->next = cur;\n            // cur->next = temp2;\n            res->next = temp;\n            cur->next = temp->next;\n            temp->next = cur;\n            // temp->next = cur;\n            //\n            cur=cur->next->next;\n            if(temp->next==nullptr) break;\n            else{temp->next->next;}\n        }\n        return preHead->next;\n\n    }\n};\n```\n\n复杂度：\n- 时间 $O(N)$\n- 空间 $O(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2059421437","body":"思路：\n- 找到链表中点\n- 构造二叉数，左树先，递归\n\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode* median(ListNode* left, ListNode* right){\n        ListNode* fast = left;\n        ListNode* slow = left;\n        while(fast!=right && fast->next!=right){\n            fast = fast->next;\n            fast = fast->next;\n            slow = slow->next;\n        }\n        return slow;\n    }\n    TreeNode* buildTree(ListNode* left, ListNode* right){\n        if(left==right){\n            return nullptr;\n        }\n        ListNode* mid = median(left, right);\n        TreeNode* root = new TreeNode(mid->val);\n        root->left = buildTree(left, mid);\n        root->right = buildTree(mid->next,right);\n        return root;\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        // TreeNode* res = new TreeNode();\n        \n        // ListNode* preHead = new ListNode(-1);\n        // preHead->next = head;\n        // ListNode* cur = preHead->next;\n        // ListNode* fast = cur;\n        // if(head==nullptr) return res->left;\n        // //遍历链表\n        // while(cur!=nullptr){\n        //     if(fast==nullptr){ \n        //         TreeNode* test = new TreeNode(cur->val);\n        //         res->left = test;\n        //         break;\n        //     }           \n        //     cur = cur->next;\n        // }\n        \n        // return res;\n        return buildTree(head, nullptr);\n        \n    }\n};\n```\n\n复杂度：\n- 时间复杂度$O(NlogN)$\n- 空间复杂度$O(logN)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061403311","body":"思路\n讲义原题 双指针 cur1，cur2\n- cur1，cur2分布从headA，headB开始遍历，当其中一个为nullptr时，指向另一个链表头再遍历；\n- 若有交点，则cur1与cur2会在交点相遇\n假设，headA非交点长度为L1，headB非交点长度为L2，交点之后链表长度L3，指针相遇时，cur1，cur2走过的链表长度分别为L1+L3+L2,L2+L3+L1, 验证了它们会相遇。\n\n代码\n```cpp\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* cur1 = headA;\n        ListNode* cur2 = headB;\n        int flag1 = 0,flag2 = 0;\n        while(cur1!=nullptr || cur2!=nullptr){\n            if(cur1==nullptr){\n                cur1 = headB;\n                flag1 += 1;\n            }\n            if(cur2==nullptr){\n                cur2 = headA;\n                flag2 += 1;\n            }\n            if(cur1 == cur2){break;} // 表示指向同一节点，指针相等（不是值相等）\n            if(flag1==2||flag2==2){break;} //当没有交点时避免死循环\n            std::cout << cur1->val << endl;\n            cur1 = cur1->next;\n            cur2 = cur2->next;\n        }\n        return cur1;\n    }\n};\n```\n复杂度\n- 时间 $O(M+N)$ 最坏情况没有交点，两个链表长度分布M,N\n- 空间 $O(1)$ 双指针","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2062933128","body":"思路\n- 双指针，设快慢指针 fast,slow，fast每次走2步（c++没有nullptr->next 会报错，故进行判段），slow每次走1步\n- 当它们第一次相遇之后，fast回到链表头部，并每次走1步\n- 当它们再次相遇时，为环形链表入口\n\n证明：假设链表环形入口前长度L ，入口到第一次相遇点长度C，D+C=环形长度；\n- 2*slow走过长度 =  fast走过长度； 2(L+C)=L+D+2C； D+C 是一圈，slow被套圈了 ！\n- 有上式得 L=D，所以fast和slow第二次相遇在环形入口处。\n\n代码\n```cpp\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if(head==nullptr || head->next==nullptr || head->next->next==nullptr ) return nullptr;\n        ListNode* fast = head;\n        ListNode* slow = head;\n        do{ \n            if(fast==nullptr) break;\n            fast = fast->next;\n            if(fast==nullptr) break;           \n            fast = fast->next;\n            slow = slow->next;\n        }while(fast!=slow);  // 单独 while将多走一步\n        if(fast==nullptr||slow==nullptr) return nullptr;\n        fast = head;\n        while(fast!=slow){\n            fast = fast->next;\n            slow = slow->next;\n        }\n        return fast;\n    }\n};\n```\n\n复杂度\n- 时间$O(N)$ N 为链表长度\n- 空间$O(1)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2066800283","body":"```cpp\nclass Node{\npublic:\n    int key, value;\n    Node *pre, *next;\n    Node(int k=0, int v=0):key(k), value(v){}\n};\n\nclass LRUCache {\nprivate:\n    int capacity;\n    Node *dummy;\n    unordered_map<int, Node*> key_to_node;\n    // 删除一个节点（抽出一本书）\n    void remove(Node *x) {\n        x->pre->next = x->next;\n        x->next->pre = x->pre;\n    }\n\n    // 在链表头添加一个节点（把一本书放在最上面）\n    void push_front(Node *x) {\n        x->pre = dummy;\n        x->next = dummy->next;\n        x->pre->next = x;\n        x->next->pre = x;\n    }\n\n    Node *get_node(int key) {\n        auto it = key_to_node.find(key);\n        if (it == key_to_node.end()) // 没有这本书\n            return nullptr;\n        auto node = it->second; // 有这本书\n        remove(node); // 把这本书抽出来\n        push_front(node); // 放在最上面\n        return node;\n    }\n   \npublic:\n    \n\n    LRUCache(int capacity): capacity(capacity), dummy(new Node()) {\n        dummy->pre = dummy;\n        dummy->next = dummy;\n    }\n\n    int get(int key) {\n        auto node = get_node(key);\n        return node ? node->value : -1;\n    }\n\n    void put(int key, int value) {\n        auto node = get_node(key);\n        if (node) { // 有这本书\n            node->value = value; // 更新 value\n            return;\n        }\n        key_to_node[key] = node = new Node(key, value); // 新书\n        push_front(node); // 放在最上面\n        if (key_to_node.size() > capacity) { // 书太多了\n            auto back_node = dummy->prev;\n            key_to_node.erase(back_node->key);\n            remove(back_node); // 去掉最后一本书\n            delete back_node; // 释放内存\n        }\n    }\n\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067682157","body":"思路：\n- 后续遍历二叉树\n- 分别遍历左子树，右子树，有叶节点就加1，进行递归。\n- 递归结束 当遍历到根节点 return 1；\n- 递归中，return max(a.计算左子树深度 maxD(root->left) b.计算左子树深度 maxD(root->right) )+1。\n\n代码：\n```cpp\nclass Solution {\npublic:\n    int maxD(TreeNode* root){\n        if(!root){return 0;}\n        // std::cout << root->val<< endl;\n        // maxD(root->left);\n        // maxD(root->right); // 超时\n        return max(maxD(root->left),maxD(root->right))+1;\n\n    }\n    int maxDepth(TreeNode* root) {\n        int res = -1;\n        res = maxD(root);\n        return res;\n    }\n};\n```\n\n复杂度：\n- 时间 $O(N)$ 遍历所有节点\n- 空间 $O(N)$","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067869796","body":"思路：\n想用BFS，遍历1个和遍历2个同步成为我的难点，代码参考题解。\n- 空判断，都空是true，单空是false，都不空接着看；\n- 2个队列，放入树根p,q\n- 2个队列不空，开始遍历\n    - 当前节点是否相等，\n    - 子节点空了，空的不一样则false\n    - 子节点不空，放入队列\n- 遍历完，队列都空是true，其余是false\n\n其中，空的判断很多，还用到了异或，之前没怎么用到\n\n代码\n```cpp\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if(p==nullptr&&q==nullptr) return true;\n        else if(p==nullptr|| q==nullptr) return false;\n        queue<TreeNode*> que,que2;\n        bool res;\n        que.push(p);\n        que2.push(q);\n        int a = 0;\n        while(!que.empty()&&!que2.empty()){\n            auto node = que.front(); //队列现进先出\n            que.pop();\n            auto node2 = que2.front();\n            que2.pop();\n            if(node->val!=node2->val) return false;\n            // 异或^ 俩值相同为0\n            if((node->left==nullptr)^(node2->left==nullptr)) return false;\n            if((node->right==nullptr)^(node2->right==nullptr)) return false;\n\n\n            if(node->left!=nullptr) que.push(node->left);\n            if(node->right!=nullptr) que.push(node->right);\n\n            if(node2->left!=nullptr) que2.push(node2->left);\n            if(node2->right!=nullptr) que2.push(node2->right);         \n            // a++;           \n        }\n        // std::cout<< a << endl;\n        return que.empty()&&que2.empty();\n    }\n};\n```\n\n复杂度\n- 时间 $O(min(M,N))$ 同时访问，仅当不空时，才进行造作，所以为树M与树N其中最小值\n- 空间 $O(min(M,N))$ 同理","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068935752","body":"思路：\n- 前序遍历\npresum10+root->val;\n\n代码：\n```cpp\nclass Solution {\npublic:\n    int preOrder(TreeNode* root, int presum){\n        if(root==nullptr) return 0;\n        int sum = presum*10 + root->val;\n        if(root->left==nullptr&&root->right==nullptr){\n            return sum;\n        }\n        else {return preOrder(root->left, sum)+ preOrder(root->right, sum);\n}\n    }\n    int sumNumbers(TreeNode* root) {\n        return preOrder(root, 0);\n\n    }\n};\n```\n\n复杂度：\n- 时间 $O(N)$ 遍历节点\n- 空间 $O(H)$ 树的高度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/16#issuecomment-2072044078","body":"思路：\nBFS，遍历到最后一层，返回首元素。\n\n代码：\n```cpp\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        if(root->left == nullptr && root->right==nullptr) return root->val;\n        queue<TreeNode*> q;\n        q.push(root);\n        int res;\n        while(!q.empty()){\n            TreeNode* node;// 拿出首个元素\n            queue<TreeNode*> tmp;\n            int n = q.size();\n            for(int i=0;i<n; i++){\n            node = q.front();\n            q.pop();\n            if(node->left!=nullptr) tmp.push(node->left);\n            if(node->right!=nullptr) tmp.push(node->right);\n            }\n            q=tmp;\n            if(q.empty()) break; // for出来最后一次为空\n            res = tmp.front()->val;\n        }\n        return res;\n     \n    }\n};\n```\n\n复杂度：\n- 时间 $O(N)$ 树节点数\n- 复杂 $O(Q)$ 树的宽度","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"greyqt":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2043188462","body":"题解思路：\r\n（1）整型按位翻转存放在容器中\r\n（2）翻转num容器，然后按位相加，并考虑进位情况\r\n（3）翻转最后的结果即为答案\r\n代码：\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        int digit = 0;\r\n        vector<int> k_num;\r\n        vector<int> result;\r\n        for (int i = 0; ; i++)\r\n        {\r\n            digit = (k / (int)pow(10, i)) % 10;\r\n            if (digit == 0 && (int)pow(10, i) > k )\r\n            {\r\n                break;\r\n            }\r\n            k_num.push_back(digit); //翻转存放\r\n        }\r\n        int carry = 0; // 进位\r\n        int size = max(num.size(), k_num.size()); // 选择两个容器中较大的大小作为循环次数\r\n        reverse(num.begin(), num.end());    //num容器翻转\r\n        for (int i = 0; i < size; ++i) \r\n        {\r\n            int digit1 = (i < num.size()) ? num[i] : 0; // 如果 i 超出 num 的索引范围，取 0\r\n            int digit2 = (i < k_num.size()) ? k_num[i] : 0; // 如果 i 超出 k_num 的索引范围，取 0\r\n            int sum = digit1 + digit2 + carry; // 计算当前位的和\r\n            carry = sum / 10; // 更新进位\r\n            result.push_back(sum % 10); // 将当前位的结果添加到结果容器中\r\n        }\r\n        // 如果最高位有进位，需要额外添加一位\r\n        if (carry > 0) \r\n        {\r\n            result.push_back(carry);\r\n        }\r\n        reverse(result.begin(), result.end());  //翻转获得结果\r\n        return result;\r\n    }\r\n};\r\n```\r\n复杂度分析：\r\n时间复杂度：取决于整数 k 的位数和 num 容器的大小，因此为O(n)\r\n空间复杂度：取决于空间复杂度主要取决于 k_num 和 result 容器的大小，因此为O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045318663","body":"题解思路：\n（1）获取字符串的下标存在在结果数组中，及字符C的下标存在在数组中\n（2）使字符串的下标数组减去字符C的下标数组并取最小值\n代码：\n```cpp\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> ac,res;\n        int length = s.size();\n        for(int i=0; i < length; ++i)//获取字符串的下标，及字符C的下标\n        {\n            res.push_back(i);\n            if(c == s[i])\n                ac.push_back(i);\n        }\n        for(auto it = res.begin(); it != res.end(); ++it)//使字符串的下标减去字符C的下标并取最小值\n        {\n            int min = length;\n            for(auto at = ac.begin(); at != ac.end(); ++at)\n            {\n                int temp = abs((*it)-(*at));\n                if(min >= temp)\n                    min = temp;\n            }\n            *it = min;\n        }\n        return res;\n    }\n};\n```\n复杂度分析：\n时间复杂度：取决于字符串的长度n和目标字符 c 的数量m，因此为O(n*m)\n空间复杂度：取决于字符串的长度n对应的结果vector，因此为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2047883121","body":"### 题解思路：\n（1）使用vector容器作为数据的载体\n（2）vector的末尾作为栈顶\n### 代码：\n```cpp\nclass CustomStack {\nprivate:\n    int _size;\n    int _maxsize;\n    vector<int> stack;\n    \npublic:\n    CustomStack(int maxSize) {\n        _maxsize=maxSize;\n        _size=0;\n    }\n    \n    void push(int x) {\n        if(_size < _maxsize)\n        {\n            stack.push_back(x);\n            _size++;\n        }            \n    }\n    \n    int pop() {\n        if(0 == stack.size())\n            return -1;\n        \n        int re = stack.back();\n        \n        stack.pop_back();\n        _size--;                   \n        \n        return re;\n    }\n    \n    void increment(int k, int val) {\n        if(k > stack.size())\n            k=stack.size();\n            \n        int count=0;\n        for(auto it = stack.begin(); it != stack.end(); ++it)\n        {\n            if(count == k)\n                break;\n                \n            *it += val;\n            count++;\n        }\n    }\n};\n```\n**复杂度分析**：\n**CustomStack(int maxSize)**：\n- 时间复杂度：不依赖于输入，所以为O(1)\n- 空间复杂度：不依赖于输入，所以为O(1)\n\n**void push(int x)**：\n- 时间复杂度：push_back() 操作的平均时间复杂度是 O(1)，因此平均时间复杂度为O(1)，偶尔需要重新分配内存，导致复杂度为 O(n)\n- 空间复杂度：push_back() 操作的空间时间复杂度是 O(1)，因此平均空间复杂度为O(1)，偶尔需要重新分配内存，导致复杂度为 O(n)\n\n**int pop()**：\n- 时间复杂度：不涉及对内存的操作，只需要减少vector向量的计数，所以为O(1)\n- 空间复杂度：不需要额外的内存分配或释放，所以为O(1)\n\n**void increment(int k, int val)**：\n- 时间复杂度：时间复杂度取决于输入的int k，因此为O(k)\n- 空间复杂度：没有使用额外的空间，所以为O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2050025367","body":"### 题解思路：\n代码：\n```cpp\nclass Solution {\npublic:\nstring decodeString(string s) {\n    stack<char> strstack;\n    string res;\n    int count = 0;\n    for (int i = 0; i < s.size(); ++i)\n    {\n        if (s[i] != ']')\n        {\n            strstack.push(s[i]);//字符逐个压栈\n        }\n        else\n        {\n            string temp;\n            while (strstack.top() != '[')\n            {\n                temp = strstack.top() + temp;\n                strstack.pop();\n            }\n            strstack.pop();//[出栈\n            count = strstack.top() - '0';\n            strstack.pop();\n            string countstr;\n            while (count--)\n            {\n                countstr += temp;\n            }\n            for (int j = 0; j < countstr.size(); ++j)\n            {\n                strstack.push(countstr[j]);\n            }\n            temp.clear();\n            countstr.clear();\n        }\n    }\n\n    while (!strstack.empty()) {\n        res += strstack.top();\n        strstack.pop();\n    }\n\n    reverse(res.begin(), res.end());\n    return res;\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：\n- 空间复杂度：\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051946064","body":"### 题解思路：\n（1）创建一个存储数据的栈，和一个过渡处理的栈\n代码：\n```cpp\nclass MyQueue {\nprivate:\n    stack<int> store,deal;\npublic:\n    MyQueue() {\n        while (!store.empty())\n        {\n            store.pop();\n        }\n        while (!deal.empty()) \n        {\n            deal.pop();\n        }\n    }\n    \n    void push(int x) {\n        store.push(x);\n    }\n    \n    int pop() {\n        int res = 0;\n        while(!store.empty())\n        {\n            deal.push(store.top());\n            store.pop();\n        }\n        res = deal.top();\n        deal.pop();\n        while(!deal.empty())\n        {\n            store.push(deal.top());\n            deal.pop();\n        }\n        return res;\n    }\n    \n    int peek() {\n        int res = 0;\n        while(!store.empty())\n        {\n            deal.push(store.top());\n            store.pop();\n        }\n        res = deal.top();\n        while(!deal.empty())\n        {\n            store.push(deal.top());\n            deal.pop();\n        }\n        return res;\n    }\n    \n    bool empty() {\n        if(store.empty())\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决队列中的元素个数，因此时间复杂度为O(n)\n- 空间复杂度：使用了两个栈来实现，复杂度取决队列中的元素个数，因此空间复杂度为O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053528383","body":"### 题解思路：\r\n（1）创建一个已经排序好的数组sorted\r\n（2）创建两个哈希表，从左到右遍历数组，分别存储数组arr和数组sorted中元素出现的频次，数组中元素的值作为键，其出现的频次作为键值；\r\n（3）当两个哈希表中所有键的值都相等时，既表示可以切分原数组；\r\n代码：\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    int maxChunksToSorted(vector<int>& arr) {\r\n        vector<int> sorted(arr.begin(), arr.end());\r\n        unordered_map<int, int> arrmap, sortedmap;\r\n        sort(sorted.begin(), sorted.end());\r\n        \r\n        int count = 0;\r\n        for (int i = 0; i < arr.size(); ++i)\r\n        {\r\n            int flag = 0;\r\n            arrmap[arr[i]] += 1; //记录arr[i]出现的频次\r\n            sortedmap[sorted[i]] += 1;//记录sorted[i]出现的频次\r\n            for (const auto& pair : arrmap)\r\n            {\r\n                int temp = (pair.second + sortedmap[pair.first]) % 2;//如果pair.first出现的频次，在两个数组中出现一致；表示可以切分\r\n                if ((temp != 0 ) || (pair.second != sortedmap[pair.first]))//确保元素在两个数组中出现的频次一致\r\n                {\r\n                    flag = 1;\r\n                }\r\n            }\r\n            if (flag == 0)\r\n            {\r\n                count++;\r\n                arrmap.clear();\r\n                sortedmap.clear();\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n};\r\n```\r\n**复杂度分析**：\r\n- 时间复杂度：sorted数组排序的时间复杂度为 O(nlogn)，在两个for循环的遍历中，时间复杂度是n^2，因此时间复杂度比较高是O(n^2);\r\n- 空间复杂度：创建 sorted 数组和 arrmap、sortedmap 哈希表，长度取决于输入的数组的长度n，因此空间复杂度分别为 O(n)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2053981094","body":"### 题解思路：\n（1）计算链表长度并找到尾节点\n（2）形成环形链表减少尾处理\n（3）将 k 取模，减少多余操作\n（4）从头节点到新头节点的步数，找到新的尾节点，断开链表\n\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) \n    {\n        if (head == nullptr || k == 0)\n        {\n            return head;\n        }\n        ListNode* tail = head;\n        int len = 1;\n        while (tail->next)  //计算链表长度并找到尾节点\n        {\n            len++;\n            tail = tail->next;\n        }\n        tail->next = head; //形成环形链表减少尾处理；\n        k = k % len; //将 k 取模，减少多余操作\n        int step = len - k;//计算从头节点到新头节点的步数\n        ListNode* newtail = head;\n        for (int i = 1; i < step; ++i)\n        {\n            newtail = newtail->next;//找到新的尾节点\n        }\n        ListNode* newhead = newtail->next;// 新的头节点\n        newtail->next = nullptr;//断开链表\n        return newhead;\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于链表的长度n，因此时间的复杂度为O(n)\n- 空间复杂度：函数额外创建变量存储指针和普通变量，因此空间复杂度为 O(1)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2057042732","body":"### 题解思路：\n（1）分解子问题：每一次都是两个节点交换的问题\n（2）子问题推导递推公式：\nnewHead = head->next;\nhead->next = newHead->next;\nnewHead->next = head;\n（2）判断递归终止条件：链表剩余为空或者仅一个节点\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == nullptr || head->next == nullptr)\n        {\n            return head;\n        }\n        ListNode* newHead = head->next;\n        head->next = swapPairs(newHead->next);\n        newHead->next = head;\n        return newHead;\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于链表的长度n，因此时间的复杂度为O(n)\n- 空间复杂度：取决于链表的长度n，每一层递归调用都会使用一定的堆栈空间，因此空间复杂度为 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2059413611","body":"### 题解思路：\n1，分解子问题：每一次都是创建一个最小平衡二叉树\n2，子问题推导递推公式：\n（0）首次左端为链表的头，右端为链表尾null\n对于左子树，每一次递归，左端为链表的头，右端为中位数;\n对于右子树，每一次递归，左端为中位数->next，右端为链表尾null；\n（1）获取中位数，作为根节点；\n（2）中位树数的左侧为，左子节点（左子树）；中位数的右侧为右子节点（右子树）；\n（3）每一个左子树和右子树，重复步骤（1）（2）；\n3，判断递归终止条件：当左端等于右端时结束；\n代码：\n```cpp\nclass Solution {\npublic:\n    //快慢指针寻找中位数\n    ListNode* find_mid(ListNode* left, ListNode* right)\n    {\n        ListNode* slow = left;\n        ListNode* fast = left;\n        while (fast != right && fast->next != right)\n        {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n\n    TreeNode* creatree(ListNode* left, ListNode* right)\n    {\n        if(left == right)\n        {\n            return nullptr;\n        }\n        ListNode* mid = find_mid(left, right);\n        TreeNode* root = new TreeNode(mid->val);\n        root->left = creatree(left, mid);\n        root->right = creatree(mid->next, right);\n        return root;\n    }\n    TreeNode* sortedListToBST(ListNode* head) \n    {\n        return creatree(head,nullptr);\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于链表的长度n，以及二分创建树的递归，因此时间的复杂度为O(nlog n)\n- 空间复杂度：取决于链表的长度n，每一层递归创建一个新的树节点，因此空间复杂度为 O(log n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061492075","body":"### 题解思路：\n1，遍历链表headA将每个节点的地址存入数组中\n2，遍历链表headB，当headB中节点与A中的相等时返回，或者为找到既不相交返回空\n代码：\n```cpp\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        vector<ListNode *> headAvec;\n        while(headA != nullptr)\n        {\n            headAvec.push_back(headA);\n            headA = headA->next;\n        }\n        while(headB != nullptr)\n        {\n            for(auto it = headAvec.begin(); it != headAvec.end(); ++it)\n            {\n                if(*it == headB)\n                {\n                    return headB;\n                }\n            }\n            headB = headB->next;\n        }\n        return headB;\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于链表的长度n，时间的复杂度为O(n^2)\n- 空间复杂度：取决于链表的长度n，空间复杂度为 O( n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2064126848","body":"### 题解思路：\n1.，使用两个指针，一个慢指针（每次移动一步）和一个快指针（每次移动两步），同时从链表的起始位置出发。\n2.，如果链表中存在环，快指针和慢指针在环内相遇。既确定链表中存在环\n3，然后重新将快指针指向链表的起始位置，并且保持慢指针在相遇点。\n4，最后以相同的速度（每次一步）移动慢指针和快指针。当它们再次相遇时，相遇点即为环的起始节点。\n代码：\n```cpp\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n         ListNode *slow = head, *fast = head;\n        do{\n            if(!fast || !fast->next)   //不存在闭环，返回空指针\n                return nullptr;\n            slow = slow->next;\n            fast = fast->next->next;\n        }while(fast != slow);   //不相等未闭环，继续\n        //存在，fast指针返回起点\n        fast = head;\n        //查找闭环起点，再次相交即为闭环起点\n        while(fast != slow)\n        {\n            slow = slow->next;\n            fast = fast->next;\n        }\n        return fast;\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于链表的长度n，时间的复杂度为O(n)\n- 空间复杂度：仅创建指针，因此空间复杂度为 O( 1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2066822985","body":"还存在些问题\nclass LRUCache {\nprivate:\n    struct ListNode {\n        int key;\n        int val;\n        ListNode* next;\n        ListNode* last;\n        ListNode() : key(0), val(0), next(nullptr), last(nullptr) {}\n        ListNode(int _key, int _value)\n            : key(_key), val(_value), next(nullptr), last(nullptr) {}\n    };\n\n    ListNode* dummy_head;\n    ListNode* dummy_tail;\n\n    unordered_map<int, ListNode*> datamap;\n    int max_size;\n    int cur_size;\n\npublic:\n    LRUCache(int capacity) {\n        max_size = capacity;\n\n        dummy_head = new ListNode();\n        dummy_tail = new ListNode();\n\n        dummy_head->next = dummy_tail;\n        dummy_tail->last = dummy_head;\n    }\n\n    int get(int key) {\n        auto it = datamap.find(key);\n        if (it != datamap.end()) {\n            // 如果关键字 key 存在于缓存中\n            // 移动至头部\n            ListNode* cur_node = datamap[key];\n            moveToHead(cur_node);\n            // 则返回关键字的值\n            return cur_node->val;\n        } else {\n            return -1;\n        }\n    }\n\n    void put(int key, int value) {\n        auto it = datamap.find(key);\n        if (it != datamap.end()) {\n            // 如果关键字 key 已经存在，则变更其数据值 value\n            datamap[key]->val = value;\n            // 移动至头部\n            moveToHead(datamap[key]);\n        } else // 如果不存在，则向缓存中插入该组 key-value\n        {\n            // 创建新节点\n            ListNode* node = new ListNode(key, value);\n\n            // 头部插入\n            insertToHead(node);\n            // 保存哈希\n            datamap[key] = node;\n\n            cur_size++;\n            if (cur_size > max_size) {\n                // 如果插入操作导致关键字数量超过 capacity ，则应该 逐出\n                // 最久未使用的关键字。 删除末尾节点\n                ListNode* tail_node = removeTail();\n                // 删除哈希\n                datamap.erase(tail_node->key);\n                cur_size--;\n            }\n        }\n    }\n\n    void moveToHead(ListNode* node) {\n        node->last->next = node->next;\n        node->next->last = node->last;\n        node->next = dummy_head->next;\n        node->next->last = node;\n        dummy_head->next = node;\n        node->last = dummy_head;\n    }\n\n    void insertToHead(ListNode* node) {\n        ListNode* temp = dummy_head->next;\n        node->next = temp;\n        temp->last = node;\n        dummy_head->next = node;\n        node->last = dummy_head;\n    }\n\n    ListNode* removeTail() {\n        ListNode* tail_node = dummy_tail->last;\n        tail_node->last->next = dummy_tail;\n        dummy_tail->last = tail_node->last;\n        return tail_node;\n    }\n};\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067704256","body":"### 题解思路：\n（1）分解子问题：每一次都是计算当前子树的最大深度\n（2）子问题推导递推公式：\nleftDepth = maxDepth(root->left);\nrightDepth = maxDepth(root->right);\n(leftDepth, rightDepth) + 1；\n（2）判断递归终止条件，当节点为空时；\n代码：\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),\n * right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        // 递归的终止条件：当节点为空时，返回深度为 0\n        if (root == NULL) {\n            return 0;\n        } else {\n            // 递归地计算左右子树的最大深度\n            int leftDepth = maxDepth(root->left);\n            int rightDepth = maxDepth(root->right);\n            // 返回左右子树最大深度中的较大值加上 1（当前节点的深度）\n            return max(leftDepth, rightDepth) + 1;\n        }\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于二叉树节点的个数n，因此时间的复杂度为O(n)\n- 空间复杂度：取决于二叉树的最大深度maxDepth，每一层递归调用都会使用一定的堆栈空间，因此空间复杂度为 O(maxDepth)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2068029677","body":"### 题解思路：\n（1）分解子问题：每一次都是计算当前子树的两个子树是否相等\n（2）子问题推导递推公式：\n先判断左子树：isLeftTree = isSameTree(p->left, q->left)\n再判断右子树：isRightTree = isSameTree(p->right, q->right)\n（2）判断递归终止条件，当出现空节点时退出递归\n代码：\n```cpp\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if (p == nullptr && q == nullptr) \n        {\n            return true;\n        } \n        else if (p != nullptr && q != nullptr) \n        {\n            if (p->val != q->val) \n            {\n                return false;\n            } \n            else \n            {\n                int isLeftTree = isSameTree(p->left, q->left);\n                int isRightTree = isSameTree(p->right, q->right);\n                if (isLeftTree != true || isRightTree != true) \n                {\n                    return false;\n                } \n                else \n                {\n                    return true;\n                }\n            }\n        } \n        else \n        {\n            return false;\n        }\n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：取决于两个二叉树节点的个数n，因此时间的复杂度为O(n)\n- 空间复杂度：也是取决于两个二叉树节点的个数n，因此空间复杂度为 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2069997872","body":"代码：\n```cpp\nclass Solution {\npublic:\n    int sumNumbersDeal(TreeNode* root, int lastSum) {\n        if(root == nullptr)\n        {\n            return 0;\n        }\n        \n        int sum = lastSum * 10 + root->val;\n        if (root->left == nullptr && root->right == nullptr) \n        {\n            return sum;\n        } \n        else \n        {\n            int left = sumNumbersDeal(root->left, sum);\n            int right = sumNumbersDeal(root->right, sum);\n            return left + right;\n        }\n    }\n    int sumNumbers(TreeNode* root) \n    { \n        return sumNumbersDeal(root,0); \n    }\n};\n```\n**复杂度分析**：\n- 时间复杂度：时间的复杂度为O(n)\n- 空间复杂度：空间复杂度为 O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanglimbo":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2045612487","body":"补day1\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> addToArrayForm(vector<int>& num, int k) {\r\n        // 注意！32位的int最大值2147483647，是十位数，题干说明数组长度最大为10^4\r\n        // 如果把数组转成整数计算，会出现溢出的问题\r\n        // 所以只能用数组计算\r\n        int len = num.size();\r\n        vector<int> rev = num;\r\n        reverse(rev.begin(),  rev.end());\r\n        int i = 0;\r\n        int a = k / 10;\r\n        int b = k % 10;\r\n        int sum = 0;\r\n        int extra = 0; // 进位\r\n        int x = 0;\r\n        vector<int> res;\r\n        do {\r\n            if(i <len){\r\n                x = rev[i];\r\n            }else{\r\n                x = 0;\r\n            }\r\n            sum = x + b + extra;\r\n            extra = sum / 10;\r\n            //printf(\"%d + %d = %d\\n\",rev[i],b, sum);\r\n            res.push_back(sum % 10);\r\n            i++;\r\n            k = a;\r\n            a = k / 10;\r\n            b = k % 10;\r\n           \r\n        } while (k != 0 || i < len || extra!= 0);\r\n\r\n\r\n        reverse(res.begin(), res.end());\r\n        return res;\r\n        \r\n    }\r\n};\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045351587","body":"```cpp\r\nclass Solution {\r\npublic:\r\n    vector<int> shortestToChar(string s, char c) {\r\n        // 只想出来两个循环嵌套的暴力\r\n        int len = s.size();\r\n        vector<int> ans(len, len-1);\r\n        auto absDiff = [](int a, int b) -> int{\r\n            if(a>b){\r\n                return a-b;\r\n            }\r\n            return b-a;\r\n        };\r\n        for(int i = 0; i < len; i++){\r\n            char elem = s[i];\r\n            if(elem == c){\r\n                ans[i] = 0;\r\n            }else{\r\n                for(int j = 0; j < len; j++){\r\n                    char temp = s[j];\r\n                    if(temp == c){\r\n                        ans[i] = min(ans[i], absDiff(i,j));\r\n                    }\r\n                }    \r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2051799535","body":"```cpp\nclass CustomStack {\nprotected:\n    vector<int> m_customStack;\n    int m_pos = -1;\n    int m_maxSize = 1;\npublic:\n    CustomStack(int maxSize):m_customStack(maxSize),m_maxSize(maxSize) {\n    }\n\n    void push(int x) {\n        if(m_pos < m_maxSize - 1){\n            m_pos ++;\n            m_customStack[m_pos] = x;\n        }\n    }\n    \n    int pop() {\n        if(m_pos == -1){\n            return -1;\n        }\n        m_pos --;\n        return m_customStack[m_pos + 1];\n    }\n    \n    void increment(int k, int val) {\n        int increNum = 0;\n        if(m_pos + 1 < k ){\n            increNum = m_pos + 1;\n        }else{\n            increNum = k;\n        }\n        for(int i = 0;i < increNum;i++){\n            m_customStack[i] += val;\n        }\n    }\n};\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2053689006","body":"写了一个没有用到栈的错误版本，不支持[]的嵌套，而且以字母结尾的情况也不支持。明天再看看提示重写吧。sad\n```cpp\nclass Solution {\npublic:\n    string decodeString(string s) {\n        int len = s.size();\n        vector<int> repeats;\n        vector<string> patterns;\n        char c;\n        string repeat;\n        string pattern;\n        string ans;\n        for(int i = 0 ; i < len; i++){\n            c = s[i];\n            if(c >= '0' && c <= '9'){\n                // 也有可能是pattern记录结束\n                if(!pattern.empty()){\n                    repeats.push_back(1);\n                    patterns.push_back(pattern);\n                    pattern.clear();\n                }\n                repeat += c;\n            }else if(c == '['){\n                // 说明repeat记录完毕\n                repeats.push_back(stoi(repeat));\n                repeat.clear();\n            }else if(c == ']'){\n                // pattern记录完毕\n                patterns.push_back(pattern);\n                pattern.clear();\n            }else{\n                // 记录pattern\n                pattern += c;\n            }\n        }\n        for(int i = 0; i < repeats.size(); i++){\n            int num = repeats[i];\n            printf(\"%d\",num);\n            printf(\"%s\\n\",patterns[i].c_str());\n            for(int j = 0; j < num; j++){\n                ans += patterns[i];\n            }\n        }\n        return ans;\n    }\n};\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2066042728","body":"思路：用两个相反的栈，时间复杂度O(n)\n```cpp\nclass MyQueue {\n    \nprotected:\n    std::stack<int> stack;\n    std::stack<int> revStack;\n\npublic:\n    MyQueue() {\n    }\n    \n    void push(int x) {\n        stack.push(x); // stack的栈顶即队列末尾\n    }\n    \n    int pop() {\n        while(!stack.empty()){\n            revStack.push(stack.top());\n            stack.pop();\n        }// 弹出stack中的元素，进入revstack\n    \n        int ans = revStack.top(); // revstack的栈顶即队列开头\n        revStack.pop(); \n\n        while(!revStack.empty()){\n            stack.push(revStack.top());\n            revStack.pop();\n        }// 重新进入stack\n        return ans;\n    }\n    \n    int peek() {\n        while(!stack.empty()){\n            revStack.push(stack.top());\n            stack.pop();\n        }// 弹出stack中的元素，进入revstack\n\n        int ans = revStack.top(); // revstack的栈顶即队列开头\n        \n        while(!revStack.empty()){\n            stack.push(revStack.top());\n            revStack.pop();\n        }// 重新进入stack\n        return ans;\n    }\n    \n    bool empty() {\n        return stack.empty();\n    }\n};\n\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2068058056","body":"哇塞，我自己想出来的……难我天\r\n然后发现自己的解法时间复杂度O(n^2)，最优解O(n)\r\n```cpp\r\nclass Solution {\r\n\r\npublic:\r\n    int maxChunkBeforeCursor(vector<int>& arr,int cursor){\r\n        if(cursor == -1){\r\n            return 0;\r\n        }\r\n        int cutter = cursor - 1;\r\n        int maxBefore = arr[0], minAfter = arr[cursor];\r\n        while(cutter >= 0){\r\n            for(int i = 0; i <= cutter; i++){\r\n                maxBefore = max(maxBefore,arr[i]);\r\n            }\r\n            for(int j = cursor; j> cutter; j--){\r\n                minAfter = min(minAfter, arr[j]);\r\n            }\r\n            //cout << \"cutter为 \" << cutter << \"此时maxbefore=\"<< maxBefore << \"此时minAfter=\" <<minAfter << endl;\r\n            if(maxBefore <= minAfter){\r\n                break;\r\n            }\r\n            maxBefore = arr[0];\r\n            minAfter = arr[cursor];// 重置maxbefore和minafter\r\n            cutter--;\r\n        }\r\n        //cout << \"在位置 \" << cutter << \" 处切割\";\r\n        return 1 + maxChunkBeforeCursor(arr,cutter);\r\n    }\r\n    int maxChunksToSorted(vector<int>& arr) {\r\n        // 理解一下题意，最少的块数肯定是1块，即直接进行升序排序。\r\n        // 分块需要满足的条件： 第i块的最大值 <= 第i+1块的最小值\r\n        // 思路：从最后一格切一刀，看看能不能>=前面那块的最大值，不能的话就把划分的刀往左推进一格\r\n        // 以此类推，分割成功后，再递归查看左边的数组能分成几块\r\n\r\n        return maxChunkBeforeCursor(arr, arr.size()-1);\r\n    }\r\n};\r\n```\r\n\r\n抄一下最优解，太牛了吧\r\n```python\r\nclass Solution:\r\n    def maxChunksToSorted(self, arr: List[int]) -> int:\r\n        stk = []\r\n        for v in arr:\r\n            if not stk or v >= stk[-1]:\r\n                stk.append(v)\r\n            else:\r\n                mx = stk.pop()\r\n                while stk and stk[-1] > v:\r\n                    stk.pop()\r\n                stk.append(mx)\r\n        return len(stk)\r\n\r\n作者：ylb\r\n链接：https://leetcode.cn/problems/max-chunks-to-make-sorted-ii/solutions/1888343/by-lcbin-dh6b/\r\n\r\n```\r\n代码解析\r\n初始化栈 stk： 栈用来存储每一块的最大值。这是因为我们在判断是否可以形成一个新的块时，需要确保当前块的最大值不大于后面块的最小值。\r\n\r\n遍历数组中的每个元素 v： 对于数组中的每个元素，我们需要决定是将其加入当前块，还是合并到前一个块中。\r\n\r\n判断条件：\r\n\r\n如果栈为空或者当前元素 v 大于等于栈顶元素： 这意味着当前元素可以开始一个新的块或者加入到当前的块中，因为它没有破坏块的有序性。因此，直接将其推入栈中。\r\n否则： 如果当前元素小于栈顶元素，说明当前元素不能单独形成一个块，并且它也不能简单地加入到当前块中，因为它会破坏已有块的有序性。此时，我们需要将当前块与前面的块进行合并，直到找到一个块的最大值不大于当前元素。这个过程中，我们不断弹出栈顶元素，并保留遇到的最大值，直到栈顶元素小于等于当前元素。然后将这个保留的最大值重新推回栈中。\r\n返回结果： 最后，栈的大小就是可以形成的块的最大数量。每个栈元素代表一个块的最大值。","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2057189370","body":"## 递归，每次处理完一对节点，把后面的作为整体进行处理\n```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        // 递归\n        if(head == nullptr){\n            return nullptr;\n        }\n        if(head->next == nullptr){\n        //单数,最后一个元素\n            return head;\n        }\n        ListNode* first = head;\n        ListNode* second = head->next;\n\n        first->next = swapPairs(second->next);\n        second->next = first;\n        return second;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2059279831","body":"已经忘了平衡二叉树的旋转知识点了，这里用标准思路，即利用链表不断从中间分开构成树\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedListToBST(ListNode* head) {\r\n        // 改天再学avl tree，现在先用推荐的思路，即寻找中点，递归构造树节点\r\n        // 注意为了防止无限递归，断开链表\r\n        if(head == nullptr){\r\n            return nullptr;\r\n        }else if(head->next == nullptr){\r\n            TreeNode* node = new TreeNode(head->val);\r\n            // 这个有没有内存问题？\r\n            return node;\r\n        }\r\n\r\n        // 快慢指针法（龟兔赛跑）寻找链表中点，作为树节点的根部\r\n        ListNode* fast = head;\r\n        ListNode *slow = head;// 注意，ListNode* fast, *slow = head;只会给后者赋值，是错误的\r\n        ListNode* prev = nullptr;\r\n        \r\n        while(fast!=nullptr && fast->next!=nullptr){\r\n            /*确保两件事：\r\n            fast 指针不是 nullptr，即它确实指向了一个有效的链表节点。\r\n            fast->next 也不是 nullptr，这意味着 fast 指针所指向的节点后面至少还有一个节点。\r\n            */\r\n            prev = slow;\r\n            fast = fast->next->next;\r\n            slow = slow->next;\r\n        }\r\n        \r\n        //断开链表\r\n        if(prev!=nullptr){\r\n            prev->next = nullptr;\r\n        } // 这一步if是必要的，否则会出现尝试访问 prev->next 失败，程序崩溃\r\n        \r\n        TreeNode* root = new TreeNode(slow->val);\r\n        root->left = sortedListToBST(head);\r\n        root->right = sortedListToBST(slow->next);\r\n        return root;\r\n    }\r\n};\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode() : val(0), next(nullptr) {}\r\n *     ListNode(int x) : val(x), next(nullptr) {}\r\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\r\n * };\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\r\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\r\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\r\n * };\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061128740","body":"```cpp\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        // 方法1：暴力，对于每一个list A的节点，遍历list B 并比较 过程略\n\n        // 自己想的：计算链表，长度相减，长的那个先走差值步数，然后一起走，比对。灵感来源昨天遇到的快慢指针\n\n        ListNode* ptrA = headA;\n        ListNode* ptrB = headB;\n\n        // 已知链表A B均不为空 m为链表A长度，n为链表B长度\n        int m = 1, n = 1; \n        \n        while(ptrA->next!=nullptr){\n            ptrA = ptrA->next;\n            m++;\n        }\n        while(ptrB->next!=nullptr){\n            ptrB = ptrB->next;\n            n++;\n        }\n        \n        // 使用快慢指针，链表长的那一方先走abs(m-n)步\n        int distance = abs(m-n);\n        ptrA =headA;\n        ptrB = headB;\n        if(m>n){\n            while(distance>0){\n                ptrA = ptrA->next;\n                distance--;\n            }\n        }else{\n            while(distance>0){\n                ptrB = ptrB->next;\n                distance--;\n            }\n        }\n\n        \n        if(ptrA == ptrB){\n            return ptrA;// 相同的链表\n        }\n        ListNode* ans = nullptr;\n        while(ptrA->next!=nullptr){\n            if(ptrA->next == ptrB->next){\n                ans = ptrA->next;\n                break;\n            }\n            ptrA = ptrA->next;\n            ptrB = ptrB->next;\n        }\n        return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2064631779","body":"一开始用了笨办法，先快慢指针确定有环，再写了两层嵌套的循环，结果结果出错不知道为什么，找漏洞失败。\n最后重新回归快慢指针，再次使用快慢指针找到交叉点。\n```cpp\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // 不知道节点可不可以指向自己，我这里按照不能做的\n        // 先判断链表是否有环；如果有环，交叉点必然在head和slow中间\n        if(head == nullptr || head->next == nullptr){\n            return nullptr;\n        }\n        ListNode* fast = head;\n        ListNode* slow = head;\n        int flag = 0;\n        while(fast!=nullptr && fast->next != nullptr){\n            fast = fast->next->next;\n            slow = slow->next;\n            if(fast == slow){\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0){\n            return nullptr;\n        }\n        // 当flag=1，有环，此时快指针走了2s距离，慢指针走了s距离，相遇点出发走到相遇点为s\n        // 画一个示意图，设head到交叉处距离为x，则交叉处到相遇点为s-x,相遇点再走到交叉处为s-(s-x)=x\n        // 所以，从head到交叉点的距离=x=相遇点到交叉点的距离\n        ListNode* ptr = head;\n        while(1){\n            if(ptr == slow){\n                break;\n            }\n            ptr = ptr->next;\n            slow = slow->next;\n        }\n        return ptr;\n    }\n};\n```","onTime":false},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067715439","body":"```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(root == nullptr){\n            return 0;\n        }\n        int leftDepth = root->left == nullptr ? 0 : maxDepth(root->left);\n        int rightDepth = root->right == nullptr ? 0 : maxDepth(root->right);\n        return max(leftDepth,rightDepth) +1;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067718339","body":"感觉我的思路可能不是最简洁的？\n```cpp\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if(p == nullptr || q == nullptr){\n            return p == q;\n        }\n        bool valueSame = p->val == q->val;\n        return valueSame && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2069868575","body":"用了遍历的方法 在叶节点结算\n```cpp\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprotected:\n    int _sum = 0;\npublic:\n    void findLeafAndSumUp(TreeNode* root, int prev){\n        if(root->left == nullptr && root->right == nullptr){\n            // is leaf\n            _sum += prev*10 + root->val;\n            return;\n        }\n\n        if(root->left != nullptr){\n            findLeafAndSumUp(root->left, prev*10 + root->val);\n        }\n        if(root->right != nullptr){\n            findLeafAndSumUp(root->right, prev*10 + root->val);\n        }\n       \n        \n        return;\n    }\n    int sumNumbers(TreeNode* root) {\n        findLeafAndSumUp(root,0);\n        return _sum;\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rao-qianlin":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2045464036","body":"* 思路：按位进行运算，相加大于10，则进位。\n\n```java\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = scanner.nextInt();\n        }\n\n        int k = scanner.nextInt();\n        int mid;\n\n        for(int i = n-1; i >=0 ; i--){\n            if((int)arr[i] + k >= 10){\n                mid = (arr[i] + k)/10;\n                arr[i] = arr[i] + k - 10 * mid;\n                k = mid;\n            }\n            else{\n                arr[i] = arr[i] + k;\n                k = 0;\n            }\n        }\n        if(k!=0){\n            System.out.println(k+\" \");\n        }\n\n        for(int i = 0; i < arr.length; i++){\n            System.out.println(arr[i]+\" \");\n        }\n    }\n}\n```\n\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2045501831","body":"* 思路：正向反向遍历两次，取距离的最小值\n\n```java\nclass Solution {\n    public int[] shortestToChar(String s, char c) {\n        char[] sc = s.toCharArray();\n        int count = -1;\n        int[] de = new int[sc.length];\n        // 正向遍历计算一次值\n        for(int i=0; i<sc.length; i++){\n            if(sc[i] ==c){\n                count = i;\n            }\n            if(count == -1){\n                // 表示还没有遇到第一个c\n                de[i] = sc.length;\n            }\n            else{\n                de[i] = i-count;\n            }\n        }\n        count = -1;\n        // 反向遍历计算一次值\n        for(int i=sc.length-1; i>=0; i--){\n            if(sc[i] == c){\n                count = i;\n            }\n            if(count != -1){\n                de[i] = Math.min(count-i,de[i]);\n            }\n        }\n        return de;\n    }\n}\n```\n\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2052019645","body":"```java\nclass MyQueue {\n    private Stack<Integer> s1, s2;\n\n    public MyQueue() {\n        s1 = new Stack<>();\n        s2 = new Stack<>();\n    }\n    \n    public void push(int x) {\n        s1.push(x);\n\n    }\n    \n    public int pop() {\n        if(s2.isEmpty()){\n            while(!s1.isEmpty()){\n                s2.push(s1.pop());\n            }\n        }\n        return s2.pop();\n    }\n    \n    public int peek() {\n        if(s2.isEmpty()){\n            while(!s1.isEmpty()){\n                s2.push(s1.pop());\n            }\n        }\n        return s2.peek();\n    }\n    \n    public boolean empty() {\n        return s1.isEmpty() && s2.isEmpty();\n    }\n}\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054081351","body":"``` java \nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (head == null) {\n            return head;\n        }\n\n        ListNode end = head;\n        int len = 1;\n\n        while (end.next != null) {\n            end = end.next;\n            len += 1;\n        }\n        // return new ListNode(len);\n        // end 位于链表尾部 len为链表长度\n        // 连接形成环形链表\n\n        end.next = head;\n        // 处理k，如果k大于len，则减去len\n        while (k >= len) {\n            k -= len;\n        }\n        if (k == 0) {\n            // 不进行旋转\n            end.next = null;\n        } else {\n            // 找到链表第 len-k 个节点，就是新的尾结点\n            ListNode pre = head;\n            for (int i = 0; i < len - k - 1; i++) {\n                pre = pre.next;\n            }\n            // pre.next 就是新的头结点；\n            head = pre.next;\n            // 断开环\n            pre.next = null;\n\n        }\n\n        return head;\n\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2059453315","body":"```java\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        // 空链表、只有一个元素的链表不用交换\n        if(head == null || head.next == null){\n            return head;\n        }\n\n        ListNode temph = new ListNode(0);\n        temph.next = head;\n        ListNode slow = temph;\n        ListNode fast = temph.next.next;\n\n        while(fast.next != null && fast.next.next != null){\n            ListNode temp = fast.next;\n            fast.next = slow.next;\n            slow.next = fast;\n            fast = fast.next;\n            fast.next = temp;\n\n            slow = slow.next.next;\n            fast = fast.next.next;\n        }\n        if(fast.next == null){\n            fast.next = slow.next;\n            slow.next = fast;\n            fast = fast.next;\n            fast.next = null;\n        }\n        else if(fast.next.next == null){\n            ListNode temp = fast.next;\n            fast.next = slow.next;\n            slow.next = fast;\n            fast = fast.next;\n            fast.next = temp;\n        }\n        return temph.next;\n    }\n}\n```\n","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2059372486","body":"思路：\n递归构造子树，每次找到链表中点作为根节点\n使用快慢指针找到链表中点\n```Java\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if(head == null){\n            return null;\n        }\n        return toTree(head, null);\n    }\n    private  TreeNode toTree(ListNode start, ListNode end){\n        if(start == end){\n            return null;\n        }\n        ListNode slow = start;\n        ListNode fast = start;\n        while(fast != end && fast.next != end){\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        TreeNode root = new TreeNode(slow.val);\n        root.left = toTree( start, slow);\n        root.right = toTree( slow.next, end);\n        return root;\n    }\n}\n```\n时间复杂度 O(N*logN)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2059471150","body":"思路：使用双指针\n```java\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if( headA == null || headB == null){\n            return null;\n        }\n        ListNode pa = headA;\n        ListNode pb = headB;\n        while(pa!=pb){\n            if(pa == null){\n                pa = headB;\n            }\n            else{\n                pa = pa.next;\n            }\n            if(pb == null){\n                pb = headA;\n            }\n            else{\n                pb = pb.next;\n            }\n        }\n        return pa;\n        \n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2064370862","body":"思路：使用快慢双指针。\n```java\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if(head == null){\n            return null;\n        }\n\n        ListNode slow = head;\n        ListNode fast = head;\n\n        while(fast.next != null && fast.next.next != null){\n            slow = slow.next;\n            fast = fast.next.next;\n            if(slow == fast){\n                ListNode temp = head;\n                // int i = 0;\n                while(temp != slow){\n                    temp = temp.next;\n                    slow = slow.next;\n                    // i = i+1;\n                }\n                return temp;\n            }\n        }\n\n        return null;\n    }\n}\n```\n时间复杂度 O(N)","onTime":false},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dtjk":[null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2045781953","body":"```c++\nclass CustomStack {\npublic:\n    int ssize;\n    stack<int> ss;\n    CustomStack(int maxSize) {\n        ssize = maxSize;\n    }\n    \n    void push(int x) {\n        if (ss.size() < ssize) ss.push(x);\n    }\n    \n    int pop() {\n         if(!ss.empty()) {\n            int res = ss.top();\n            ss.pop();\n            return res;\n         }\n         else return -1;\n    }\n    \n    void increment(int k, int val) {\n         stack<int> ss2;\n         while (!ss.empty()){\n            ss2.push(ss.top());\n            ss.pop();\n         }\n         int sum = 0;\n         while(!ss2.empty()){\n            sum++;\n            if (sum <= k) ss.push(ss2.top() + val);\n            else ss.push(ss2.top());\n            ss2.pop();\n         }\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2049933805","body":"```\nclass Solution {\npublic:\n    string decodeString(string s) {\n    stack<int> numStack;\n    stack<string> resStack;\n    int num = 0;\n    string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            res.push_back(s[i]);\n        } else if (isdigit(s[i])) {\n            num = num * 10 + s[i] - '0';\n        } else if (s[i] == '[') {\n            resStack.push(res);\n            res = \"\";\n            numStack.push(num);\n            num = 0;\n        } else {\n            for (int j = 0; j < numStack.top(); j++) {\n                resStack.top() += res;\n            }\n            numStack.pop();\n            res = resStack.top();\n            resStack.pop();\n        }\n    }\n    return res;\n}\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2052019308","body":"```\nclass MyQueue {\nprivate:\n    std::stack<int> q1,q2;\npublic:\n    MyQueue() {}\n    \n    void push(int x) {\n        q1.push(x);\n    }\n    \n    int pop() {\n       if(!q2.empty()){\n           int t = q2.top();\n           q2.pop();\n           return t;\n       } \n       else {\n           while(!q1.empty()){\n               int x = q1.top();\n               q1.pop();\n               q2.push(x);\n           }\n           int t = q2.top();\n           q2.pop();\n           return t;\n       }\n    }\n    \n    int peek() {\n        if(!q2.empty()) return q2.top();\n        else {\n           while(!q1.empty()){\n               int x = q1.top();\n               q1.pop();\n               q2.push(x);\n           }\n           return q2.top();\n       }\n    }\n    \n    bool empty() {\n        if(q1.size() || q2.size()) return false;\n        return true;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053261966","body":"```\nclass Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n        vector<int> sorted;\n        int ans = 0;\n        for (int i = 0 ;i< arr.size();i++) sorted.push_back(arr[i]);\n        sort(sorted.begin(),sorted.end());\n        unordered_map<int,int> a,as;\n        for(int i = 0; i < arr.size(); i++) {\n            a[arr[i]]++;as[sorted[i]]++;\n            int flag = 1;\n            for ( int j = 0; j<=i; j++) {\n                if (a[arr[j]] != as[arr[j]]) {\n                    flag = 0;\n                    break;\n                }\n            }\n            if (flag == 1) ans++;\n        }\n        return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054053880","body":"```\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        ListNode* newhead=head,*forward=head,*temp=head;\n        int count=1;\n        if(!head) return nullptr;\n        while(temp->next){\n            temp=temp->next;\n            count++;\n        }\n        k=k%count;\n        for(int i=0;i<k;i++){\n            forward=forward->next;\n        }\n        while(forward->next){\n            newhead=newhead->next;\n            forward=forward->next;\n        }\n        forward->next=head;\n        head=newhead->next;\n        newhead->next=nullptr;\n        \n        return head;\n    }\n};\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2059421495","body":"```\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        TreeNode *root;\n        if (head == nullptr) return nullptr;\n        else if (head->next == nullptr) {\n            root = new TreeNode(head->val);\n            return root;\n        }\n\n        ListNode *fast = head, *slow = head, *pre = head;\n        while (fast != nullptr && fast->next != nullptr) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n\n        while (pre->next != slow) pre = pre->next;\n        root = new TreeNode(slow->val);\n        pre->next = nullptr; \n        root->left = sortedListToBST(head);\n        root->right = sortedListToBST(slow->next);\n\n        return root;\n\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061603977","body":"```\nclass Solution {\npublic:\nListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\nListNode *ptr1 = headA;\nListNode *ptr2 = headB;\n\n    while(ptr1 != ptr2){\n        ptr1 = ptr1->next;\n        ptr2 = ptr2->next;\n        \n        if(ptr1 == ptr2) break;\n        \n        if(ptr1 == NULL) ptr1 = headB;\n        if(ptr2 == NULL) ptr2 = headA;\n\n    }\n    return ptr1;\n}\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2064305954","body":"class Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        fast, slow = head, head\n        while True:\n            if not (fast and fast.next): return\n            fast, slow = fast.next.next, slow.next\n            if fast == slow: break\n        fast = head\n        while fast != slow:\n            fast, slow = fast.next, slow.next\n        return fast","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/12#issuecomment-2066825903","body":"```\nfrom collections import OrderedDict\nclass LRUCache(OrderedDict):\n\n    def __init__(self, capacity: int):\n        self.s = capacity\n        \n\n    def get(self, key: int) -> int:\n        if key in self:\n            self.move_to_end(key)\n            return self[key]\n        else:\n            return -1\n        \n\n    def put(self, key: int, value: int) -> None:\n        if key in self:\n            self.move_to_end(key)\n        self[key] = value\n        if len(self) > self.s:\n            self.popitem(last=False)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067603351","body":"class Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if(root==nullptr){\n            return 0 ;\n        }\n        return max(maxDepth(root->left)+1,maxDepth(root->right)+1);\n    }\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067835692","body":"class Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        if(p == nullptr || q == nullptr){\n            return p == q;\n        }\n        return (p->val == q->val) && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2070003611","body":"```\nclass Solution {\npublic:\n    int sum = 0;\n    int sumNumbers(TreeNode* root) {\n        dfs(root, 0);\n        return sum;\n    }\n\n    void dfs(TreeNode* root, int num) {\n        if (!root) return;\n        if (!root->left && !root->right) {\n            sum += num * 10 + root->val;\n            return;\n        }\n        dfs(root->left, num * 10 + root->val);\n        dfs(root->right, num * 10 + root->val);\n    }\n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"martina001":[{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/1#issuecomment-2049926597","body":"补打卡day 1\r\n思路： 直接记录进位 不断向前++ 即可，注意最后还需处理剩余的进位值和k剩余部分\r\n```\r\npublic List<Integer> addToArrayForm(int[] num, int k) {\r\n            int n = num.length;\r\n            int carry = 0;\r\n            LinkedList<Integer> linkedList = new LinkedList<>();\r\n            for (int i = n - 1; i >= 0; i--) {\r\n                int val = num[i];\r\n                int newVal = val + k % 10 + carry;\r\n                linkedList.addFirst(newVal % 10);\r\n                // num[i] = newVal % 10;\r\n                k /= 10;\r\n                carry = newVal / 10;\r\n            }\r\n            if(carry !=0 || k !=0){\r\n                int val = carry+k;\r\n                while(val !=0){\r\n                    linkedList.addFirst(val%10);\r\n                    val = val/10;\r\n                }\r\n            }\r\n            /*List<Integer> list = new ArrayList<>();\r\n            if(carry != 0){\r\n                list.add(carry);\r\n            }\r\n            for(int val:num){\r\n                list.add(val);\r\n            }*/\r\n            return linkedList;\r\n        }\r\n```\r\n    时间复杂度On 空间复杂度O1","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/2#issuecomment-2049956673","body":"两遍遍历可解，第一遍从左到右，第二遍从右到左，更新到e的较小值\r\n根据题意 这道题很像是找e为终点的最短路径，直接套用BFS来求解\r\n```\r\n private int[] bfs(String s,char c){\r\n        int n = s.length();\r\n        int res[] = new int[n];\r\n        Arrays.fill(res,-1);\r\n        LinkedList<Integer> queue = new LinkedList<>();\r\n        for(int i = 0;i<n;i++){\r\n            if(s.charAt(i) == c){\r\n                queue.offer(i);\r\n                res[i] =0;\r\n            }\r\n        }\r\n        int []dir = new int[]{-1,1};\r\n        while(!queue.isEmpty()){\r\n            int index = queue.poll();\r\n            for(int d:dir){\r\n                int next = index+d;\r\n                if(next >=0 && next<n && res[next] ==-1){\r\n                    res[next] = res[index] +1;\r\n                    queue.offer(next);\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n```\r\n每个数组只用入栈出栈一次，所以时间复杂度为On 用到了栈，所以空间复杂度为On","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/3#issuecomment-2050948479","body":"补打卡\nclass CustomStack {\n    // 1。 直接使用双栈比较直接，就是保存一个元素总和，当递增的时候用备用栈倒出来，从倒到n-k的时候开始增加，然后再倒回去原来的栈\n\n    // 2。 其实这道题考察的是模拟的思想，用数组表示栈，会更直接一点，每次incre就遍历0-k对数组执行++就行，这样incre的复杂度是Ok\n\n    // 3。 有一个比较巧妙的方法就是使用前缀和数组的思想，用数组实现栈，保存一个addArr[i]表示在i位置需增加的值，这样每次increment只用增加addArr[k]位置的值\n    // push保存一个栈顶索引，topIndex，pop的时候需要拿到stack[topIndex]+addArr[topIndex]的值\n    // 又因为每次incre的时候只是增加了addArr[k],为了保证每次取到的值都是已经被加过的，所以每次pop以后，addArr[topIndex-1]位置也要增加addArr[topIndex]\n    // 这样看似有点难理解，但是想清楚了就很妙了，可以保证incre的时候复杂度都是O1\n\n    int [] stack;\n    int addArr[];\n\n    int topIndex;\n\n    // 直接写一下前缀和方式\n    public CustomStack(int maxSize) {\n        addArr = new int[maxSize];\n        stack = new int[maxSize];\n        topIndex = -1;\n    }\n    \n    public void push(int x) {\n        if(topIndex == stack.length-1){\n            return ;\n        }\n        stack[++topIndex] = x;\n    }\n    \n    public int pop() {\n        if(topIndex==-1){\n            return -1;\n        }\n\n        int addVal = addArr[topIndex];\n        int res = stack[topIndex]+addVal;\n\n        // 更新最新top索引处的add值\n        if(topIndex>=1){\n            addArr[topIndex-1] += addVal;\n        }\n        // 记得还原addArr[topIndex] =0\n        addArr[topIndex] =0;\n        topIndex--;\n        return res;\n    }\n    \n    public void increment(int k, int val) {\n        // 这里要用topIndex和K比较\n        int actualK = Math.min(k,topIndex+1);\n        if(actualK >=1){\n            addArr[actualK-1] +=val;\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n//leetcode submit region end(Prohibit modification and deletion)\n\n}","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/4#issuecomment-2048784123","body":"class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n = num.length;\n        int carry = 0;\n        LinkedList<Integer> linkedList = new LinkedList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            int val = num[i];\n            int newVal = val + k % 10 + carry;\n            linkedList.addFirst(newVal % 10);\n            // num[i] = newVal % 10;\n            k /= 10;\n            carry = newVal / 10;\n        }\n        if(carry !=0 || k !=0){\n            int val = carry+k;\n            while(val !=0){\n                linkedList.addFirst(val%10);\n                val = val/10;\n            }\n        }\n        return linkedList;\n    }\n}\n直接进位计算，空间复杂度On 时间复杂度On","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2050823345","body":" // 思路：栈 先进后出，队列 先进先出 用两个队列可以实现栈 一个队列在offer的时候poll队列中其他元素再offer，即可实现栈\r\n        // 同理两个栈倒来倒去也可以实现队列 但是这样相当于在pop和peek的时候都要倒一遍\r\n        //  感觉可以想办法在push中实现\r\n\r\n```\r\nclass MyQueue {\r\n\r\n        LinkedList<Integer> stack;\r\n\r\n        LinkedList<Integer> helpStack;\r\n        public MyQueue() {\r\n            stack = new LinkedList<>();\r\n            helpStack = new LinkedList<>();\r\n        }\r\n        public void push(int x) {\r\n            stack.push(x);\r\n        }\r\n\r\n        public int pop() {\r\n            if(helpStack.isEmpty()){\r\n                while(!stack.isEmpty()){\r\n                    helpStack.push(stack.pop());\r\n                }\r\n            }\r\n           return helpStack.pop();\r\n        }\r\n\r\n        public int peek() {\r\n            if(helpStack.isEmpty()){\r\n                while(!stack.isEmpty()){\r\n                    helpStack.push(stack.pop());\r\n                }\r\n            }\r\n            return helpStack.peek();\r\n        }\r\n\r\n        public boolean empty() {\r\n            return helpStack.isEmpty() && stack.isEmpty();\r\n        }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053187566","body":"public int maxChunksToSorted(int[] arr) {\n        // 思路1 按照题意，相当于每个块内元素的和 与 排序后的arr对应范围内的元素和是相等的\n        // 将arr先排序得到sortArr，然后两个数组一起滑动 当和相等 就说明成了一个独立块，计算共几次相等和即可\n        // 这样的话 意味着时间复杂度为排序的时间复杂度O( nLogn) 空间复杂度为O(n)\n        int n = arr.length;\n//        int sortArr[] = Arrays.copyOf(arr,n);\n//        Arrays.sort(sortArr);\n//        int aSum =0,bSum = 0;\n//        int index =0;\n//        int res = 0;\n//        while (index<n){\n//            aSum+=arr[index];\n//            bSum +=sortArr[index];\n//            index++;\n//            if(aSum == bSum){\n//                res++;\n//                aSum = 0;\n//                bSum =0;\n//            }\n//        }\n//        return res;\n        // 另一种常见思路：单调栈 这个思路比较巧妙，假设现在已经分好了前面的块，又新增一个元素num，可以分情况讨论\n        // 1. num比最近的块中的max还大，那就num自成一块\n        // 2。 num比最近块中的max小，这时候就需要去和前一块的max2比较，如果比max2大，那么num加入最近块；如果比max2还小，那么num就得再往前一块进行比较，\n        // 直到找到一个块B的最大值小于num，这时num就必须和B块以及其后所有的块成为一块，整个块的最大值为最近块的最大值max。\n        // 所以单调栈中只用存储每个块的最大值即可 我们来写一下代码\n        LinkedList<Integer> stack = new LinkedList<>();\n\n        for(int i =0;i<n;i++){\n            int num =arr[i];\n            if(stack.isEmpty() || num>=stack.peekLast()){\n                stack.addLast(num);\n            }else{\n                int max = stack.removeLast();\n                // 只要发现有最大值小于num的，这些块都要被合并\n                while(!stack.isEmpty() && num<stack.peekLast()){\n                    stack.removeLast();\n                }\n                stack.addLast(max);\n            }\n        }\n        return stack.size();\n    }","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054602857","body":"// 这个题的自己做的时候错误在于，使用了固化的数组的思维去做一个链表题，后移几个节点，直接断掉再连即可，不用单纯的一个个后移\n\n        // 这个题应该是直接闭环，然后在k%n处断掉即可\n        if(head == null || k==0 || head.next == null){\n            return head;\n        }\n        ListNode temp = head;\n        int n = 1;\n        while(temp.next != null){\n            n++;\n            temp=temp.next;\n        }\n        int i = k%n;\n        if(i==0){\n            return head;\n        }\n        temp.next = head;\n        int needMove = n-i;\n        while(needMove-- > 0){\n            temp = temp.next;\n        }\n        ListNode  res =temp.next;\n        temp.next =null;\n        return res;\n    }","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2054612734","body":"思路：这是一个递归解法的优秀范例：\n private ListNode swapPair2(ListNode head){\n            if(head == null || head.next == null){\n                return head;\n            }\n            ListNode temp = head;\n            head = head.next;\n            head.next = temp;\n            head.next.next = swapPair2(head.next.next);\n            return head;\n        }\n\n时间复杂度On 空间复杂度为On（递归用到了栈）","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2058968098","body":"思路：考察的是递归和分治，dfs更容易理解，类似于归并排序，每个节点都走进一次递归，一次递归每个节点又会被遍历logn次，时间复杂度为O(nlogn)\r\ndfsMid考察的是中序遍历，每个节点只会被遍历一次，时间复杂度为O(n)\r\n\r\n```\r\npublic TreeNode sortedListToBST(ListNode head) {\r\n        // 由于要找平衡二叉搜索树 所以直接找到中点后进行归并即可，但是链表不是数组（108 将有序数组转换为二叉搜索树），不能直接快速找到中点，\r\n        // 所以只有递归采用中序遍历的方式，分治才可以保证On的复杂度，既然是中序并且分治 必然要先找到left 和right，right就是链表长度\r\n        int n = 0;\r\n        ListNode temp = head;\r\n        while(temp!=null){\r\n            n++;\r\n            temp = temp.next;\r\n        }\r\n//        return dfs(head,0,n-1);\r\n        headNode = head;\r\n        return dfsMid(0,n-1);\r\n    }\r\n\r\n    private TreeNode dfsMid(int l,int r){\r\n        // 学习一下题解中的中序遍历\r\n        if(l>r){\r\n            return null;\r\n        }\r\n        int mid =  (r-l)/2+l;\r\n        TreeNode leftNode = dfsMid(l,mid-1);\r\n        // 此时headNode就是当前的中点节点middleNode\r\n        TreeNode midNode = new TreeNode(headNode.val);\r\n        headNode = headNode.next;\r\n        midNode.left = leftNode;\r\n        midNode.right = dfsMid(mid+1,r);\r\n        return midNode;\r\n    }\r\n\r\n\r\n    private TreeNode dfs(ListNode head,int left ,int right){\r\n        // 递归结束条件 记得只要是递归分治，一定要考虑这个递归结束条件\r\n        if(left>right){\r\n            return null;\r\n        }\r\n        int mid = (right-left)/2+left;\r\n        // 此时head需要来到链表中点的位置\r\n        int moveNum = mid-left;\r\n        ListNode cur = head;\r\n        while(moveNum-- >0){\r\n            cur = cur.next;\r\n        }\r\n        TreeNode root = new TreeNode(cur.val);\r\n        root.left  = dfs(head,left,mid-1);\r\n        root.right =  dfs(cur.next,mid+1,right);\r\n        return root;\r\n    }\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2064005892","body":"```\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        // 把A和B接到一起 让两个指针分别走A-B 和B-A，如果有相遇 就是有交点 如果没有交点，此时两个指针都走到末尾为null\r\n        ListNode aNode = headA;\r\n        ListNode bNode = headB;\r\n        while(aNode != bNode){\r\n            if(aNode == null){\r\n                aNode = headB;\r\n            }else{\r\n                aNode = aNode.next;\r\n            }\r\n\r\n            if(bNode == null){\r\n                bNode = headA;\r\n            }else{\r\n                bNode = bNode.next;\r\n            }\r\n        }\r\n        return aNode;\r\n    }\r\n}\r\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2063976520","body":"思路：这是个数学题\r\n时间复杂度：On 空间复杂度O1\r\n\r\n```\r\npublic ListNode detectCycle(ListNode head) {\r\n        // 环形链表找环入口，经典公式：先fast和slow移动找到相遇点后，fast移动到链表头部，每次一步和slow同时走，再次相遇即为环入口\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        while(true){\r\n              if(fast == null || fast.next == null) return null;\r\n              fast = fast.next.next;\r\n              slow = slow.next;\r\n              if(fast == slow) break;\r\n        }\r\n\r\n        fast = head;\r\n        while(fast != slow){\r\n            fast=fast.next;\r\n            slow = slow.next;\r\n        }\r\n        return slow;\r\n    }\r\n\r\n```\r\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lxy1108":[null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051393283","body":"### 实现思路\n通过两个栈来实现，一个栈用来读取，另一个栈用来做缓存。在push的时候将现有的内容先转移到缓存栈里，将新元素放到读取栈最底端后，再把缓存栈里的数据放回来。\n\n### python 3代码\nclass MyQueue:\n\n    def __init__(self):\n        self.queue = collections.deque([])\n        self.cache = collections.deque([])\n\n    def push(self, x: int) -> None:\n        while self.queue:\n            n = self.queue.pop()\n            self.cache.append(n)\n        self.queue.append(x)\n        while self.cache:\n            n = self.cache.pop()\n            self.queue.append(n)\n\n\n    def pop(self) -> int:\n        return self.queue.pop()\n\n    def peek(self) -> int:\n        return self.queue[-1]\n\n    def empty(self) -> bool:\n        return len(self.queue)==0\n\n\n### 复杂度分析\n空间复杂度为O(N)，时间复杂度push为O(N)，其他操作为O(1)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2058954421","body":"#### 思路\n首先遍历一遍链表，得到链表的长度和链表的尾节点；\n再次从头遍历链表，指针停在旋转后链表的尾节点，然后进行链表后续节点的重新分配\n\n#### python3代码\n```\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        p = head\n        count = 0\n        while p:\n            tail = p\n            p = p.next\n            count+=1\n        k = k % count\n        if k==0:\n            return head\n        p = head\n        ind = 0\n        while p and ind<count-k-1:\n            p = p.next\n            ind += 1\n        newhead = p.next\n        p.next = None\n        tail.next = head\n        return newhead\n```\n\n#### 复杂度分析\n时间复杂度O(n)，因为需要从头遍历链表\n空间复杂度O(1)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2056379378","body":"**思路**\n采用迭代的方式，每次迭代交换当前指针后面的两个节点，直到当前指针后面的节点不足两个循环停止\n\n**Python3 代码**\n\n```\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        prehead = ListNode(0)\n        prehead.next = head\n        cur = prehead\n        while cur.next and cur.next.next:\n            node1 = cur.next\n            node2 = node1.next\n            node3 = node2.next\n            node2.next = node1\n            cur.next = node2\n            node1.next = node3\n            cur = node1\n        return prehead.next\n```\n\n**复杂度分析**\n时间复杂度O(n)，即为循环执行次数，n为节点个数\n空间复杂度O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/9#issuecomment-2058581121","body":"### 思路\n首先将链表转换为数组，方便后续直接访问元素。采用递归的方式构建树，由于需要构建平衡二叉树，因此树的根节点为有序数组的中间元素。\n\n### 代码\n```\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        nums = []\n        p = head\n        while p:\n            nums.append(p.val)\n            p = p.next\n        def genTree(nums):\n            if not nums:\n                return None\n            root_idx = len(nums)//2\n            root = TreeNode(nums[root_idx])\n            root.left = genTree(nums[:root_idx])\n            root.right = genTree(nums[root_idx+1:])\n            return root\n        return genTree(nums)\n```\n\n### 复杂度分析\n\n空间复杂度O(n),因为创建了一个新的数组\n\n时间复杂度O(ln)，因为遍历了一遍链表","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2060254797","body":"#### 思路\n先遍历list A并利用hashmap存储节点，再遍历list B并在遍历过程中检查当前节点是否在hashmap里，如果有则为交点，否则没有交点\n\n#### python3代码\n\n```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        nodesa = set()\n        pointera = headA\n        while pointera:\n            nodesa.add(pointera)\n            pointera = pointera.next\n        pointerb = headB\n        while pointerb:\n            if pointerb in nodesa:\n                return pointerb\n            pointerb = pointerb.next\n        return None\n```\n\n#### 复杂度分析\n\n空间复杂度 O(N)，因为额外开辟了空间用来存储其中一个链表的节点\n时间复杂度 O(N)，因为需要遍历链表","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2063456967","body":"#### 思路\n采用快慢指针，通过是否存在交点判断是否有环；若有环再引入一个指针从头开始和慢指针一起遍历，二者交点即为环的开始点\n#### python3代码\n```\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head is None:\n            return None\n        fast, slow = head, head\n        point = None\n        while fast.next and fast.next.next:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                point = fast\n                break\n        if point is None:\n            return None\n        slow = head\n        fast = point\n        while slow!=fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n```\n\n#### 复杂度分析\n\n空间复杂度O(1) 没有开辟额外空间\n时间复杂度O(N) 因为需要遍历链表","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/13#issuecomment-2067628657","body":"#### 思路\n采用层次遍历，每次循环遍历该层节点并将该层节点的子节点加入队列中，循环过程中记录层数，即为最大深度\n\n#### python3代码\n```\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        queue = collections.deque([root])\n        height = 0\n        while queue:\n            height+=1\n            q_tmp = []\n            for node in queue:\n                if node.left:\n                    q_tmp.append(node.left)\n                if node.right:\n                    q_tmp.append(node.right)\n            queue=q_tmp\n        return height\n```\n\n#### 复杂度分析\n时间复杂度O(N)，因为需要遍历树\n空间复杂度取决于树的结构，最坏情况为O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2067966290","body":"#### 思路\n递归的方式检测两树是否相同，递归方法中首先检查两树是否同为空，然后检查两树根节点值是否相同，以及左子树和右子树是否都相同。\n\n#### python3代码\n```\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val==q.val:\n            return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n        return False\n```\n\n#### 复杂度分析\n时间复杂度：O(min⁡(m,n))，其中 m 和 n 分别是两个二叉树的节点数\n空间复杂度：O(min⁡(m,n))，其中 m 和 n 分别是两个二叉树的节点数。空间复杂度取决于递归栈调用层数，即为较小二叉树的深度，最坏情况下为该树的节点数。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068741753","body":"#### 思路\n深度遍历树的同时记录经过的节点值，在遇到叶子节点时计算由该条路径构成的数字的值，最后返回所有数字的和\n\n#### python3代码\n```\nclass Solution:\n    def dfs(self, node, path):\n        path.append(node.val)\n        if not node.left and not node.right:\n            cur = 0\n            for i in range(len(path)):\n                cur += path[i] * (10**(len(path)-i-1))\n            self.rs += cur\n        if node.left:\n            self.dfs(node.left, path)\n        if node.right:\n            self.dfs(node.right, path)\n        path.pop()            \n\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        self.rs = 0\n        self.dfs(root, [])\n        return self.rs\n```\n\n#### 复杂度分析\n时间复杂度O(n) 因为需要遍历树中的所有节点\n\n空间复杂度O(n) 因为栈的深度取决于树的深度，在最坏情况下树的深度与节点个数相同","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/16#issuecomment-2072155840","body":"#### 思路\nbfs层次遍历树，返回最后一层最左侧的节点\n\n#### python3代码\n```\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        queue = collections.deque([root])\n        while queue:\n            left = queue[0]\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                if node.left is not None:\n                    queue.append(node.left)\n                if node.right is not None:\n                    queue.append(node.right)\n        return left.val\n```\n\n#### 复杂度分析\n\n时间复杂度o(n) 需要遍历所有节点\n\n空间复杂度o(n) 维护队列存储每层节点","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franklinsworld666":[null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/5#issuecomment-2051488571","body":"### 思路\n用双端队列来实现栈。\n用栈A 来保存队列push 进来的元素，用栈B来支持pop和peek操作。如果栈B为空，那么把栈A全部出栈并插入栈B，此时栈B中的元素出栈顺序刚好与队列一致，可以用来进行队列pop和peek操作；如果栈B不为空，则直接对栈B进行 pop和peek操作；\n\n### 代码\n```python3\nclass MyQueue:\n\n    def __init__(self):\n        self.stack1 = MyStack()\n        self.stack2 = MyStack()\n\n    def push(self, x: int) -> None:\n        self.stack2.push(x)\n\n    def pop(self) -> int:\n        if not self.stack1.empty():\n            return self.stack1.pop()\n        else:\n            while not self.stack2.empty():\n                self.stack1.push(self.stack2.pop())\n            return self.stack1.pop()\n\n    def peek(self) -> int:\n        if not self.stack1.empty():\n            return self.stack1.peek()\n        else:\n            while not self.stack2.empty():\n                self.stack1.push(self.stack2.pop())\n            return self.stack1.peek()\n\n    def empty(self) -> bool:\n        return self.stack1.empty() and self.stack2.empty()\n\nclass MyStack:\n    def __init__(self):\n        self.stack = deque()\n\n    def push(self,x):\n        self.stack.append(x)\n    \n    def pop(self) -> int:\n        if not self.empty():\n            return self.stack.pop()\n        else:\n            return None\n    \n    def peek(self) -> bool:\n        if not self.empty():\n            return self.stack[-1]\n        else:\n            return None\n    \n    def empty(self) -> bool:\n        return len(self.stack) == 0\n\n```\n\n### 复杂度分析\n+ 时间复杂度\n   + push: O(1)， 同双端队列的push操作\n   + empty: O(1)\n   + pop/peek: 最好O(1), 最坏O(N), 平均来讲O(1);  假设在栈A中存在X个元素时，进行pop/peek操作，那么要进行X次出栈入栈操作，也意味着接下来的 X-1 次pop/peek 操作只要常数时间，所以平均来讲时间复杂度是O(1)\n\n+ 空间复杂度: O(N)\n","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2057129878","body":"## 思路\n递归，先解决空链表、一个节点或两个节点的问题。然后递归结果剩下的。\n\n## 代码\n```python3\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        second = head. next\n        third = second.next\n        head.next = self.swapPairs(third)\n        second.next = head\n        head = second\n        return head\n```\n\n## 复杂度分析\n+ 时间复杂度：O(N)\n+ 空间复杂度:O(N)","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2068062301","body":"## 思路\n两棵树相同的条件：当前节点值相同，左子树相同，右子树相同\n\n## 代码\n```python3\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p and not q:\n            return False\n        if not p and q:\n            return False\n        if not p and not q:\n            return True\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```\n\n## 复杂度\n+ 时间复杂度：O(min(M,N))，比较的次数最大为规模较小的树的节点数\n+ 空间复杂度：O(log(min(M,N))), 递归深度为树的高度，最坏情况下为规模较小的树的节点数","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brainlds":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053580210","body":"class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        int res = 0;\n        int[] sortedArr = new int[arr.length];\n        System.arraycopy(arr, 0, sortedArr, 0, arr.length);\n        Arrays.sort(sortedArr);\n        for (int i = 0; i < sortedArr.length; i++) {\n            int x = arr[i], y = sortedArr[i];\n            cnt.put(x, cnt.getOrDefault(x, 0) + 1);\n            if (cnt.get(x) == 0) {\n                cnt.remove(x);\n            }\n            cnt.put(y, cnt.getOrDefault(y, 0) - 1);\n            if (cnt.get(y) == 0) {\n                cnt.remove(y);\n            }\n            if (cnt.isEmpty()) {\n                res++;\n            }\n        }\n        return res;\n    }\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huamulanyyds":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/6#issuecomment-2053654726","body":"class Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n    vector<int> vc = arr;\n    sort(vc.begin(),vc.end());\n    int res = 0;\n    long long sumArr = 0;\n    long long sumVc = 0;\n    for(int i=0;i<arr.size();i++){\n      sumArr += arr[i];\n      sumVc += vc[i];\n      if(sumArr == sumVc)\n         res++;\n    }\n    return res;\n    }\n};\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eclairs46":[null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/7#issuecomment-2054108279","body":"var rotateRight = function(head, k) {\r\n    if (!head || !head.next || k === 0) return head;\r\n\r\n    let length = 1;\r\n    let tail = head;\r\n    while (tail.next) {\r\n        tail = tail.next;\r\n        length++;\r\n    }\r\n    tail.next = head;\r\n\r\n    let newTail = head;\r\n    for (let i = 0; i < length - k % length - 1; i++) {\r\n        newTail = newTail.next;\r\n    }\r\n    \r\n    let newHead = newTail.next;\r\n    newTail.next = null;\r\n    return newHead;\r\n};","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/8#issuecomment-2056858398","body":"### 思路\r\n\r\n定义临时变量 next 保存下一个节点的下一个节点，交换 head 和 head.next 两个节点的位置\r\n\r\n### 代码\r\n\r\n```javascript\r\nvar swapPairs = function(head) {\r\n    if(!head || !head.next) {return head}\r\n    let next = head.next.next;\r\n    let newHead = head.next;\r\n    head.next.next = head;\r\n    head.next = swapPairs(next);\r\n    return newHead;\r\n};\r\n``` \r\n### 复杂度分析\r\n\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2069300768","body":"### 思路\r\n\r\n深度遍历\r\n\r\n### 代码\r\n\r\n```javascript\r\nvar sumNumbers = function(root) {\r\n    const recerve = (curRoot, sum) => {\r\n        if(curRoot === null) {return 0}\r\n        const curSum = sum * 10 + curRoot.val;\r\n        if(curRoot.left === null && curRoot.right === null) { return curSum; }\r\n        return recerve(curRoot.left, curSum) + recerve(curRoot.right, curSum)\r\n    }\r\n    return recerve(root, 0);\r\n};\r\n``` \r\n### 复杂度：\r\n\r\n- 时间复杂度： O(n)\r\n- 空间复杂度： O(h)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maike-hps":[null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061516451","body":"思路：\r\n\r\n计算两个链表的长度：首先遍历两个链表，计算它们的长度 m 和 n。\r\n对齐两个链表的起始位置：根据长度之差，移动较长链表的指针 diff = |m - n| 步，这样可以使得两个链表的尾部对齐。\r\n遍历链表寻找相交节点：然后从两个链表的当前位置开始，每次同时移动两个指针一步，如果两个指针指向了同一个节点，那么这个节点就是相交的起始节点。\r\n返回结果：如果遍历过程中没有找到相交的节点，那么返回 null。\r\n代码：\r\n`\r\nfunction getIntersectionNode(headA, headB):\r\n    if headA == null or headB == null:\r\n        return null\r\n\r\n    # Step 1: Calculate the lengths of the two lists\r\n    lenA, lenB = 0, 0\r\n    currentA, currentB = headA, headB\r\n    while currentA != null:\r\n        lenA += 1\r\n        currentA = currentA.next\r\n    while currentB != null:\r\n        lenB += 1\r\n        currentB = currentB.next\r\n\r\n    # Step 2: Align the starting positions of the two lists\r\n    currentA, currentB = headA, headB\r\n    if lenA > lenB:\r\n        for i in range(lenA - lenB):\r\n            currentA = currentA.next\r\n    else:\r\n        for i in range(lenB - lenA):\r\n            currentB = currentB.next\r\n\r\n    # Step 3: Traverse the lists to find the intersection node\r\n    while currentA != null and currentB != null:\r\n        if currentA == currentB:\r\n            return currentA\r\n        currentA = currentA.next\r\n        currentB = currentB.next\r\n\r\n    # Step 4: If no intersection is found, return null\r\n    return null\r\n`\r\n复杂度：时间复杂度是 O(m + n)，因为我们需要遍历两个链表来找到相交节点。由于 m 和 n 分别是链表 A 和 B 的长度，所以这个算法的时间复杂度可以简化为 O(m + n)。由于我们只使用了一个额外的指针来遍历链表，所以空间复杂度是 O(1)","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/15#issuecomment-2068389529","body":"`class TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\ndef sum_numbers(root):\r\n    def dfs(node, current_number):\r\n        if not node:\r\n            return 0\r\n        current_number = current_number * 10 + node.val\r\n        if not node.left and not node.right:\r\n            return current_number\r\n        return dfs(node.left, current_number) + dfs(node.right, current_number)\r\n    \r\n    return dfs(root, 0)\r\n\r\n\r\nroot1 = TreeNode(1)\r\nroot1.left = TreeNode(2)\r\nroot1.right = TreeNode(3)\r\n\r\nroot2 = TreeNode(4)\r\nroot2.left = TreeNode(9)\r\nroot2.left.left = TreeNode(5)\r\nroot2.left.right = TreeNode(1)\r\nroot2.right = TreeNode(0)\r\n\r\nprint(sum_numbers(root1)) \r\nprint(sum_numbers(root2)) `","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sanjiu81":[null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/10#issuecomment-2061561282","body":"思路 \n双指针\n代码\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* cur1 = headA;\n        ListNode* cur2 = headB;\n        int flag1 = 0,flag2 = 0;\n        while(cur1!=nullptr || cur2!=nullptr){\n            if(cur1==nullptr){\n                cur1 = headB;\n                flag1 += 1;\n            }\n            if(cur2==nullptr){\n                cur2 = headA;\n                flag2 += 1;\n            }\n            if(cur1 == cur2){break;} \n            if(flag1==2||flag2==2){break;} \n            std::cout << cur1->val << endl;\n            cur1 = cur1->next;\n            cur2 = cur2->next;\n        }\n        return cur1;\n    }\n};\n复杂度\n时间O(M+N）\n空间O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qinmengx":[null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/11#issuecomment-2063925697","body":"// 方法2: 快慢指针法\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\n/*1. 根据讲义内容, 假定快指针的速度是慢指针速度的2倍.\n2. 第一次相遇时, 快指针走的路程为L+C+环的周长(假定环的周长为C+D)\n                        慢指针走的路程为L+C ,即慢指针被套圈\n3. 得出L=D, 此时另快指针用1倍速从链表起始位置开始走, 刚好与慢指针\n   剩余的路程相等, 再次相遇时, 快慢再次相遇时, 即为环形链表入口.*/\n\nfunc detectCycle(head *ListNode) *ListNode {\n\tvar fast = head\n\tvar slow = head\n\tfor {\n\t\tif fast == nil || fast.Next == nil {\n\t\t\treturn nil\n\t\t}\n\t\tfast = fast.Next.Next\n\t\tslow = slow.Next\n\t\tif fast == slow {\n\t\t\tbreak\n\t\t}\n\t}\n\tfast = head\n\tfor fast != slow {\n\t\tfast = fast.Next\n\t\tslow = slow.Next\n\n\t}\n\treturn fast\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yashuning":[null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/14#issuecomment-2068076041","body":"思路：\n\t判断两颗树是否相同，主要判断2点\n\t\t1.对应的结构是否相同\n\t\t2.相同结构的节点值是否相同\n\t整体思路：递归\n\t具体思路：\n\t\t1.判断两个根节点是否相同\n\t\t2.判断根节点的左节点和右节点是否相同\n\t\n```code:\n\tclass Solution:\n\t    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n\t        def dfs(n1,n2):\n\t            if n1 is None and n2 is None:\n\t                return True\n\t            elif n1 is None or n2 is None:\n\t                return False\n\t            else:\n\t                if n1.val != n2.val:return False\n\t                return dfs(n1.left,n2.left) and dfs(n1.right,n2.right)\n\t        return dfs(p,q)\n```\n复杂度：相当于遍历了两棵树，复杂度为O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luzhaofeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-13-daily-check/issues/16#issuecomment-2071952211","body":"```python\nclass Solution:\n    def findValue(self, root):\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node.right: q.append(node.right)\n            if node.left:  q.append(node.left)\n        return node.val\n```\n\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}