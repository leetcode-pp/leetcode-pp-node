{"1":[],"2":[],"3":[],"4":[],"5":[],"6":[],"7":[],"8":[],"9":[],"10":[],"11":[],"12":[],"13":[],"14":[],"15":[],"16":[],"17":[],"18":[],"19":[],"20":[],"21":[],"22":[],"23":[],"24":[],"25":[],"26":[],"27":[],"28":[],"29":[],"30":[],"31":[],"32":[],"33":[],"34":[],"35":[],"36":[],"37":[],"38":[],"39":[],"40":[],"41":[],"42":[],"43":[],"44":[],"45":[],"46":[],"47":[],"48":[],"49":[],"50":[],"51":[],"52":[],"53":[],"54":[],"55":[],"56":[],"57":[],"58":[],"59":[],"60":[],"61":[],"62":[],"63":[],"64":[],"65":[],"66":[],"67":[],"68":[],"69":[],"70":[],"71":[],"72":[],"73":[],"74":[],"75":[],"76":[],"77":[],"78":[],"79":[],"80":[],"81":[],"82":[],"83":[],"84":[],"85":[],"86":[],"87":[],"88":[],"89":[],"90":[],"91":[],"839781960":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"954545647":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"1541732340":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"michaelxi3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darknightwriter":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"findlayzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laofuwf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lbc546":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zch-bit":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frankelzeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhaodev":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joeymoso":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hackbl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"q815101630":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiyishuoshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aouos":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"thinkfurther":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wengzhouyunfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whisht":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bzlff":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzzkains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenmengyu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uancen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuomituxedo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongranherz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gr52":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hydelovegood":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nikojxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fangxianshen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jokertzw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyang258":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kernelsue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erikahuang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kuang-mou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iloveqier":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duke-github":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"caterpillar-0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ashleyyma6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuki-yzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpc7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yujian920":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kiirii4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ucashurui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xixiao51":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feikerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"heng518":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yaya-bb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tlntin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richypang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fenchuiyun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry-lllman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nickyk319":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"herbertpan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wsmmxmm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fan-svg":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzejia":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunnyyujf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"phoenixflyingsky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nehchsuy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lzyxts":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elainekuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ll491119940":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"2learnsomething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ataraxyadong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzasd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miluowzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maylinglin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weijie-he":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brodxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leungogogo":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2522670730","body":"### Main Idea\nFor chunks `[c1, c2, c3, ..., cn]`, we have to maintain the property: `max(ci) <= min(cj)` if `i < j`. So we can create a monotonously increasing stack `stack` to keep track of the max value for each previous chunk. \n\nIf `arr[i] >= stack.peek()`, we can greedily create a new chunk and `stack.push(arr[i])`. Else, we need to find the previous chunk with max value smaller or equal to `arr[i]`, say `ck`, and we need to merge all the chunks `[c_k+1, ... c_cur]` with `arr[i]`.\n\nTo merge chunks, we can just pop all the max values representing those chunks off the stack, and push back the max among them (in our case, it will be stack top cuz this stack is increasing) as the max of the new chunk. \n\nFinally the size of the stack will be the number of chunks.\n### Code\n```java\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        int n = arr.length;\n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int num : arr) {\n            int max = num;\n            while (!stack.isEmpty() && stack.peek() > num) {\n                max = Math.max(max, stack.pop());\n            }\n            stack.push(max);\n        }\n        return stack.size();\n    }\n}\n```\n### Complexity Analysis\nTime: `O(n)`\nSpace: `O(n)`","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525554090","body":"### Main Idea\nUse iteration, process two nodes at a time. Say `tail` is the current tail of the new linked list, we use ListNode `cur` to keep tracks of the current node being processed, `next` is the second node being processed, here are three situations:\n\n1. `cur` is `null`, that means we are done and we can exit the loop.\n2. `cur` is not `null`, but `next` is `null`, which means only one node is left, and no need to swap, just append it to the current tail.\n3. Neither of them is `null`, so we record the next node to process in `nextCur`, then append `next` to the tail, and  append `cur` to `next`, also need to make `cur.next = null` and set it as the new tail.\n\nTo simplify coding and handle edge case, a dummy head is used.\n\n### Code\n```java\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode dummyHead = new ListNode(), tail = dummyHead, cur = head;\n        while (cur != null) {\n            ListNode next = cur.next;\n            if (next == null) {\n                tail.next = cur;\n                break;\n            } else {\n                ListNode nextCur = next.next;\n                tail.next = next;\n                next.next = cur;\n                cur.next = null;\n                tail = cur;\n                cur = nextCur;\n            }\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n### Complexity Analysis\n* Time: `O(n)`\n* Space: `O(1)`","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2527259733","body":"### Main Idea\nIf we pick a node as root of the tree, then we will need to determine the left and right subtrees with the list nodes on the left and right hand sides, which is the same problem but with a smaller size.\n\nAlso, we want the BST to be balanced, so when constructing the tree, we want to **choose the middle list node as the root**, so left and right will have same number of nodes, or one side will have an extra node.\n\n**Algorithm**\n1. Base case: If there is only one node left, return it as a new `TreeNode`.\n2. Get the middle node.\n3. Recusrivly call the function on the left and right lists and get the left and right subtree.\n\n### Code\n```java\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if (head == null) return null;\n        if (head.next == null) return new TreeNode(head.val);\n        \n        ListNode fast = head, slow = head;\n        while (fast != null && fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        \n        ListNode prev = head;\n        while (prev.next != slow) {\n            prev = prev.next;\n        }\n        prev.next = null;\n        TreeNode left = sortedListToBST(head);\n        TreeNode right = sortedListToBST(slow.next);\n        TreeNode root = new TreeNode(slow.val);\n        root.left = left;\n        root.right = right;\n        return root;\n    }\n}\n```\n### Complexity Analysis\nTime: `O(nlogn)`, divide and conquer.\nSpace: `O(height) = O(logn)`  for recursive calls.","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530917653","body":"```java\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        int lenA = listLen(headA), lenB = listLen(headB), diff = Math.abs(lenA - lenB);\n        ListNode cur1 = lenA < lenB ? headB : headA;\n        ListNode cur2 = lenA < lenB ? headA : headB;\n        for (int i = 0; i < diff; ++i) {\n            cur1 = cur1.next;\n        }\n        while (cur1 != null && cur2 != null) {\n            if (cur1 == cur2) {\n                return cur1;\n            } else {\n                cur1 = cur1.next;\n                cur2 = cur2.next;\n            }\n        }\n        return null;\n    }\n\n    private int listLen(ListNode head) {\n        if (head == null) {\n            return 0;\n        }\n        return 1 + listLen(head.next);\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2535640807","body":"### Main Idea\nDefine two pointers `fast` and `slow`, each iteration, `fast` moves 2 steps forward while `slow` moves 1 step. If there is a cycle, then `fast` will equals `slow` eventually, and if not, we will exit the loop.\n\nIf a cycle is detected, we need to find the starting point. \n\n```\nfast = 2 * slow\n\nfast = l + n1 * c + t\nslow = l + n2 * c + t\n\n\nl + n1 * c + t = 2 * l + 2 * n2 * c + 2 * t\nl = n1 * c - 2 * n2 * c = c * (n1 - 2 * n2) = n' * c - t\n```\n\n```\n     L\n--------   ----I-----\n           |         | D\n           ----------\n```\n### Code\n```java\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if (head == null) return null;\n        ListNode fast = head, slow = head;\n        while (fast != null && fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n            if (fast == slow) {\n                while (slow != head) {\n                    slow = slow.next;\n                    head = head.next;\n                }\n                return head;\n            }\n        }\n        return null;\n    }\n}\n```\n### Complexity Analysis\nTime: `O(n)`\nSpace: `O(1)`","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2537932278","body":"### Main Idea\nWe can use a linked list to simulate the cache queue, but if we just use a linked list, then the time complexity of `get()` and `remove()` will be `O(n)`.\n\nTo make the `get()` and `remove()` operations more efficient, we can use a map to store `(key, ListNode)` pairs. Given a key, we can get its node immediately from the map instead of going through the linked list.\n### Code\n```java\nclass LRUCache {\n    private class DBListNode {\n        private DBListNode prev;\n        private DBListNode next;\n        private int key;\n        private int val;\n\n        private DBListNode(int key, int val) {\n            this.key = key;\n            this.val = val;\n        }\n    }\n    \n    private DBListNode head;\n    private DBListNode tail;\n    private int cap;\n    private int size;\n    private Map<Integer, DBListNode> map;\n\n    public LRUCache(int capacity) {\n        head = new DBListNode(-1, -1);\n        tail = new DBListNode(-1, -1);\n        map = new HashMap<>();\n        head.next = tail;\n        tail.prev = head;\n        cap = capacity;\n    }\n    \n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        DBListNode node = map.get(key);\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n\n        node.prev = head;\n        node.next = head.next;\n        head.next.prev = node;\n        head.next = node;\n        return node.val;\n    }\n    \n    public void put(int key, int value) {\n        DBListNode node;\n        if (map.containsKey(key)) {\n            node = map.get(key);\n            node.val = value;\n            node.prev.next = node.next;\n            node.next.prev = node.prev;\n        } else {\n            if (size < cap) {\n                ++size;\n            } else {\n                DBListNode remove = tail.prev;\n                remove.prev.next = tail;\n                tail.prev = remove.prev;\n                map.remove(remove.key);\n            }\n            node = new DBListNode(key, value);\n        }\n\n        node.prev = head;\n        node.next = head.next;\n        head.next.prev = node;\n        head.next = node;\n        map.put(key, node);\n    }\n}\n```\n\n### Complexity Analysis\nTime: `O(1)` for all operations\nSpace: `O(cap)`","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543827340","body":"### Main Idea\nUse dfs to find all the root-to-leaf path numbers(use an integer `s` to record the number represented by previous nodes in the path, and `newNum = s * 10 + root.val`), and sum them up.\n\n### Code\n```java\nclass Solution {\n    private int sum;\n    public int sumNumbers(TreeNode root) {\n        if (root == null) return 0;\n        sum = 0;\n        dfs(root, 0);\n        return sum;\n    }\n    \n    private void dfs(TreeNode root, int s) {\n        if (root.left == null && root.right == null) {\n            sum += (s * 10 + root.val);\n            return;\n        }\n        \n        // dfs\n        if (root.left != null) dfs(root.left, s * 10 + root.val);\n        if (root.right != null) dfs(root.right, s * 10 + root.val);\n    }\n}\n```\n\n### Complexity Analysis\nTime: `O(n)`\nSpace: `O(h) = O(n)`","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544753765","body":"### Main Idea\nThis problem is asking for the leftmost node of the last layer, and when it comes to traversal by layer, BFS comes in handy.\n\nIn a standard BFS algorithm, we use a queue to keep track of the nodes on each layer, we just need to modify the algorithm to record the first node of the current layer, and if we exit the loop from the current layer, that means this is the last layer, and the node we recorded will be the one we want to find.\n\n### Code\n```java\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Queue<TreeNode> q = new ArrayDeque<>();\n        q.offer(root);\n        int res = 0;\n        while (!q.isEmpty()) {\n            res = q.peek().val;\n            int size = q.size();\n            for (int i = 0; i < size; ++i) {\n                TreeNode n = q.poll();\n                if (n.left != null) q.offer(n.left);\n                if (n.right != null) q.offer(n.right);\n            }\n        }\n        return res;\n    }\n}\n```\n### Complexity Analysis\nTime: `O(n)`\nSpace: `O(n)`","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suukii":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mirrors-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqy97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jakkiabc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyoneday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chouqin99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaogeg111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnhu23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ye2222":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uyplayer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guixian001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"serena9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junzmer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hx-code":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"admu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxiaomm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pgquestions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eldinzhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangwenzhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawnwu6688":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomtao626":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aiweng1981":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richard-lime":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acoada":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"duanyaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ccslience":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaiykk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cachezhou0617":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangtuo1999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cytrue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyryan-web":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"naomiwufzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuajingliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miss1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnxizhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"incipe-win":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"revisegoal":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckysq999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dereklisdr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"perfqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mryao1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"likeyousmile":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhg1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liquanluo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aq666888":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"samlu-ecnu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhongxiangxiang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hatorimain":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"neado":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaojunjun1110":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wxleah":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunl1ght":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kerrhl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"orangejuz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flyzenr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c1f2h3":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dlm001128":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxy94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aconcert":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linjunhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyqqq22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yibenxiao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elon-lau":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nowkizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsgtgyb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"irenia111":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"suiyi8760":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saltychess":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rabbit2010520":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ellie-wu05":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yopming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckytwj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzz607":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoulufeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xxoojs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"okkband":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wyz999":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hacker90":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ricjli":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luhaoling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flaming-cl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gelxgx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gaominghao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jessie725":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lsunxh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lanceli424":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qycoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qilin88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengheng-yun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smz1995":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"size-of":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moyuanhua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"9vivian88":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guxuehua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kirosola":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"biscuit279":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maoting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"youzhaing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jawn-ha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hanwangxxx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dujt-x":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"degndaixingqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gzgzgzgzgzgz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gentleman-goodman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyi-arch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zenwangzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyyxw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fourierhai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yangz001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mannnn6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haoyangxie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chjillout":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wenjialu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mhcn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coconutice":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackgaoyuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xingzhan0312":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufeng727":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fontendart":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yingchehu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cobayaz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tomato-tomato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xfliudx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"djd28176":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xilutian":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xy147":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"itsjacob":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shunanch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yppah-eb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"raychenlei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"woshichuanqilz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"willuuu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christina-soda":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jia98shanliang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"user-vannnn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tobepellucid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"johnvsd":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yueza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shawyuan97":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"victorhuang99":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cusanity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jay-xzj":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shiradaone":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xinyue-ma":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taojin1992":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joyce94":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"steven72574":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tian-pengfei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asuka1h":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaowangcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"james0608":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaneyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"azl397985856":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whgsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chengfengfengwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bulingbulingbuling":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"c2tr":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eden-ye":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"codingtrains":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"starorbiting":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo-xiaoxiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"passengersa":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509767434","body":"思路：\n1、将数组看成是一个加数，需要num和key逐位相加，需要考虑到进位，先定义一个是否进位的变量，0为不进位，1为进位，索引为num.length - 1 即数组中的最后一个，和key中的最小位相加，从而得知是否进位和计算得出当前的进位后的结果，然后新数组首部添加，在将key右移，用十位相加，依次类推，百位相加，索引自减1，直到 i>=0||k>0||carry>0都不满足时，则退出循环，返回相加后的结果\n时间复杂度分析：\n2、因为数组有多少个，就要有多少个进行相加，例如[1,2,3,4,5,6]和45，数组中的每项都需要加，索引其时间复杂度为O(N)\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n       let carry = 0 // 是否进位 0-不进位 1-进位\n  let i = num.length - 1\n  let result = []\n  // 逐位相加\n  while (i >= 0|| k > 0 || carry > 0) {\n    let digit = (i >= 0 ? num[i] : 0) + (k % 10) + carry\n    carry = Math.floor(digit / 10)\n    digit = digit % 10\n    result.unshift(digit)\n    k = Math.floor(k / 10)\n    i--\n  }\n  return result\n};","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525223698","body":"思路：\n1、定义链表节点类：首先，我们需要定义一个表示链表节点的类，通常包含一个值和一个指向下一个节点的指针。\n2、计算链表长度：遍历链表以确定其长度，并找到尾节点。\n3、处理旋转步数：根据链表长度调整旋转步数，因为旋转步数可能大于链表长度。\n4、找到新尾节点：根据调整后的旋转步数，找到新的尾节点。\n5、调整指针：将原尾节点连接到原头节点，然后断开新尾节点与新头节点之间的连接。\n时间复杂度：O(N)\n代码：\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n     if (!head || !head.next || k === 0) {\n    return head;\n  }\n\n  // Step 1: Calculate the length of the linked list\n  let length = 1;\n  let tail = head;\n  while (tail.next) {\n    tail = tail.next;\n    length++;\n  }\n  k = k % length;\n  if (k === 0) {\n    return head;\n  }\n  let newTail = head;\n  for (let i = 0; i < length - k - 1; i++) {\n    newTail = newTail.next;\n  }\n  let newHead = newTail.next;\n  newTail.next = null;\n  tail.next = head;\n  return newHead;\n};\n\nclass ListNode {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\nfunction printList(head) {\n  let current = head;\n  let result = '';\n  while (current) {\n    result += current.val + ' -> ';\n    current = current.next;\n  }\n  result += 'NULL';\n  console.log(result);\n}\nlet head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nhead.next.next.next = new ListNode(4);\nhead.next.next.next.next = new ListNode(5);\nlet newHead = rotateRight(head, 2);\nprintList(newHead); ","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543073283","body":"思路：\n1、递归终止条件：\n如果 p 和 q 都为 null，说明它们都到达了叶子节点，返回 true。\n如果其中一个为 null 而另一个不是，说明结构不同，返回 false。\n如果两个节点的值不同，返回 false。\n2、递归检查：\n\n递归检查 p 和 q 的左子树和右子树是否相同。\n时间复杂度： O(n)\n\n代码：\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n     // 如果两个节点都为空，则它们相同\n    if (p === null && q === null) {\n        return true;\n    }\n    \n    // 如果其中一个节点为空，另一个不为空，则它们不相同\n    if (p === null || q === null) {\n        return false;\n    }\n    \n    // 如果节点的值不同，则它们不相同\n    if (p.val !== q.val) {\n        return false;\n    }\n    \n    // 递归检查左子树和右子树\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shellylcooper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"testplm":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tom-zhouch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skylarxu214":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"taihui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huaxueguakele":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yang-chenyu104":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mlking15":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"-3":[],"cyonline":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rzhao010":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zywang0":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jetery":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"klspta":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bookyue":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jancerwu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"buer1121":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ceramickitten":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gg925407590":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alyenor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chenming-cao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggohem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dark-volute":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ronething":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jmastella":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"paopaohua":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dd2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mayloveless":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuexi001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nineis7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"abby-xu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"gsw9818":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaomingshixiaotang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"snmyj":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509841099","body":"```c\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n    vector<int> kk;\n    vector<int> ans ;\n    while ( k > 0 ) {\n         kk.push_back( k % 10 ) ;\n         k /= 10 ;\n    }\n    int add;\n    reverse ( num.begin(), num.end() );\n    for ( int i = 0; i < min ( num.size(), kk.size()); i++) {\n        add = ( num[i] + kk[i] ) / 10;\n\n\n        ans.push_back (( num[i] + kk[i] ) % 10) ;\n    }\n    if ( num.size() >= min (num.size(), kk.size())) {\n        for ( int i = min(num.size() , kk.size()) ;i < num.size(); i++ ) {\n            add += num[i];\n            ans.push_back ( add % 10);\n            add /= 10 ;\n        }\n    }\n    else {\n         for ( int i = min(num.size() ,kk.size());i < kk.size(); i++ ) {\n            add += kk[i];\n            ans.push_back ( add % 10);\n            add /= 10 ;\n        }\n    }\n    reverse ( ans.begin(), ans.end() );\n    return ans;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511778801","body":"```c++\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        vector<int> dis ;\n        int len = s.length();\n        for ( int i = 0; i < len ; i++ ) {\n            int p = i, q = i;\n            while ( p >= 0 || q < len ) {\n                if ( p >= 0 && s[p] == c) {dis.push_back(abs( p - i ));break;}\n                if ( q < len && s[q] == c) {dis.push_back(abs( q - i ));break;}\n                p--;\n                q++;\n\n            }\n        } \n        return dis ;  \n    }\n    \n};\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"flipn9":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wabw1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xqmmy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-pricity":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sclihuiming":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"amazeding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"astrking":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tzuikuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ringo1597":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brucezhang-utf-8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luanxing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"moin-jer":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lihua1997":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cuizezhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xuanaxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tiandao043":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"restlessbreeze":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ruikiwi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiminren":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"saitochen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtdcai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"albert556":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wuxiaoshawn":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zrtch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuzhu096":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"whoam-challenge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weisday":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"syh-coder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaaller":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyrie96521":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cavecrypto":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cxgbro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erjian96":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"a-polarbear":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexno1no2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yetfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhiyuanpeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bwspsu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"arinzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mdge":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yin02":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"elsa-zhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"asur4s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"littlesugarman":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhihaowan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"apockira":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guowei0223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuqianyang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sj941127":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjsuper":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yongxi-zhou":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"darwintk":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517764709","body":"方法：\n使用辅助栈，和两个临时变量：乘数multi，临时结果res，遍历字符串：\n- 当前字符为数字时，让其作为乘数multi的一部分\n- 当前字符为字母时，让其作为临时结果res的一部分\n- 在进入 \"[\" 时，将当前的乘数multi、临时结果res，存入辅助栈中，并将乘数和临时结果重新初始化；\n- 在离开 \"]\" 时，将辅助栈中的乘数pre_multi和前临时结果pre_res取出，让当前临时结果重复pre_multi，加在前临时结果的后方\n\n代码：\n```python\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack = []\n        multi = 0\n        res=\"\"\n        for char in s:\n            if char.isdigit():\n                multi = multi * 10 + int(char)\n            elif char.isalpha():\n                res += char\n            elif char==\"[\":\n                stack.append([res,multi])\n                res = \"\"\n                multi = 0\n            elif char==\"]\":\n                pre_res, pre_multi = stack.pop()\n                res = pre_res+pre_multi*res\n        return res\n```\ns长度为N\n时间复杂度：O(N)\n空间复杂度：O(N) 或当s包含多个\"[\", \"]\" 时，需要线性空间","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2528446696","body":"### 方法1\n对于链表，递归使用快慢指针，找到链表的中位数，生成树\n1. 使用快慢指针，快指针走两步，慢指针走一步；\n2. 当快指针为None，或者下一个为None时，慢指针的位置即为当前链表的中位数；\n3. 根据当前找到的中位，将链表分为左右两个链表，从当前中位开始构建树的根节点，同时分别对左右两个链表找中位，生成根节点的左右叶子节点；\n4. 递归运行步骤1~3，直到链表无法再区分左右，逐步返回；\n算法复杂度：\n- 时间复杂度：O(nlogn)\n- 空间复杂度：O(logn)\n\n```python\nclass Solution:\n    def findMid(self, left, right):\n        # 使用快慢指针找到链表中位数\n        fast = slow = left\n        while fast != right and fast.next != right:\n            fast = fast.next.next # 快指针走两步\n            slow = slow.next # 慢指针走一步\n        return slow\n\n    def buildTree(self, left, right):\n        if left==right:\n            return None\n        # 在链表中找中位数\n        mid = self.findMid(left,right)\n        root = TreeNode(mid.val)\n        root.left = self.buildTree(left,mid)\n        root.right = self.buildTree(mid.next,right)\n        return root\n\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        return self.buildTree(head,None)\n```\n\n### 方法2\n跟方法1一样递归生成树，但找中点的方法有所不同\n1. 方法2遍历一次链表，将链表存入一个列表arr中，再根据列表的长度，获取当前中点，作为根节点\n2. 将arr按中点分为左右两个列表，再分别找中点，以此类推进行递归\n算法复杂度：\n- 时间复杂度：O(n) \n- 空间复杂度：O(logn)\n\n```python\nclass Solution:\n    def buildTree(self, arr):\n        if len(arr)==0:\n            return None\n\n        mid = len(arr)//2\n        root = TreeNode(val=arr[mid])\n        root.left = self.buildTree(arr[:mid])\n        root.right = self.buildTree(arr[mid+1:])\n        return root\n\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if head is None:\n            return None\n        arr = []\n        while head is not None:\n            arr.append(head.val)\n            head = head.next\n        result = self.buildTree(arr)\n        return result\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2545988012","body":"## 513 找树左下角的值\n### 方法：深度优先搜索\n搜索树的所有叶子节点，记录当前所在节点的深度，先查找左叶子节点，再寻找右叶子节点，\n当进入到一个更深的深度，更新当前最深的左下角值，直到没有叶子节点\n\n```python \n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def __init__(self):\n        self.cur_height = 0\n        self.result = 0\n\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        self.dfs(root, 0)\n        return self.result\n\n    def dfs(self, root: Optional[TreeNode], height: int):\n        if root is None:\n            return\n        height += 1\n        self.dfs(root.left,height)\n        self.dfs(root.right,height)\n        if height > self.cur_height:\n            self.cur_height = height\n            self.result = root.val\n```\n算法复杂度：\n时间复杂度：O(n)，其中 n 是二叉树的节点数目。需要遍历 n 个节点\n\n空间复杂度：O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"h-steven":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mischaqi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wurongronga":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miduoliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luckyshenzhengkang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"y4h2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yoco323":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"forschers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shanshuiqiankun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"annabellhyx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hwfrankfung":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"frederickfan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huibinny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ggmybro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"myleetcodejourney":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"want2333":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"staringwhere":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allenfeng8":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ryanbaiyansong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dou-yu-xuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hyxupup":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cs12300":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chiehw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aesir-idun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kaldsk12":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hxj2001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"for123s":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zzhilin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yfu6":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mengsixing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"import-ant":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joriscai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangqianqian202301":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"airwalkers":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhumengcheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kofzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"leonalhq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hjy-u":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"csthaha":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zepherust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"feefeefee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hughlin07":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huizsh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chanceyliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hshen11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"horace7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangzh0114":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dragonfcl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huifeng248":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sarah11qing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"el1as7":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zcytm3000":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pangjiadai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xb798298436":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ywang525":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"limbo42":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorapocket":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zoeyzyzyzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jasonqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lp1506947671":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"texamc2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joemonkeylee":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"northseacoder":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dominique9898":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wl678":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"meisgithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sye9286":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fuku-l":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangliqi1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"richardtaok":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chocolate-emperor":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lydia61":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjiahuan17":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"seanutf":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyong-hub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"erquaner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiujingxukong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"x1aox1a":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"drinkmorekaik":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dinjufen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yuzmt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"munmust":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yan-jie":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hktangshuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zpbc007":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"linlizzz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"krabbejing":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"firehaosky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chao-cc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinjin680":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cruiseyugh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quieter2018":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jadeliu13":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaoq777":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jiangyanlineu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liuxiner":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yufanzh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franciszq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kangqinsen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"manwzy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jerry9926":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"soso1105":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pkuphy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenya-zhu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wty9sky":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"skyoct":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bingzxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaodingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jyjsunny":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aoxiangw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"enrilwang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aswrise":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"aneureka":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ljqchlsw":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jingyuzhou123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dianlandu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jameswangxin":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509792692","body":"思路：\n   因为数组位数可能很长，所以模拟两数相加算法。最后需要处理好算法的运行边界\n```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> ori = Arrays.stream(num).boxed().collect(Collectors.toList());\n        Collections.reverse(ori);\n        List<Integer> ans = new ArrayList<>();\n        int remain = k;\n        for (int i = 0; i < ori.size(); i++) {\n            remain = remain + ori.get(i);\n            ans.add(remain%10);\n            remain /= 10;\n        }\n        while (remain > 0) {\n            ans.add(remain%10);\n            remain /= 10;\n        }\n        Collections.reverse(ans);\n        return ans;\n    }\n}\n``` \n**时间复杂度**: O(N)\n**空间复杂度**: O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511910390","body":"**思路**： 有点参考前缀思想，统计前缀和后缀中相等的字符出现的位置\r\n```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int len = s.length();\r\n        int[] pre = new int[len];\r\n        int[] suf = new int[len];\r\n        pre[0] = (s.charAt(0) == c ? 0 : Integer.MAX_VALUE);\r\n        for (int i = 1; i < len; i++) {\r\n            if (s.charAt(i) == c) {\r\n                pre[i] = i;\r\n            } else {\r\n                pre[i] = pre[i-1];\r\n            }\r\n        }\r\n\r\n        suf[len-1] = (s.charAt(len-1) == c ? len-1 : Integer.MAX_VALUE);\r\n        for (int i = len - 2; i >= 0; i--) {\r\n            if (s.charAt(i) == c) {\r\n                suf[i] = i;\r\n            } else {\r\n                suf[i] = suf[i+1];\r\n            }\r\n        }\r\n\r\n        int[] ans = new int[len];\r\n        for (int i = 0; i < len; i++) {\r\n            ans[i] = Math.min(Math.abs(i-pre[i]), Math.abs(i-suf[i]));\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n```\r\n**时间复杂度**: O(N) \r\n**空间复杂度**: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514554434","body":"```java\nclass CustomStack {\n    private Deque<Integer> de = new LinkedList<>();\n    AtomicInteger el = new AtomicInteger(0);\n    private int sz = 0;\n    public CustomStack(int maxSize) {\n        sz = maxSize;\n    }\n    \n    public void push(int x) {\n        if (el.get() < sz) {\n            de.offerLast(x);\n            el.incrementAndGet();\n        }\n    }\n    \n    public int pop() {\n        if (el.get() > 0) {\n            el.decrementAndGet();\n            return de.pollLast();\n        } \n        return -1;\n    }\n    \n    public void increment(int k, int val) {\n        int pops = Math.min(k, el.get());\n        Deque<Integer> temp = new LinkedList<>();\n        for (int i = 0; i < pops; i++) {\n            int newValue = de.pollFirst() + val;\n            temp.offerLast(newValue);\n        }\n\n        while (temp.size() > 0) {\n            int tmpVal = temp.pollLast();\n            de.offerFirst(tmpVal);\n        }\n    }\n}\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack obj = new CustomStack(maxSize);\n * obj.push(x);\n * int param_2 = obj.pop();\n * obj.increment(k,val);\n */\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517851521","body":"```cpp\nclass Solution {\npublic:\n    string decodeString(string s) {\n        int now = 0;\n        return dfs(s, now);\n    }\n    string dfs(string& s, int& now) {\n        string res = \"\";\n        while (now < s.size() && s[now] != ']') {\n            if ('A' <= s[now] && s[now] <= 'Z' || 'a' <= s[now] && s[now] <= 'z')  res += s[now++];\n            else if ('0' <= s[now] && s[now] <= '9') {\n                int i = now, num = 0;\n                while (i < s.size() && s[i] != '[') {\n                    num = num * 10 + s[i] - '0';\n                    i++;\n                }\n                now = i + 1;\n                string temp = dfs(s, now);\n                while (num--) res += temp;\n                now++;\n            }\n        }\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520454916","body":"```java\nclass MyQueue {\n    Deque<Integer> deque = null;\n    public MyQueue() {\n        deque = new ArrayDeque<>();\n    }\n    \n    public void push(int x) {\n        deque.offerLast(x);\n    }\n    \n    public int pop() {\n        return deque.pollFirst();\n    }\n    \n    public int peek() {\n        return deque.peekFirst();\n    }\n    \n    public boolean empty() {\n        return !(deque.size() > 0);\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525212078","body":"```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (head == null || k == 0) {\n            return head;\n        }\n        ListNode p = new ListNode();\n        p = head; \n        int tot = 1;\n        //找到链表中最后一个节点\n        while (p.next != null) {\n            p = p.next;\n            tot++;\n        }\n        // 有可能k的大小超过数组的长度\n        k %= tot;\n        ListNode w = new ListNode();\n        w = head; \n        // 计算要走到哪个节点位置上 \n        for (int i = 0; i < tot - k - 1; i++) {\n            w = w.next;\n        }\n        p.next = head;\n        head = w.next;\n        w.next = null;\n        return head;\n    }\n}\n```\n**时间复杂度: O(N)**\n**空间复杂度: O(1)**","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2526193304","body":"```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null) return head;\n        ListNode dummy = new ListNode();\n        ListNode p = new ListNode();\n        ListNode q = new ListNode();\n        ListNode w = new ListNode();\n        p = head;\n        q = head.next;\n        dummy.next = head;\n        w = dummy;\n        while (p != null && q != null) {\n            w.next = q;\n            p.next = q.next;\n            q.next = p;\n            w = p;\n            p = p.next;\n            if (p != null) {\n                q = p.next;\n            }\n        } \n        return dummy.next;\n    }\n} \n**时间复杂度** : O(N) \n**空间复杂度**: O(1)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2528407011","body":"```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        return dfs(head);\n    }\n    TreeNode* dfs(ListNode* head) {\n        if (!head) return NULL;\n        if (!head->next) {\n            return new TreeNode(head->val);\n        }\n        ListNode* pre = NULL, *p = head, *q = head;\n        while (q && q->next) {\n            q = q->next->next;\n            pre = p;\n            p = p->next;\n        }\n        pre->next = NULL;\n        TreeNode* root = new TreeNode(p->val);\n        root->left = dfs(head);\n        root->right = dfs(p->next);\n        return root;\n    }\n};\n```\n**时间复杂度:** O(NlgN)\n**空间复杂度**  O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2532137906","body":"```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode p = headB;\n        ListNode q = headA;\n        while (headA != headB) {\n            if (headA == null) {\n                headA = p;\n                continue;\n            }\n            if (headB == null) {\n                headB = q;\n                continue;\n            }\n        \n            headA = headA.next;\n            headB = headB.next;\n        }\n        return headA;\n    }\n}\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2536372423","body":"```cpp\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (!head || !head->next) return NULL;\n        auto p = head, q = head->next;\n        while (q) {\n            p = p->next;\n            q = q->next;\n            if (!q) return NULL;\n            q = q->next;\n            if (p == q) {\n                p = head, q = q->next;\n                while (p != q) {\n                    p = p->next;\n                    q = q->next;\n                }\n                // cout<< p->val << endl;\n                return p;\n            }\n        }\n        return NULL;\n    }\n};\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540328808","body":"```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    private int ans = 0;\n    private int deepth = 1;\n\n    public int maxDepth(TreeNode root) {\n        deepth -= 1;\n        return dfs(root, deepth);\n    }\n\n    int dfs(TreeNode root, int deepth) {\n        if (root == null) {\n            return Math.max(ans, deepth);\n        }\n        return Math.max(dfs(root.left, deepth + 1), dfs(root.right, deepth + 1));\n    }\n}\n```\n**时间复杂度**： O(N) \n**空间复杂度**： O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543002937","body":"```java\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if ((p == null && q != null)\n            || (p != null && q == null)) {\n            return false;\n        }\n        if (p != null && q != null) {\n            if (p.val != q.val) {\n                return false;\n            } \n            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n        }\n        return true;\n    }\n}\n```\n**时间复杂度**: O(N)\n**空间复杂度**: O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543507693","body":"```java\nclass Solution {\n    private int sum = 0;\n    public int sumNumbers(TreeNode root) {\n        dfs(root, 0);\n        return sum;\n    }\n\n    public void dfs(TreeNode root, int pathSum) {\n        if (root == null) {\n            return;\n        }\n        pathSum = pathSum * 10 + root.val;\n        dfs(root.left, pathSum);\n        dfs(root.right, pathSum);\n        if (root.left == null && root.right == null) {\n            sum += pathSum;\n        }\n    }\n}\n``` \n**时间复杂度: O(N)**\n**空间复杂度: O(N)** ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544757735","body":"思路： 每次先搜左子树，再搜右子树，这样就可以保证搜到的节点一定是整颗树中最左边的节点。为什么正确 具体就可以尝试反证法进行证明 :)\n```java\nclass Solution {\n    private int maxDepth = 0;\n    private int ans = 0;\n    public int findBottomLeftValue(TreeNode root) {\n        dfs(root, 1);\n        return ans;\n    }\n\n    public void dfs(TreeNode root, int depth) {\n        if (root == null) {\n            return;\n        }\n        if (depth > maxDepth) {\n            maxDepth = depth;\n            ans = root.val;\n        }\n        dfs(root.left, depth + 1);\n        dfs(root.right, depth + 1);\n    }\n}\n```\n**时间复杂度:O(N)** ","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2551297607","body":"```cpp\nclass Solution {\npublic:\n    vector<vector<int>> verticalTraversal(TreeNode* root) {\n        vector<tuple<int, int, int>> nodes;\n\n        function<void(TreeNode*, int, int)> dfs = [&](TreeNode* node, int row, int col) {\n            if (!node) {\n                return;\n            }\n            nodes.emplace_back(col, row, node->val);\n            dfs(node->left, row + 1, col - 1);\n            dfs(node->right, row + 1, col + 1);\n        };\n\n        dfs(root, 0, 0);\n        sort(nodes.begin(), nodes.end());\n        vector<vector<int>> ans;\n        int lastcol = INT_MIN;\n        for (const auto& [col, row, value]: nodes) {\n            if (col != lastcol) {\n                lastcol = col;\n                ans.emplace_back();\n            }\n            ans.back().push_back(value);\n        }\n        return ans;\n    }\n};\n\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhenxied":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"nuozhouzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shin-guid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bochengwan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kyo-tom":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"uratora":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guitarys":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sosdogecoin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zol013":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lrwhc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwewwt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cyk1337":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangyu1131":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"diana21170648":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"61hhh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"quaaaaaack":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"acy925":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bi9potato":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"guangsizhongbin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhaoygcq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"catkathy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yqycs":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhuxinyu-znb":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freesan44":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"mo660":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sencc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"randong22":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beginner-jamji":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yzhyzhyzh123":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sunstrongchina":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dongzegithub":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"metsystem":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"miller-em":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dorian-byte":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yizhewill":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaojunch":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhouliuhuo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"beanza":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"kingxiaozhe":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ygnauh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wzbwzt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"iambigchen":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"weiboshi":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"master-guang":[null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514333505","body":"```js\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.maxSize = maxSize;\n  this.res = [];\n};\n\n/**\n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.res.length < this.maxSize) {\n    this.res.push(x);\n  }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  if (this.res.length) {\n    return this.res.pop();\n  } else {\n    return -1;\n  }\n};\n\n/**\n * @param {number} k\n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  let len = this.res.length;\n  if (len < k) {\n    this.res = this.res.map((item) => (item += val));\n  } else {\n    let arr = this.res.splice(0, k);\n    this.newArr = arr.map((item) => (item += val));\n    this.res = [...this.newArr, ...this.res];\n  }\n\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525481316","body":"```js\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    let dummyHead = new ListNode(0, head)\n    let cur = dummyHead\n    while(cur.next && cur.next.next) {\n        let temp = cur.next\n        let temp1 = cur.next.next.next\n        cur.next = cur.next.next\n        cur.next.next = temp\n        temp.next = temp1\n        cur = cur.next.next\n    }\n    return dummyHead.next\n};","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2533388614","body":"```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar detectCycle = function(head) {\n    let slow = head;\n    let fast = head;\n    while(fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if(slow === fast) {\n            let index1 = fast;\n            let index2 = head;\n            while(index1 !== index2) {\n                index1 = index1.next;\n                index2 = index2.next\n            }\n            return index2\n        }\n    }\n    return null\n};","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543854267","body":"```js\nvar sumNumbers = function(root) {\n    return dfs(root, 0);\n};\nconst dfs = (root, prevSum) => {\n    if (root === null) {\n        return 0;\n    }\n    const sum = prevSum * 10 + root.val;\n    if (root.left == null && root.right == null) {\n        return sum;\n    } else {\n        return dfs(root.left, sum) + dfs(root.right, sum);\n    }\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jennyjgao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wangjay408":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chang-you":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rocjemaintiendrai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ainfinitedz":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"christ36":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hengistchan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huiyingc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"andyli4":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"momogir":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jamjid":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"freeroo2":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ycan253":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"laurallalala":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509557352","body":"class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        power = 0\n        res = 0\n        for i in range(len(num)-1, -1, -1):\n            res += num[i]*10**power\n            power += 1\n        res += k\n        res_array = []\n        while res > 0:\n            digit = res % 10 \n            res = res // 10\n            res_array.insert(0, digit)\n        return res_array","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2510681842","body":"```\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        n = len(s)\n        left2right = [float(\"inf\")]*n\n        last = -float(\"inf\")\n        for i in range(n):\n            if s[i] == c:\n                left2right[i] = 0\n                last = i\n            else:\n                left2right[i] = abs(i - last)\n        last = float(\"inf\")\n        for i in range(n-1, -1, -1):\n            if s[i] == c:\n                last = i\n            else:\n                left2right[i] = min(abs(last - i), left2right[i])\n        return left2right\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513486828","body":"```\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n        \n\n    def pop(self) -> int:\n        if len(self.stack) <= 0:\n            return -1\n        return self.stack.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        n = len(self.stack)\n        tmpStack = []\n        while len(self.stack) > k:\n            tmpStack.append(self.stack.pop())\n        while len(self.stack) > 0:\n            tmpStack.append(self.stack.pop()+val)\n        while tmpStack:\n            self.stack.append(tmpStack.pop())\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2519221310","body":"```\nclass MyQueue:\n\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n        \n\n    def push(self, x: int) -> None:\n        self.stack1.append(x)\n\n    def pop(self) -> int:\n        while self.stack1:\n            self.stack2.append(self.stack1.pop())\n        res = self.stack2.pop()\n        while self.stack2:\n            self.stack1.append(self.stack2.pop())\n        return res\n\n    def peek(self) -> int:\n        while self.stack1:\n            self.stack2.append(self.stack1.pop())\n        res = self.stack2.pop()\n        self.stack2.append(res)\n        while self.stack2:\n            self.stack1.append(self.stack2.pop())\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2522483064","body":"```\nclass Solution:\n    '''\n    5,4,1,2,10,3,4,8,7,9, 0\n\n    [5, 4, 1, 2] [10, 3, 4, 8, 7 ,9, 0]\n\n    '''\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        # [[5,4,1,2](1--min, 5--max)]\n        splited_arr = self.trySplit(arr)\n        print(splited_arr)\n        while len(splited_arr) > 1:\n            if self.validate(splited_arr):\n                print(splited_arr)\n                return len(splited_arr)\n            else:\n                splited_arr = self.tryMerge(splited_arr)\n        print(splited_arr)\n        return len(splited_arr)\n    \n    def trySplit(self, arr):\n        res, cur = [], []\n        min_num, max_num = arr[0], arr[0]\n        for i in range(len(arr)):\n            if not cur or arr[i]<max_num:\n                cur.append(arr[i])\n                min_num, max_num = min(min_num, arr[i]), max(max_num, arr[i])\n            else:\n                res.append([cur, min_num, max_num])\n                cur = [arr[i]]\n                min_num, max_num = arr[i], arr[i]\n        res.append([cur, min_num, max_num])\n        return res\n    \n    def validate(self, arr):\n        cur, min_num, max_num = arr[0]\n        for i in range(1, len(arr)):\n            nxt, nxt_min_num, nxt_max_num = arr[i]\n            if nxt_min_num >= max_num:\n                cur, min_num, max_num = nxt, nxt_min_num, nxt_max_num\n                continue\n            else:\n                return False\n        return True\n\n    def tryMerge(self, arr):\n        res = []\n        i = 0\n        for i in range(len(arr)):\n            cur, cur_min_num, cur_max_num = arr[i]\n            if not res:\n                res.append(arr[i])\n            else:\n                while res:\n                    prev, prev_min_num, prev_max_num = res.pop()\n                    if not (cur_min_num >= prev_max_num):\n                        cur, cur_min_num, cur_max_num = prev+cur, min(cur_min_num, prev_min_num), max(cur_max_num, prev_max_num)\n                    else:\n                        res.append([prev, prev_min_num, prev_max_num])\n                        break\n                res.append([cur, cur_min_num, cur_max_num])\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2524844911","body":"```\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head:\n            return head\n        n = 1\n        p = head\n        while p.next:\n            n += 1\n            p = p.next\n        p.next = head\n        \n        k = k%n\n        new_head = head\n        for i in range(n-k):\n            new_head = new_head.next\n        p = head\n        while p.next != new_head:\n            p = p.next\n        p.next = None\n        return new_head\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525457673","body":"```\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        first, second = head, head.next\n        prev = None\n        new_head = head\n        while first.next:\n            second = first.next\n            first.next = second.next\n            second.next = first\n            if prev:\n                prev.next = second\n            if new_head == head:\n                new_head = second\n            if first.next:\n                prev = first\n                first = first.next\n        return new_head\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2526997375","body":"```\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head or not head.next:\n            return head\n        p = head\n        lst = []\n        while p:\n            lst.append(p.val)\n            p = p.next\n        \n        mid = len(lst) // 2\n        root = self.treeHelper(lst, mid, 0, len(lst)-1)\n        return root\n    \n    def treeHelper(self, lst, mid, left, right):\n        if left == right:\n            return TreeNode(lst[left], None, None)\n        elif left > right:\n            return None\n        root = TreeNode(lst[mid])\n        root.left = self.treeHelper(lst, (left+mid-1)//2, left, mid-1)\n        root.right = self.treeHelper(lst, (mid+1+right)//2, mid+1, right)\n        return root\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530469467","body":"```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        if not headA or not headB:\n            return None\n        pA, pB = headA, headB\n        completeA, completeB = False, False\n        while True:\n            if pA == pB:\n                return pA\n            if not pA.next:\n                if not completeA:\n                    pA = headB\n                    completeA = True\n                else:\n                    return None\n            else:\n                pA = pA.next\n            if not pB.next:\n                if not completeB:\n                    pB = headA\n                    completeB = True\n                else:\n                    return None\n            else:\n                pB = pB.next\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2533726049","body":"```\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return None\n        slow, fast = head.next, head.next.next\n        while slow != fast:\n            slow = slow.next\n            if fast and fast.next:\n                fast = fast.next.next\n            else:\n                return None\n        fast = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n        return slow\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2537817179","body":"```\nimport collections\n\nclass Node:\n    def __init__(self, key, val, prev=None, nxt=None):\n        self.key = key\n        self.val = val\n        self.prev = prev\n        self.nxt = nxt\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.map = collections.defaultdict(Node)\n        # dummy head\n        self.dhead = Node(-1, -1)\n        self.dtail = Node(-1, -1)\n        self.dhead.nxt = self.dtail\n        self.dtail.prev = self.dhead\n\n    def get(self, key: int) -> int:\n\n        if key in self.map:\n            node = self.map[key]\n            self.moveToFront(node)\n            return self.map[key].val\n        else:\n            return -1\n        \n\n    def put(self, key: int, value: int) -> None:\n        if key not in self.map:\n            node = Node(key, value, self.dhead, self.dhead.nxt)\n            self.dhead.nxt.prev = node\n            self.dhead.nxt = node\n            self.map[key] = node\n            # evict\n            if len(self.map) > self.capacity:\n                lru = self.dtail.prev\n                lru.prev.nxt = self.dtail\n                lru.nxt.prev = lru.prev\n                del self.map[lru.key]\n        else:\n            node = self.map[key]\n            node.val = value\n            self.moveToFront(node)\n    \n    def moveToFront(self, node):\n        node.prev.nxt = node.nxt\n        node.nxt.prev = node.prev\n        node.nxt = self.dhead.nxt\n        node.prev = self.dhead\n        self.dhead.nxt.prev = node\n        self.dhead.nxt = node\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540500024","body":"```\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if not root:\n            return 0\n        leftMax = self.maxDepth(root.left)\n        rightMax = self.maxDepth(root.right)\n        return max(leftMax, rightMax) + 1\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2542627497","body":"```\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if not p and not q:\n            return True\n        elif not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543446385","body":"```\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        \n\n        def helper(node):\n            if not node:\n                return [], 0\n            if not node.left and not node.right:\n                # return depth, cur_sum\n                return [0], node.val\n            cur_sum = 0\n            cur_depths = []\n            depths, prev_sum = helper(node.left)\n            cur_depths += [d+1 for d in depths]\n            cur_sum = cur_sum + prev_sum + sum([node.val*10**(d+1) for d in depths])\n            depths, prev_sum = helper(node.right)\n            cur_sum = cur_sum + prev_sum + sum([node.val*10**(d+1) for d in depths])\n            cur_depths += [d+1 for d in depths]\n            return cur_depths, cur_sum\n        \n        _, res = helper(root)\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544678803","body":"```\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        self.res = root.val\n        self.max_depth = 0\n\n        def helper(root, depth):\n            if not root:\n                return\n            elif not root.left and not root.right:\n                if depth > self.max_depth:\n                    self.res = root.val\n                    self.max_depth = depth\n                    return \n            helper(root.left, depth+1)\n            helper(root.right, depth+1)\n        \n        helper(root, 1)\n        return self.res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/18#issuecomment-2547546046","body":"```\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        1 l:n r:n \n        \"\"\"\n        def preorder(root):\n            if not root:\n                return \"null,\"\n            return str(root.val) + \",\" + preorder(root.left) + preorder(root.right)\n        return preorder(root)\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        nodes = data.split(\",\")\n\n        def preorder(i):\n            if i >= len(nodes) or nodes[i] == \"null\":\n                return i, None\n            root = TreeNode(nodes[i])\n            j, root.left = preorder(i + 1)\n            k, root.right = preorder(j + 1)\n            return k, root\n\n        return preorder(0)[1]\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2550419807","body":"```\nimport collections\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        # first, level order traversal to have x index sorted in a dict e.g. {-1:[9] 0:[3, 15], 1:[20]...}\n        d = collections.defaultdict(list)\n        q = collections.deque([(root, 0)])\n        while q:\n            l = len(q)\n            tmp = collections.defaultdict(list)\n            for i in range(l):\n                node, y = q.popleft()\n                tmp[y].append(node.val)\n                if node.left:\n                    q.append((node.left, y-1))\n                if node.right:\n                    q.append([node.right, y+1])\n            # sort the list in the same level to make sure the node with same index is ordered by values\n            for y in tmp:\n                d[y].extend(sorted(tmp[y]))\n        \n        return [d[key] for key in sorted(d)]\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"danielyan86":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rennzhang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"larscheng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qingkediguo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"adfvcdxv":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"javajianghu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chloe-c11":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"verkru":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eggeggliu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dr-kkk":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jinhma":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509556168","body":"```class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        List<Integer> result = new ArrayList<>();\n        int len = num.length;\n        for (int i = 0; i < len; ++i) {\n            int a = num[len - i - 1];\n            k = k + a;\n            int b = k % 10;\n            result.add(b);\n            k = k / 10;\n        }\n        while (k != 0) {\n            int a = k % 10;\n            result.add(a);\n            k = k / 10;\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511831764","body":"```class Solution {\n    public int[] shortestToChar(String s, char c) {\n        int[] result = new int[s.length()];\n        int len = s.length();\n        int latestC = len;\n        for (int i = 0; i < len; i++) {\n            char tmp = s.charAt(i);\n            if (tmp == c) {\n                result[i] = 0;\n                latestC = i;\n                continue;\n            }\n            result[i] = Math.abs(latestC - i);\n        }\n        latestC = 0;\n        for (int i = len - 1; i >= 0; i--) {\n            char tmp = s.charAt(i);\n            if (tmp == c){\n                result[i] = 0;\n                latestC = i;\n                continue;\n            }\n            result[i] = Math.min(result[i], Math.abs(i - latestC));\n        }\n        return result;\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514793006","body":"\n```class CustomStack {\n    List<Integer> stack;\n    int size;\n    public CustomStack(int maxSize) {\n        this.stack = new ArrayList<Integer>(maxSize);\n        this.size = maxSize;\n    }\n    \n    public void push(int x) {\n        if(stack.size()+1<=size){\n            stack.add(x);\n        }\n    }\n    \n    public int pop() {\n        if(stack.size() == 0){\n            return -1;\n        }\n        int result = stack.get(stack.size()-1);\n        stack.remove(stack.size()-1);\n        return result;\n    }\n    \n    public void increment(int k, int val) {\n        for(int i=0;i<stack.size();i++){\n            int var1 = stack.get(i);\n            if(i<k){\n                stack.set(i, var1+val);\n            }\n        }\n    }\n}\n\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517806222","body":"\n\n```class Solution {\n    public String decodeString(String s) {\n        Deque<Integer> numStack = new LinkedList<>();\n        Deque<StringBuilder> sbStack = new LinkedList<>();\n        int multi = 0;\n        StringBuilder sb = new StringBuilder();\n        for(char ch : s.toCharArray()){\n            if(Character.isDigit(ch)){\n               multi = multi * 10 + ch - '0';\n            }\n            else if(ch == '['){\n                numStack.push(multi);\n                sbStack.push(sb);\n                multi = 0;\n                sb = new StringBuilder();\n            }\n            else if(ch == ']'){\n                StringBuilder sbTemp = sbStack.pop();\n                int numTemp = numStack.pop();\n                for(int i = 0;i<numTemp;i++){\n                    sbTemp.append(sb.toString());\n                }\n                sb = sbTemp;\n            }\n            else{\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520729938","body":"\n\n```class MyQueue {\n    private Stack<Integer> stackOne;\n    private Stack<Integer> stackTwo;\n    public MyQueue() {\n        this.stackOne = new Stack<Integer>();\n        this.stackTwo = new Stack<Integer>();\n    }\n\n    public void push(int x) {\n        stackOne.add(x);\n    }\n\n    public int pop() {\n        while (!stackOne.empty()){\n            stackTwo.add(stackOne.pop());\n        }\n        int result = stackTwo.pop();\n        while (!stackTwo.empty()){\n            stackOne.add(stackTwo.pop());\n        }\n        return result;\n    }\n\n    public int peek() {\n        while (!stackOne.empty()){\n            stackTwo.add(stackOne.pop());\n        }\n        int result = stackTwo.peek();\n        while (!stackTwo.empty()){\n            stackOne.add(stackTwo.pop());\n        }\n        return result;\n    }\n\n    public boolean empty() {\n        return stackOne.empty();\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523295893","body":"```class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        for (int num : arr) {\n            if (stack.isEmpty() || num >= stack.peek()) {\n                stack.push(num);\n            } else {\n                int mx = stack.pop();\n                while (!stack.isEmpty() && stack.peek() > num) {\n                    stack.pop();\n                }\n                stack.push(mx);\n            }\n        }\n        return stack.size();\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2524871430","body":"```\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (head == null || head.next == null || k == 0) return head;\n        ListNode cur = head;\n        int len = 0;\n        while (cur != null) {\n            len++;\n            cur = cur.next;\n        }\n        k %= len;\n        if (k == 0) return head;\n        ListNode fast = head;\n        while (k > 0) {\n            fast = fast.next;\n            k--;\n        }\n        ListNode slow = head;\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        ListNode newHead = slow.next;\n        slow.next = null;\n        fast.next = head;\n        return newHead;\n    }\n}","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525415578","body":"```\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n        ListNode next = head.next;\n        head.next = swapPairs(next.next);\n        next.next = head;\n        return next;\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2528017339","body":"\n\n```class Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        int n = 0;\n        ListNode cur = head;\n        while (cur != null && ++n >= 0) cur = cur.next;\n        return build(head, 0, n - 1);\n    }\n    TreeNode build(ListNode head, int l, int r) {\n        if (l > r) return null;\n        int mid = l + r >> 1, t = mid - l;\n        ListNode cur = head;\n        while (t-- > 0) cur = cur.next;\n        TreeNode ans = new TreeNode(cur.val);\n        ans.left = build(head, l, mid - 1);\n        ans.right = build(cur.next, mid + 1, r);\n        return ans;\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2532081122","body":"```\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        Set<ListNode> visited = new HashSet<ListNode>();\n        ListNode temp = headA;\n        while (temp != null) {\n            visited.add(temp);\n            temp = temp.next;\n        }\n        temp = headB;\n        while (temp != null) {\n            if (visited.contains(temp)) {\n                return temp;\n            }\n            temp = temp.next;\n        }\n        return null;\n    }\n}\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2536172152","body":"```\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode pos = head;\n        Set<ListNode> visited = new HashSet<ListNode>();\n        while (pos != null) {\n            if (visited.contains(pos)) {\n                return pos;\n            } else {\n                visited.add(pos);\n            }\n            pos = pos.next;\n        }\n        return null;\n    }\n}\n","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"emergence23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"0christ1":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"junru281":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"joe-the-plumber":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jsaki":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"witerth":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"ludwig-ll":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luster-lyl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"smallppgirl":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"realduxy":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awilekong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wwz223":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zhangjinzhepro":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"atom-set":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"coderxiaowq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hillsonziqiu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"alexzhang-mini":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xil324":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"bordergong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hawkins-hjq":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"cathyshang":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"greyqt":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yanglimbo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"rao-qianlin":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dtjk":[null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514801113","body":"```c\nclass CustomStack {\npublic:\n    stack <int> stk;\n    int sz;\n    CustomStack(int maxSize) {\n       sz = maxSize; \n    }\n    \n    void push(int x) {\n        if ( stk.size() < sz ) stk.push(x);\n    }\n    \n    int pop() {\n        if ( !stk.empty() ) {\n            int val = stk.top() ;\n            stk.pop();\n            return val;\n        }\n        else return -1;\n    }\n    \n    void increment(int k, int val) {\n        stack <int> stk_;\n        while ( !stk.empty()  ) {stk_.push( stk.top() );stk.pop();}\n        while ( !stk_.empty() && k > 0 ) {\n            stk.push (stk_.top() + val);\n            stk_.pop();\n            k--;\n        }\n        while ( !stk_.empty() ) {\n            stk.push(stk_.top());\n            stk_.pop();\n        }\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517837037","body":"```\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack, res, multi = [], \"\", 0\n        for c in s:\n            if c == '[':\n                stack.append([multi, res])\n                res, multi = \"\", 0\n            elif c == ']':\n                cur_multi, last_res = stack.pop()\n                res = last_res + cur_multi * res\n            elif '0' <= c <= '9':\n                multi = multi * 10 + int(c)            \n            else:\n                res += c\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520505912","body":"```\nclass MyQueue {\npublic:\n    stack<int> skt1, skt2 ;\n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n       skt1.push (x) ; \n    }\n    \n    int pop() {\n        while (!skt1.empty()) {\n            skt2.push( skt1.top() );\n            skt1.pop();\n        }\n        int val = skt2.top();\n        skt2.pop();\n        while (!skt2.empty()) {\n            skt1.push(skt2.top());\n            skt2.pop();\n        }\n        return val;\n    }\n    \n    int peek() {\n        while (!skt1.empty()) {\n            skt2.push( skt1.top() );\n            skt1.pop();\n        }\n        int val = skt2.top();\n        \n        while (!skt2.empty()) {\n            skt1.push(skt2.top());\n            skt2.pop();\n        }\n        return val;\n    }\n    \n    bool empty() {\n        if (skt1.empty()) return 1 ;\n        else return 0 ;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523557669","body":"```\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        stack = [arr[0]]\n        for i in range(1, len(arr)):\n            if stack and arr[i] < stack[-1]:\n                max_val = stack[-1]\n                while stack and arr[i] < stack[-1]:\n                    stack.pop()\n                stack.append(max_val)\n            else:\n                stack.append(arr[i])\n        return len(stack)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525212190","body":"```c++\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        int cnt = 0 , value[510];\n        ListNode *p = head ;\n        while ( p != nullptr ) {\n            cnt++;\n            value[cnt] = p -> val;\n            p = p -> next;\n        }  \n        int value2[510] ;\n        for ( int i = 1; i <= cnt; i++ ) {\n            value2[ ( i + k ) % cnt ] = value[i] ;\n            if ( ( i+k) % cnt == 0 ) value2[cnt] = value[i]; \n        }\n        p = head ;\n        for ( int i = 1; i <= cnt; i++ ) {\n            p -> val = value2[i];\n            p = p -> next;\n        }\n        return head;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525439544","body":"```\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode *p = head ;\n        int cnt = 0, tmp ;\n        if ( p == nullptr ) return head;\n        while ( p != nullptr ) {\n            cnt++ ;\n            if ( cnt % 2 == 1 && p -> next!= nullptr) {\n                tmp = p -> val  ;\n                p -> val = p -> next -> val;\n                \n            }\n            else if ( cnt % 2 == 1 && p -> next == nullptr) break;\n            else p-> val = tmp;\n            p = p -> next ;\n        }\n         return head ;\n    }\n   \n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2528479259","body":"```\nclass Solution:\ndef sortedListToBST(self, head: ListNode) -> TreeNode:\nif not head:\nreturn head\npre, slow, fast = None, head, head\n\n    while fast and fast.next:\n        fast = fast.next.next\n        pre = slow\n        slow = slow.next\n    if pre:\n        pre.next = None\n    node = TreeNode(slow.val)\n    if slow == fast:\n        return node\n    node.left = self.sortedListToBST(head)\n    node.right = self.sortedListToBST(slow.next)\n    return node\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2532139380","body":"```\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n                A, B = headA, headB\n        while A != B:\n            A = A.next if A else headB\n            B = B.next if B else headA\n        return A\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2533572982","body":"```c\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        unordered_map < ListNode *, int > mps;\n        ListNode *p = head;\n        if ( head == NULL ) return p;\n        mps[p] = 0;\n        for ( int  i = 0 ; ; i++ ) {\n            if ( i = 0 ) {\n                p = p -> next;\n                if ( p == NULL ) return p;\n                continue;\n            }\n            mps[p] = i ;\n            p = p -> next;\n            if ( mps.find (p) != mps.end()) return p;\n            if ( p == NULL ) return  p;\n        }\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2539177080","body":"```\nfrom collections import OrderedDict\nclass LRUCache(OrderedDict):\n\n    def __init__(self, capacity: int):\n        self.s = capacity\n        \n\n    def get(self, key: int) -> int:\n        if key in self:\n            self.move_to_end(key)\n            return self[key]\n        else:\n            return -1\n        \n\n    def put(self, key: int, value: int) -> None:\n        if key in self:\n            self.move_to_end(key)\n        self[key] = value\n        if len(self) > self.s:\n            self.popitem(last=False)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2541753225","body":"```\nclass Solution(object):\n        def maxDepth(self, root):\n            \"\"\"\n            :type root: TreeNode\n            :rtype: int\n            \"\"\"\n            if not root:\n                return 0\n            left = self.maxDepth(root.left)\n            right = self.maxDepth(root.right)\n            return max(left, right) + 1\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"martina001":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lxy1108":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"franklinsworld666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"brainlds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huamulanyyds":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"eclairs46":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"maike-hps":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sanjiu81":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qinmengx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yashuning":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"luzhaofeng":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lizhao-liu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yukibei":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hermione666":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"yyyyytc":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zin-next":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"pandapls":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jackinai":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"godkun":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"dadahui":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"akxuan":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fightforcoding":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"jialigogogo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"celestexiong":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"zjy-debug":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"peggyhao":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sleepydog25":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"edwineo":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"panfx":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"liudi9047":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"allanli-lhh":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xchen172":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qiaoeve":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tangyi23":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shangjiaw":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509519979","body":"### 思路\n先将数组转换成数字，然后运算后再将数字转换回数组\n\n### 代码\n```python\ndef addArrayInteger( A, K ):\n    res = ''.join([str(i) for i in A])\n    res = int(res) + K\n    return [int(i) for i in str(res)]\n\nprint(addArrayInteger([1,2,0,0], 34))\nprint(addArrayInteger([2,7,4], 181))\nprint(addArrayInteger([2,1,5], 806))\nprint(addArrayInteger([9,9,9,9,9,9,9,9,9,9], 1))\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)，其中 N 为数组长度。\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2510432857","body":"### 思路\n正向遍历一遍数组，记录每个字符和左边最近C字符的距离。\n反向遍历一遍数组，记录每个字符和右边最近C字符的距离。\n取两个数组每个位置上更小的那个值。\n\n### 代码\n```python\ndef shortestDistanceToC(S, C):\n    n = len(S)\n    res1 = [float('inf')] * n\n    res2 = [float('inf')] * n\n    \n    p = -1\n    for i in range(n):\n        if S[i] == C:\n            p = i\n        if p != -1:\n            res1[i] = i-p\n\n    p = -1\n    for i in range(n-1, -1, -1):\n        if S[i] == C:\n            p = i\n        if p != -1:\n            res2[i] = p-i\n            \n    return [min(res1[i],res2[i]) for i in range(n) ]\n    \nprint(shortestDistanceToC(\"loveleetcode\", 'e'))\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)，其中 N 为数组长度。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513243000","body":"class CustomStack:\n    def __init__(self, maxSize):\n        self.stack = []\n        self.size = 0\n        self.maxSize = maxSize\n        \n    def push(self, x):\n        if self.size < self.maxSize:\n            self.stack.append(x)\n            self.size += 1\n        else:\n            print(\"reach max size. cannot push.\")\n    \n    def pop(self):\n        if self.stack:\n            self.size -= 1\n            return self.stack.pop(-1)\n        else:\n            return -1\n    \n    def increment(self, k, val):\n        if self.size < k:\n            for i in range(self.size):\n                self.stack[i] += val\n        else:\n            for i in range(k):\n                self.stack[i] += val\n                \ncustomStack = CustomStack(3)\ncustomStack.push(1) #栈变为 [1]\ncustomStack.push(2) #栈变为 [1, 2]\nprint(customStack.pop()) #返回栈顶值 2，栈变为 [1]\ncustomStack.push(2) #栈变为 [1, 2]\ncustomStack.push(3) #栈变为 [1, 2, 3]\ncustomStack.push(4) #栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\ncustomStack.increment(5, 100) #栈变为 [101, 102, 103]\ncustomStack.increment(2, 100) #栈变为 [201, 202, 103]\nprint(customStack.pop()) #返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\nprint(customStack.pop()) #返回 202 --> 返回栈顶值 202，栈变为 [201]\nprint(customStack.pop()) #返回 201 --> 返回栈顶值 201，栈变为 []\nprint(customStack.pop()) #返回 -1 --> 栈为空，返回 -1","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2516048437","body":"### 代码\n\n\n```python\ndef decodeString(s):\n    res = []\n    \n    for i in s:\n        if i != ']':\n            res.append(i)\n        else:\n            subString = ''\n            while res[-1] != '[':\n                subString = res.pop() + subString\n            res.pop()\n                \n            k = ''\n            while res and res[-1].isdigit():\n                k = res.pop() + k\n                \n            res.append( subString * int(k) )    \n            \n    return ''.join(res)\n                \nprint(decodeString(\"3[a]2[bc]\"))\n#\"aaabcbc\"\n\nprint(decodeString(\"3[a2[c]]\"))\n#\"accaccacc\"\n\nprint(decodeString(\"2[abc]3[cd]ef\"))\n#\"abcabccdcdcdef\"\n\nprint(decodeString(\"abc3[cd]xyz\"))\n#\"abccdcdcdxyz\"\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2518967943","body":"### 思路\nUse two stacks, stack 1 saves elements in the order received and stack 2 is used for peek and pop (reverse order of the elements).\nFor push, add elements to stack 1\nFor pop, check if stack 2 is empty. If yes, move all elements from stack 1 to stack 2 (reversed order). Pop the last element of stack 2.\nFor peek. check if stack 2 is empty. If yes, move all elements from stack 1 to stack 2 (reversed order). Return the last element of stack 2.\nFor empty, check if both stack 1 and stack2 are empty.\n\n### 代码\n```python\nclass MyQueue:\n  def __init__(self):\n    self.s1 = []\n    self.s2 = []\n\n  def push(self, x):\n    self.s1.append(x)\n\n  def pop(self):\n    if not self.s2:\n      while self.s1:\n        self.s2.append(self.s1.pop())\n    return self.s2.pop()\n\n  def peek(self):\n    if not self.s2:\n      while self.s1:\n        self.s2.append(self.s1.pop())\n    return self.s2[-1]\n    \n  def empty(self):\n    return len(self.s1) == 0 and len(self.s2) == 0\n\nqueue = MyQueue()\nqueue.push(1)\nqueue.push(2)\nprint(queue.peek()) #1\nprint(queue.pop()) #1\nprint(queue.empty()) #False\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(1)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2522027548","body":"### 思路\nCompare prefix sum of sorted and unsorted array\n\n### 代码\n```python\n\ndef maxChunksToSorted( array ):\n  res, s1, s2 = 0, 0, 0\n  for x, y in zip(array, sorted(array)):\n    s1 += x\n    s2 += y\n    res += int(s1==s2)\n  return res\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(nlogn) for sorting\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2524855285","body":"### 代码\n```python\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or k==0:\n            return head\n\n        length = 1\n        tail = head\n        while tail.next:\n            tail = tail.next\n            length += 1\n\n        k = k % length\n        tail.next = head\n        \n        newTail = head\n        for _ in range(length-k-1):\n            newTail = newTail.next\n\n        head = newTail.next\n        newTail.next = None\n        return head\n\n```\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525363969","body":"### 代码\n```python\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(0, head)\n        pre, cur = dummy, head\n\n        while cur and cur.next:\n            # save temp pointers\n            nextPair = cur.next.next\n            second = cur.next\n            # swap pair\n            second.next = cur\n            cur.next = nextPair\n            pre.next = second\n            # update pointers\n            pre = cur\n            cur = nextPair\n\n        return dummy.next\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2526683670","body":"### 代码\n```python\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        nums = []\n        while head:\n            nums.append(head.val)\n            head = head.next\n\n        def helper(l, r):\n            if l > r:\n                return None\n            \n            m = (l + r) // 2\n            root = TreeNode( nums[m] )\n            root.left = helper(l, m-1)\n            root.right = helper(m+1, r)\n            return root\n\n        return helper(0, len(nums)-1)\n        \n```\n\n**复杂度分析**\n- 时间复杂度：O(n)\n- 空间复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530111458","body":"### 代码\n```python\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        ptr1, ptr2 = headA, headB\n\n        while ptr1 != ptr2:          \n            ptr1 = ptr1.next if ptr1 else headB\n            ptr2 = ptr2.next if ptr2 else headA\n\n        return ptr1\n```\n\n**复杂度分析**\n- 时间复杂度：O(m+n)\n- 空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2533564618","body":"class Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                break\n\n        else:\n            return None\n\n        fast = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n        \n        return slow","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2537500729","body":"#use double linked list and hash map\nclass Node:\n    def __init__(self, key = 0, val =0):\n        self.key = key\n        self.val = val\n        self.prev = None\n        self.next = None\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.cache = {}\n        self.head = Node() # least recent\n        self.tail = Node() # most recent\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def remove(self, node):\n        prev, nxt = node.prev, node.next\n        prev.next = nxt\n        nxt.prev = prev\n    \n    def insert(self, node):\n        prev, nxt = self.tail.prev, self.tail\n        prev.next = node\n        nxt.prev = node\n        node.prev = prev\n        node.next = nxt\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.cache:\n            self.remove(self.cache[key])\n            self.insert(self.cache[key])\n            return self.cache[key].val\n        return -1\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        if key in self.cache:\n            self.remove(self.cache[key])\n\n        self.cache[key] = Node(key, value)\n        self.insert(self.cache[key])\n\n        if self.capacity < len(self.cache):\n            lru = self.head.next\n            self.remove(lru)\n            del self.cache[lru.key]","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540369682","body":"### 代码\r\n```python\r\n\r\nclass Solution(object):\r\n    def maxDepth(self, root):\r\n        \"\"\"\r\n        :type root: Optional[TreeNode]\r\n        :rtype: int\r\n        \"\"\"\r\n        if not root:\r\n            return 0\r\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\r\n```\r\n- 时间复杂度：O(n)\r\n- 空间复杂度：O(log(n))","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2542652279","body":"```python\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: Optional[TreeNode]\n        :type q: Optional[TreeNode]\n        :rtype: bool\n        \"\"\"\n        if p is None and q is None: return True\n        if p is None or q is None: return False\n        if p.val == q.val:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n        return False\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543424159","body":"### 思路\ndepth first search traversal\nuse one variable to accumulate the value of nodes traveled so far\n\n### 代码\n```python\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: int\n        \"\"\"\n        def dfs(node, pathSum):\n            if not node: return 0\n            pathSum = pathSum * 10 + node.val\n            if not node.left and not node.right:\n                return pathSum\n            return dfs(node.left, pathSum) + dfs(node.right, pathSum)\n        \n        return dfs(root, 0)\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544176729","body":"### 代码\n```python\nclass Solution(object):\n    def findBottomLeftValue(self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: int\n        \"\"\"\n        \n        res = None\n        stack = [root]\n        while stack:\n            node = stack.pop(0)\n            res = node.val\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n\n        return res\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/18#issuecomment-2547184445","body":"```python\nclass Codec:\n\n    def serialize(self, root):\n        res = []\n        def dfs(node):\n            if not node:\n                res.append(\"N\")\n                return \n            res.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n\n        dfs(root)\n        return \",\".join(res)\n\n    def deserialize(self, data):\n        vals = data.split(\",\")\n        def dfs():\n            val = vals.pop(0)\n            if val == \"N\":\n                return None\n            \n            node = TreeNode(int(val))\n            node.left = dfs()\n            node.right = dfs()\n\n            return node\n\n        return dfs()\n\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2550056583","body":"```python\nclass Solution(object):\n    def verticalTraversal(self, root):\n        if not root:\n            return []\n\n        min_col, max_col = 0, 0\n        q = collections.deque()\n        items = collections.defaultdict(list)\n        q.append((root, 0, 0))\n\n        while q:\n            node, row, col = q.popleft()\n            if col < min_col:\n                min_col = col\n            if col > max_col:\n                max_col = col\n\n            items[col].append((node.val, row))\n\n            if node.left:\n                q.append((node.left, row + 1, col - 1))\n            if node.right:\n                q.append((node.right, row + 1, col + 1))\n\n        res = []\n        for i in range(min_col, max_col + 1):\n            item = items[i]\n            item.sort(key = lambda x: (x[1], x[0]))\n            res.append([x[0] for x in item])\n\n        return res\n\n```\n**复杂度分析**\n- 时间复杂度：O(NlogN)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/20#issuecomment-2552569087","body":"### 代码\n```python\nclass Solution(object):\n    def twoSum(self, nums, target):\n        seen = dict()\n        for i in range(len(nums)):\n            if nums[i] in seen:\n                return [seen[nums[i]], i]\n\n            seen[target-nums[i]] = i\n\n\n```\n\n**复杂度分析**\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tongxw":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509522870","body":"```java\nclass Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        int n = num.length;\n        int carry = 0;\n        List<Integer> ans = new ArrayList<>(); // SC O(max(n, log k))\n        for (int i=n-1; i>=0 || k > 0; i--) { // TC O(max(n, log k))\n            int sum = (i >= 0 ? num[i] : 0) + k % 10 + carry; // 当前位\n            carry = sum / 10; // 进位\n            ans.add(sum % 10); // 记录结果\n\n            k /= 10; // k向左移\n        }\n\n        if (carry == 1) {\n            ans.add(1); // 最后如果有进位\n        }\n\n        Collections.reverse(ans); // TC O(max(n, log k))\n        return ans;\n    }\n}\n```\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2510489922","body":"```java\r\nclass Solution {\r\n    public int[] shortestToChar(String s, char c) {\r\n        int n = s.length();\r\n        int distance = n + 1;\r\n\r\n        // 统计s[i]距离左边c的距离\r\n        int[] minDistance = new int[n]; // SC O(n)\r\n        for (int i=0; i<n; i++) { // TC O(n)\r\n            distance = s.charAt(i) == c ? 0 : distance + 1;\r\n            minDistance[i] = distance;\r\n        }\r\n\r\n        // 统计s[i]距离右边c的距离, 并且求左右两侧最小\r\n        distance = n + 1;\r\n        for (int i=n-1; i>=0; i--) { // TC O(n)\r\n            distance = s.charAt(i) == c ? 0 : distance + 1;\r\n            minDistance[i] = Math.min(minDistance[i], distance);\r\n        }\r\n\r\n        return minDistance;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513626200","body":"```java\r\nclass CustomStack {\r\n    Deque<Integer> stack; // SC O(n)\r\n    int maxSize;\r\n\r\n    // 用增量数数组记录增量，出栈时加到栈顶元素\r\n    int[] incr; // SC O(n)\r\n\r\n    public CustomStack(int maxSize) {\r\n        this.stack = new LinkedList<>();\r\n        this.maxSize = maxSize;\r\n        incr = new int[maxSize + 1];\r\n    }\r\n    \r\n    public void push(int x) {\r\n        if (stack.size() == maxSize) {\r\n            return;\r\n        }\r\n\r\n        stack.push(x); // TC O(1)\r\n        \r\n    }\r\n    \r\n    public int pop() {\r\n        int size = stack.size();\r\n        if (size == 0) {\r\n            return -1;\r\n        }\r\n\r\n        // stack内容如下:\r\n        // [va1, val2, val3, val4]\r\n        //  ^                 ^\r\n        // bottom             top\r\n\r\n        // incr数组内容如下:\r\n        // [ 0,  0,   incr_val, 0]\r\n        //   ^           ^\r\n        // not_used    incr[2] = incr_val，代表stack底部的2个元素都会增加incr_val\r\n\r\n        int top = stack.pop();\r\n        int incr_val = incr[size];\r\n\r\n        if (incr_val != 0) {\r\n            top += incr_val;\r\n\r\n            incr[size - 1] += incr_val;\r\n            incr[size] = 0;\r\n        }\r\n\r\n\r\n        return top; // TC O(1)\r\n    }\r\n    \r\n    public void increment(int k, int val) { // TC O(1)\r\n        int total = Math.min(k, stack.size());\r\n        incr[total] += val;\r\n    }\r\n}\r\n\r\n/**\r\n * Your CustomStack object will be instantiated and called as such:\r\n * CustomStack obj = new CustomStack(maxSize);\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * obj.increment(k,val);\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2516312539","body":"```java\r\nclass Solution {\r\n    public String decodeString(String s) {\r\n        Deque<String> strStack = new LinkedList<>();\r\n        Deque<Integer> numStack = new LinkedList<>();\r\n\r\n        int number = 0;\r\n        StringBuilder ans = new StringBuilder();\r\n\r\n        // number can be more than 1 digit\r\n        // two stacks for the decoded string and number\r\n        for (char c : s.toCharArray()) {\r\n             if (Character.isDigit(c)) {\r\n                number = number * 10 + (c - '0');\r\n\r\n             } else if (Character.isLetter(c)) {\r\n                ans.append(c);\r\n             } else if (c == '[') {\r\n                // push the number and sub string to the stack\r\n                numStack.push(number);\r\n                number = 0;\r\n\r\n                strStack.push(ans.toString());\r\n                ans.setLength(0);\r\n             } else {\r\n                // repeat the string\r\n                int repeat = numStack.pop();\r\n                String cur = ans.toString();\r\n                ans.setLength(0);\r\n                while (repeat-- > 0) {\r\n                    ans.append(cur);\r\n                }\r\n\r\n                // append the repeated string to the top string of the stack\r\n                String top = strStack.pop();\r\n                String appendString = top + ans.toString();\r\n\r\n                // decode complete\r\n                ans = new StringBuilder(appendString);\r\n\r\n             }\r\n        }\r\n\r\n        return ans.toString();\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2519153578","body":"```java\r\nclass MyQueue {\r\n    Deque<Integer> inStack;\r\n    Deque<Integer> outStack;\r\n\r\n    public MyQueue() {\r\n        inStack = new LinkedList<>();\r\n        outStack = new LinkedList<>();\r\n    }\r\n    \r\n    public void push(int x) {\r\n        inStack.push(x);\r\n    }\r\n    \r\n    public int pop() {\r\n        if (peek() == -1) {\r\n            return -1;\r\n        }\r\n\r\n        return outStack.pop();\r\n    }\r\n    \r\n    public int peek() {\r\n        if (empty()) {\r\n            return -1;\r\n        }\r\n\r\n        if (outStack.isEmpty()) {\r\n            // 翻转inStack到outStack,保证FIFO\r\n            while (!inStack.isEmpty()) {\r\n                outStack.push(inStack.pop());\r\n            }\r\n        }\r\n\r\n        return outStack.peek();\r\n    }\r\n    \r\n    public boolean empty() {\r\n        return inStack.isEmpty() && outStack.isEmpty();\r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * boolean param_4 = obj.empty();\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2522267024","body":"```java\r\nclass Solution {\r\n    public int maxChunksToSorted(int[] arr) {\r\n        // 对于位置i，\r\n        // 如果[0...i]的最大值(记为maxFromLeft) 小于等于 [i+1...n-1]的最小值(记为minFromRight)，说明此时可以分块，不影响整体排序\r\n        // 否则就不能排序，因为maxFromLeft > minFromRight时，maxFromLeft在排序后必须挪到右侧\r\n\r\n        int n = arr.length;\r\n        int[] maxFromLeft = new int[n];\r\n        int[] minFromRight = new int[n+1];\r\n\r\n        maxFromLeft[0] = arr[0];\r\n        for (int i=1; i<n; i++) {\r\n            maxFromLeft[i] = Math.max(maxFromLeft[i-1], arr[i]);\r\n        }\r\n\r\n        minFromRight[n] = 0x3f3f3f;\r\n        for (int i=n-1; i>=0; i--) {\r\n            minFromRight[i] = Math.min(minFromRight[i+1], arr[i]);\r\n        }\r\n\r\n        int count = 1;\r\n        for (int i=0; i<n-1; i++) {\r\n            if (maxFromLeft[i] <= minFromRight[i+1]) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2524954794","body":"```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode rotateRight(ListNode head, int k) {\r\n        if (head == null) {\r\n            return null;\r\n        }\r\n\r\n        // 第一步， k = k % n \r\n        // 第二步，把倒数k个节点挪到链表的最前面\r\n        int count = 0;\r\n        ListNode p = head;\r\n        while (p != null) {\r\n            count++;\r\n            p = p.next;\r\n        }\r\n\r\n        k = k % count;\r\n        if (k == 0) {\r\n            return head;\r\n        }\r\n\r\n        p = head;\r\n        ListNode p2 = head;\r\n        ListNode tail = null;\r\n        while (p != null) {\r\n            // k = 2;\r\n            // 1 -> 2 -> 3 -> 4 -> 5 -> null\r\n            //      ^         ^  \r\n            //     p2         p         // when k < 0;\r\n            //           ^        ^\r\n            //          p2        p     // last loop            \r\n\r\n            if (k >= 0) {\r\n                k--;\r\n            } else {\r\n                p2 = p2.next;\r\n            }\r\n\r\n            p = p.next;\r\n            if (p != null && p.next == null) {\r\n                tail = p;\r\n            }\r\n        }\r\n\r\n        ListNode newHead = p2.next;\r\n        p2.next = null;\r\n        tail.next = head;\r\n        return newHead;\r\n    }\r\n}\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2526710896","body":"```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode() {}\r\n *     TreeNode(int val) { this.val = val; }\r\n *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n *         this.val = val;\r\n *         this.left = left;\r\n *         this.right = right;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode sortedListToBST(ListNode head) {\r\n        return dfs(head, null);\r\n    }\r\n\r\n    // build tree from the list [start, end) => (not including end node)\r\n    // SC O(n)  TC: tree node -> O(n), stack size -> O(h)\r\n    public TreeNode dfs(ListNode start, ListNode end) {\r\n        if (start == end) {\r\n            return null;\r\n        }\r\n\r\n        if (start.next == end) {\r\n            // not including List end node, only return the tree node from the List start node.\r\n            return new TreeNode(start.val);\r\n        }\r\n\r\n        // find mid\r\n        ListNode fast = start;\r\n        ListNode slow = start;\r\n        while (fast != end && fast.next != end) {\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n\r\n        ListNode mid = slow;\r\n        TreeNode node = new TreeNode(mid.val);\r\n        node.left = dfs(start, slow);\r\n        node.right = dfs(slow.next, end);\r\n\r\n        return node;\r\n    }\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530771023","body":"第一轮初面的时候如果快没时间了可能会出这种题\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        if (headA == null || headB == null) {\r\n            return null;\r\n        }\r\n\r\n        // pA ==> A + B = [1, 9, 1 ,2 ,4, 3, 2, 4]\r\n        // pB ==> B + A = [3, 2, 4, 1, 9, 1, 2, 4]\r\n        //                                   ^\r\n        //           intersected node when pA == pB \r\n\r\n        ListNode pA = headA;\r\n        ListNode pB = headB;\r\n        while (pA != pB) {  // TC O(n+m)\r\n            pA = pA != null ? pA.next : headB;\r\n            pB = pB != null ? pB.next : headA;\r\n        }\r\n\r\n        return pA; // pA == null if two lists do not intersect\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2533780428","body":"查表法。。。\r\n```java\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        Set<ListNode> visited = new HashSet<>();\r\n        ListNode p = head;\r\n        while (p != null && !visited.contains(p)) {\r\n            visited.add(p);\r\n            p = p.next;\r\n        }\r\n\r\n        return p;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2537935066","body":"这题太容易碰见了，记得之前面试的时候被问过至少三次。。\r\n```java\r\nclass LRUCache {\r\n    // 双向链表，MRU节点在head之后，LRU节点在tail之前\r\n    // head <-> MRU <-> ... <-> LRU <-> tail\r\n    ListNode head;\r\n    ListNode tail;\r\n\r\n    HashMap<Integer, ListNode> cache; // key -> ListNode\r\n\r\n    int cap;\r\n    \r\n\r\n    public LRUCache(int capacity) {\r\n        head = new ListNode();\r\n        tail = new ListNode();\r\n        head.next = tail;\r\n        tail.prev = head;\r\n        cap = capacity;\r\n        cache = new HashMap<>();\r\n    }\r\n    \r\n    public int get(int key) {\r\n        if (!cache.containsKey(key)) {\r\n            return -1;\r\n        }\r\n\r\n        ListNode node = cache.get(key);\r\n        moveToHead(node);\r\n        return node.value;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        if (cache.containsKey(key)) {\r\n            ListNode node = cache.get(key);\r\n            moveToHead(node);\r\n            node.value = value;\r\n            return;\r\n        }\r\n\r\n        if (cache.size() == cap) {\r\n            ListNode lruNode = tail.prev;\r\n            unlink(lruNode);\r\n            cache.remove(lruNode.key);\r\n        }\r\n\r\n        ListNode node = new ListNode(key, value);\r\n        moveToHead(node);\r\n        cache.put(key, node);\r\n    }\r\n\r\n    private void unlink(ListNode node) {\r\n        ListNode prev = node.prev;\r\n        ListNode next = node.next;\r\n        if (prev != null) {\r\n            prev.next = next;\r\n        }\r\n        if (next != null) {\r\n            next.prev = prev;\r\n        }\r\n    }\r\n\r\n    private void moveToHead(ListNode node) {\r\n        unlink(node);\r\n        \r\n        ListNode headNext = head.next;\r\n        head.next = node;\r\n        node.prev = head;\r\n        node.next = headNext;\r\n        headNext.prev = node;\r\n    }\r\n\r\n    public class ListNode {\r\n        ListNode prev;\r\n        ListNode next;\r\n        int key;\r\n        int value;\r\n\r\n        public ListNode(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n            this.prev = null;\r\n            this.next = null;\r\n        }\r\n\r\n        public ListNode() {\r\n            this(-2, -2);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache obj = new LRUCache(capacity);\r\n * int param_1 = obj.get(key);\r\n * obj.put(key,value);\r\n */\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540686960","body":"```java\r\n// TC O(n), SC O(h)\r\nclass Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if (root == null) {\r\n            return 0;\r\n        }\r\n\r\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\r\n    }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2542903319","body":"```java\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode() {}\r\n *     TreeNode(int val) { this.val = val; }\r\n *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n *         this.val = val;\r\n *         this.left = left;\r\n *         this.right = right;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        if (p == null && q == null) {\r\n            return true;\r\n        }\r\n\r\n        if (p == null || q == null) {\r\n            return false;\r\n        }\r\n\r\n        // p != null && q != null\r\n        return p.val == q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\r\n    }\r\n}\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544136126","body":"层序遍历，先右后左。\r\n```java\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode() {}\r\n *     TreeNode(int val) { this.val = val; }\r\n *     TreeNode(int val, TreeNode left, TreeNode right) {\r\n *         this.val = val;\r\n *         this.left = left;\r\n *         this.right = right;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    public int findBottomLeftValue(TreeNode root) {\r\n        if (root == null) {\r\n            return Integer.MIN_VALUE;\r\n        }\r\n\r\n        int ans = 0;\r\n        Deque<TreeNode> q = new LinkedList<>(); // SC O(n) \r\n        q.offer(root);\r\n        while (!q.isEmpty()) { // TC O(n)\r\n            TreeNode node = q.poll();\r\n            ans = node.val;\r\n            if (node.right != null) {\r\n                q.offer(node.right);\r\n            }\r\n            if (node.left != null) {\r\n                q.offer(node.left);\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2550358870","body":"```java\r\nclass Solution {\r\n    TreeMap<Integer, TreeMap<Integer, List<Integer>>> map; // {col_index -> {row_index -> [val1, val2....valn]}}\r\n    public List<List<Integer>> verticalTraversal(TreeNode root) {\r\n        map = new TreeMap<>(); // SC O(N)\r\n        dfs(root, 0, 0); // TC O(N), SC O(logN)\r\n        \r\n        List<List<Integer>> ans = new ArrayList<>();\r\n        for (int col : map.keySet()) { // TC O(X)\r\n            List<Integer> list = new ArrayList<>();\r\n            TreeMap<Integer, List<Integer>> rowVals = map.get(col);\r\n            for (int row : rowVals.keySet()) { // TC O(Y)\r\n                List<Integer> vals = rowVals.get(row);\r\n                Collections.sort(vals); // TC O(K * logK)\r\n                list.addAll(vals);\r\n            }\r\n\r\n            ans.add(list);\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n    \r\n    private void dfs(TreeNode root, int col, int row) {\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        \r\n        // TC O(X * LogX) + O(Y * LogY)\r\n        map.computeIfAbsent(col, k -> new TreeMap<>()).computeIfAbsent(row, k -> new ArrayList<>()).add(root.val);\r\n        dfs(root.left, col - 1, row + 1);\r\n        dfs(root.right, col + 1, row + 1);\r\n    }\r\n}\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"haodongwang1995":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509583583","body":"### 思路\n1. 代码模拟每一位相加，进位\n2. 通过 / 和 % 分别取出剩余的数值和当前位的数值\n3. 用idx判断第一个参数目前加到哪一位\n4. 用carryOver 判断是否进位\n5. 每一次循环从做往右推入 第一个数当前位数值，第二个数当前位数值 和 是否进位\n6. 判断while循环进行：\n    a. 第一个参数没有遍历完（idx>=0）\n    b. 第二个参数没有遍历完（剩余的数值 和 当前位的数值 不等于 0）\n    c. 进位是否加完\n### 代码\n```java\n\n/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    let maskedNum = k%10\n    let remainNum = Math.floor(k/10)\n    let idx = num.length-1\n    let carryOver = 0\n    let cur = 0\n    let res = []\n    while(idx>=0 || carryOver !==0 || maskedNum !==0 || remainNum !==0){\n        cur = maskedNum + (num[idx]||0) + carryOver\n        if(cur >9){\n            cur = cur-10\n            carryOver = 1\n        }\n        else {\n            carryOver = 0\n        }\n        maskedNum = remainNum%10\n        remainNum = Math.floor(remainNum/10)\n        idx--\n        res.unshift(cur)\n    }\n    return res\n};\n\n```\n### 复杂度分析\n时间复杂度 O(N) N位最长的数字的位数长度\n空间复杂度 O(N+1) => O(N) N位最长的数字的位数长度\n\n### 总结\n在判断循环结束的时候要仔细，同时判断两个数是否遍历完成，进位是否存在","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2510733024","body":"### 思路\n1. 正序反序依次遍历一次，记录距离上一个匹配的距离\n2. 在每次的赋值判断场景有：\n\n    a. 目前为止还未出现的匹配字母，不赋值\n\n    b. 当前匹配，赋值0\n\n    c. 已经出现匹配，原来的res位置为空，需要赋值\n\n    d. 已经出现匹配，原来的res位置有值，大于当前距离计数，用当前的计数覆盖\n\n    e. 已经出现匹配，原来的res位置有值，小于等于当前距离计数，不进行覆盖\n\n### 代码\n```java\n\n\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let res = new Array(s.length)\n    let inOrderFn = ((a=-1)=>++a)\n    let reverseFn = ((a=s.length)=>--a)\n    let triverse = (res, s,c,getFn)=>{\n        let idx = getFn()\n        let counter = undefined\n        while(idx<s.length && idx > -1){\n            if(s[idx] === c){\n                counter = 0\n                res[idx] = counter\n                counter++\n            }\n            else if(res[idx] < counter || counter === undefined ){\n                // do not replace value \n            }\n            else{\n                res[idx] = counter\n                counter++\n            }\n            idx = getFn(idx)\n        }\n        return res\n    }\n    res = triverse(res, s, c, inOrderFn)\n    res = triverse(res, s, c, reverseFn)\n    return res\n};\n\n```\n\n### 复杂度分析\n时间复杂度 O(2N) -> O(N) N位最长的数字的位数长度\n\n空间复杂度 O(N) -> O(N) N位最长的数字的位数长度\n\n### 总结\n需要注意判断时场景是否全面，以后还是先写思路，这样可以复查","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513866361","body":"###思路\n\n1. 设置maxSize：\n    a. 创建时记录\n    b. push 时检查当前大小是否小于等于maxSize，大于直接返回\n2. push 功能\n    a. 新增元素\n3. pop功能\n    a. 删除元素\n4. inc 功能\n    a. 判断输入个数是否小于等于当前数量，大于直接返回\n    b. 从底开始根据入参依次相加\n\n### 代码\n```javascript\n\n/**\n */\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    this.stack = []\n    this.maxSize = maxSize\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(this.stack.length >=this.maxSize){\n        return \n    }\n    this.stack.push(x)\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    let a = this.stack.pop()\n    return a || -1\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i = 0; i< k && i < this.stack.length;i++){\n        this.stack[i] +=val\n    }\n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n\n\n```\n\n### 复杂度分析\n时间复杂度 O(1) \n\n空间复杂度 O(n) \n\n### 总结\n在创建数组的时候如果用 new Array() 方法会导致长度固定，如果后变要用到 length 属性需要考虑到位","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517462734","body":"### 思路\n1. 使用一个栈，往里push，直到出现']'，开始处理这一个括号的内容，处理完的结果当成一个字符重新push进栈\n2. 最后把这个栈变成字符串，输出\n\n\n### 代码\n```java\n\n/**\n * @param {string} s\n * @return {string}\n */\nvar decodeString = function(s) {\n    let stack = []\n    let strStack = []\n    let res = ''\n    \n    for(let i  = 0; i< s.length; i++){\n        if( s[i] === ']'){\n            let tmpStr = ''\n            let char = ''\n            for(let idx = stack.length-1; stack[idx] !== '['; idx-- ){\n                let char = stack.pop()\n                tmpStr = char + tmpStr\n            }\n            stack.pop();\n            let num = ''\n            while(!Number.isNaN(Number(stack.at(-1)))){\n                num = stack.pop() + num\n            }\n            stack.push(tmpStr.repeat(Number(num)))\n        }\n        else {\n            stack.push(s[i])\n        }\n    }\n    return stack.toString().replaceAll(',','')\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)\n\n### 总结\n用栈来处理括号","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2519681114","body":"### 思路\n1. 使用一个栈，往里push，直到出现']'，开始处理这一个括号的内容，处理完的结果当成一个字符重新push进栈\n2. 最后把这个栈变成字符串，输出\n\n\n### 代码\n```javascript\n\nvar MyQueue = function() {\n    this.stack1 = []\n    this.stack2 = []\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function(x) {\n    this.stack1.push(x)\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.pop = function() {\n    if(this.stack2.length === 0){\n        while(this.stack1.length !==0){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    return this.stack2.pop()\n};\n\n/**\n * @return {number}\n */\nMyQueue.prototype.peek = function() {\n    if(this.stack2.length === 0){\n        while(this.stack1.length !==0){\n            this.stack2.push(this.stack1.pop())\n        }\n    }\n    let res = this.stack2.at(-1)\n    return res\n};\n\n/**\n * @return {boolean}\n */\nMyQueue.prototype.empty = function() {\n    return this.stack1.length === 0 && this.stack2.length === 0\n};\n\n/** \n * Your MyQueue object will be instantiated and called as such:\n * var obj = new MyQueue()\n * obj.push(x)\n * var param_2 = obj.pop()\n * var param_3 = obj.peek()\n * var param_4 = obj.empty()\n */\n ```\n\n### 复杂度分析\n时间复杂度 \n    push :O(1) \n    pop :O(n) \n    peek: O(n)\n    empty: O(1)\n空间复杂度 \n    O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523300389","body":"### 思路\n1. 从左到右依次排查\n    a. 栈中每一项作为一个区域\n    b. 栈中每一项存该区最大值\n    c. 如果大于当前栈顶值，当成一个区,推入栈中\n    d. 如果小于当前栈，记住当前栈顶值，往下pop，直到找到底 或者 找到比当前数小的那一项为止，推入之前记住的栈顶值\n2. 返回栈高度作为最多可分块\n\n### 代码\n``` javascript\n/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n    const stack = [];\n    for (const num of arr) {\n        if (stack.length === 0 || num >= stack[stack.length - 1]) {\n            stack.push(num);\n        } else {\n            const mx = stack.pop();\n            while (stack.length && stack[stack.length - 1] > num) {\n                stack.pop();\n            }\n            stack.push(mx);\n        }\n    }\n    return stack.length;\n\n};\n```\n\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525160820","body":"### 思路\n1. 根据题目理解，旋转一次就是把尾断掉，然后作为新的头，连到之前的头之前\n2. 由于旋转次数有可能大于链表长度，所以偏移量应该为 k mod 长度\n3. 所以需要的操作：\n    a. 找到链表的长度\n    b. 计算出偏移量\n    c. 找到最后n+1项目。通过维护一个偏移量长度+1的数组实现，每次超长就把第一个给删掉，从尾部插入新的节点。\n    d. 设置新的尾巴：把数组第0个的next指向空\n    e. 把之前的尾巴连到旧头：把数组最后一项的next指向旧头\n    f. 新的头就是数组的第二项\n     \n### 代码\n``` javascript\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    if(head === null || head.next === null) return head\n    let tmp = head;\n    let count = 1\n    let arr = []\n    while( tmp.next){\n        tmp = tmp.next\n        count ++\n    }\n    let shiftNum = k% count;\n    if(shiftNum === 0){\n        return head\n    }\n    tmp = head\n    while( tmp.next){\n        if(arr.length === shiftNum){\n            arr.shift()\n        }\n        arr.push(tmp)\n        tmp = tmp.next\n        count ++\n    }\n    arr.push(tmp)\n    arr[0].next = null\n\n    arr[arr.length-1].next = head\n    return arr[1]\n\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525471147","body":"### 思路\n1. 交换两个节点\n    第一个节点的下一个 改为第二个节点的下一个\n    第二个节点的下一个 改为第一个节点\n2. 连接之前的节点\n    之前的节点的下一个 改为第二个节点\n\n\n### 代码\n``` javascript\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    let first = head, second = head?.next, last;\n    let res = second || head\n    let tmp\n    while( first && second){\n        last && (last.next = second)\n        tmp = second.next \n        first.next = second.next\n        second.next = first\n        last = first\n        first = first?.next\n        second = first?.next\n    }\n    return res\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(0)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2527891439","body":"### 思路\r\n快慢指针找到中间项，创建树节点，递归直到最后\r\n\r\n###代码 \r\n``` javascript\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\n/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {TreeNode}\r\n */\r\nvar sortedListToBST = function(head) {\r\n    if(head === null){\r\n        return head\r\n    }\r\n    return buildTreeFn(head,null)\r\n};\r\n\r\nfunction buildTreeFn (left,right){\r\n    if(left === right){\r\n        return null\r\n    }\r\n    let fast = left;\r\n    let slow = left;\r\n    while(fast !== right && fast.next !== right){\r\n        fast = fast.next.next\r\n        slow = slow.next\r\n    }\r\n    let leftTree = buildTreeFn(left,slow)\r\n    let rightTree = buildTreeFn(slow.next,right)\r\n    return new TreeNode(slow.val,leftTree,rightTree)\r\n}\r\n\r\n```\r\n### 复杂度分析\r\n时间复杂度 O(N) \r\n空间复杂度 O(N)\r\n\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2531514460","body":"### 思路\n两个指针分别遍历A和B，遍历完以后再继续遍历对方，这样两边最后一定会同时走最后一段C\n判断两个指针是否重合，开始重合的地方就是重合处\n\n### 代码\n```javascript\n\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n    let ptrA = headA, ptrB = headB;\n    while(ptrA!==ptrB){\n        ptrA = ptrA === null ? headB: ptrA.next\n        ptrB = ptrB === null ? headA: ptrB.next\n    }\n    return ptrA\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(1)\n\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2535755064","body":"### 思路\r\n快慢指针，相遇以后；重新新建指针从头开始，与慢指针相交点即为环的入口\r\n\r\n### 代码\r\n``` javascript\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar detectCycle = function(head) {\r\n    let fast = head, slow = head, isFirst = true;\r\n    while (isFirst || fast !== slow){\r\n        isFirst && (isFirst = false)\r\n        fast = fast?.next?.next\r\n        slow = slow?.next\r\n        if(fast===null || fast === undefined){\r\n            return null\r\n        }\r\n    }\r\n    let ptr = head\r\n    while (ptr !== slow){\r\n        ptr = ptr?.next\r\n        slow = slow?.next\r\n    }\r\n    return ptr\r\n};\r\n\r\n```\r\n\r\n### 复杂度分析\r\n时间复杂度 O(N) \r\n空间复杂度 O(1)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2538618949","body":"### 思路\r\n1. 由于添加删除需要为O(1),又需要随时改变顺序以保存优先级，所以使用双向列表。\r\n2. 由于获取也要为 O(1), 所以用HashMap来保存key和对应node\r\n\r\n### 代码\r\n``` javascript\r\n\r\nclass DoubleLinkedListNode {\r\n    constructor(key, value) {\r\n        this.key = key\r\n        this.value = value\r\n        this.pre = null\r\n        this.next = null\r\n    }\r\n}\r\n\r\nclass LRUCache{\r\n    constructor(capacity){\r\n        this.dummyHead = new DoubleLinkedListNode(null,null)\r\n        this.dummyTail = new DoubleLinkedListNode(null, null)\r\n        this.dummyHead.next = this.dummyTail\r\n        this.dummyTail.pre = this.dummyHead\r\n        this.hashMap = new Map()\r\n        this.capacity = capacity\r\n        this.size = 0\r\n\r\n    }\r\n    _addHead(key,val){\r\n        let newNode = new DoubleLinkedListNode(key,val)\r\n        this.dummyHead.next.pre = newNode\r\n        newNode.next = this.dummyHead.next\r\n        this.dummyHead.next = newNode\r\n        newNode.pre = this.dummyHead\r\n        this.size++\r\n        this.hashMap.set(key,newNode)\r\n    }\r\n    _deleteNode(node){\r\n        node.pre.next = node.next\r\n        node.next.pre = node.pre\r\n        node.next = null\r\n        node.pre = null\r\n        this.size--\r\n        this.hashMap.delete(node.key)\r\n    }\r\n    _deleteTail(){\r\n        this._deleteNode(this.dummyTail.pre)\r\n    }\r\n    get(key){\r\n        let node = this.hashMap.get(key)\r\n        if(!node){\r\n            return -1\r\n        }\r\n        this._deleteNode(node)\r\n        this._addHead(node.key, node.value)\r\n        return node.value\r\n    }\r\n    put(key,val){\r\n        let old = this.hashMap.get(key)\r\n        if(old){\r\n            this._deleteNode(old)\r\n            this._addHead(key, val)\r\n            return \r\n        }\r\n        if(this.size === this.capacity){\r\n            this._deleteTail()\r\n        }\r\n        this._addHead(key, val)\r\n    }\r\n}\r\n\r\n/** \r\n * Your LRUCache object will be instantiated and called as such:\r\n * var obj = new LRUCache(capacity)\r\n * var param_1 = obj.get(key)\r\n * obj.put(key,value)\r\n */\r\n\r\n ```\r\n\r\n### 复杂度分析\r\n时间复杂度 O(1) \r\n空间复杂度 O(N)\r\n","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540726726","body":"### 代码\n``` javascript\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    return findDeep(root)\n};\nlet findDeep = (root)=>{\n    if(!root){\n        return 0\n    }\n    return 1+Math.max(findDeep(root.left),findDeep(root.right))\n}\n\n```\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543046184","body":"### 代码\n```javascript\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n */\nvar isSameTree = function(p, q) {\n    if(p === null && q === null){\n        return true\n    }\n    if(p?.val !== q?.val){\n        return false\n    }\n    return isSameTree(p.left,q.left) && isSameTree(p.right,q.right)\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543864563","body":"### 代码\n``` javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n    return triverseTree(root,[])\n    \n};\nfunction triverseTree (node,arr){\n    if(!node){\n        return 0\n    }\n    let newArr = arr.concat(node.val)\n    if(!node.left && ! node.right){\n        return Number(newArr.join(''))\n    }\n    return triverseTree (node.left,newArr) + triverseTree (node.right,newArr)\n}\n\n```\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2545344571","body":"### 思路\n用 bfs 比较直接\n\n### 代码\n``` javascript\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n    if(!root){\n        return null \n    }\n    let levelNodes = [root]\n    let nextLevelNodes = []\n    let firstTimeFlag = true\n    let node = root\n    while(firstTimeFlag || levelNodes.length !==0){\n        firstTimeFlag = false\n        levelNodes.forEach((n)=>{\n            n.left && nextLevelNodes.push(n.left)\n            n.right && nextLevelNodes.push(n.right)\n        })\n        if(nextLevelNodes.length!==0 ){\n            levelNodes = nextLevelNodes\n            nextLevelNodes = []\n        }\n        else if(nextLevelNodes.length==1 ){\n            return nextLevelNodes[0].val\n        }\n        else{\n            return levelNodes[0].val\n        }\n        \n    }\n};\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2551333294","body":"### 思路 \n用递归dfs遍历树并且带入坐标进行存储，最后处理数据\n\n### 代码\n``` javascript\n\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar verticalTraversal = function(root) {\n   let store = {}\n    visitTree(root,0,0,store)\n    console.log(store)\n    let res = []\n    Object.keys(store).sort((a,b)=>a-b).forEach((idx)=>{\n        res.push(\n            store[idx].filter((a)=>a)\n                .reduce((reducer, item)=>{\n                    reducer.push(item.sort((a,b)=>a-b))\n                    return reducer\n                },[])\n                .flat()\n        )\n    })\n    return res\n};\nlet visitTree = (root,x,y,store)=>{\n    !store[x] && (store[x] = [])\n    !store[x][y] && (store[x][y] = [])\n    store[x][y].push(root.val)\n    root.left && visitTree(root.left,x-1,y+1,store)\n    root.right && visitTree(root.right,x+1,y+1,store)\n}\n```\n\n### 复杂度分析\n时间复杂度 O(N) \n空间复杂度 O(N)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"shuichicx":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509616185","body":"## 思路\n直接把K加到数组中，在最后一位加上K，再进行进位，到第一位如果还能进位就加在前面\n\n## 代码\n```py\nclass Solution:\n\tdef addToArrayForm(self, num: List[int], k: int) -> List[int]:\n\t\ti=len(num)-1\n\t\tnum[i]+=k\n\t\twhile i>0:\n\t\t\tif num[i]>=10:\n\t\t\t\tnum[i],num[i-1]=num[i]%10,num[i-1]+num[i]//10\n\t\t\ti-=1\n\t\twhile num[0]>=10:\n\t\t\tnum=[num[0]//10]+num\n\t\t\tnum[1]%=10\n\t\treturn num\n```\n\n## 复杂度分析\n- 时间复杂度 O(N)\n- 空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511211305","body":"## 思路\n数组正向遍历一遍，记录与左边最近的c的距离，反向遍历一遍，记录与右边最近的c的距离，最后对每个位置的距离取最小值，如果左边和右边还没有c，可以将此时的c下标记为正负无穷\n\n## 代码\n```py\nclass Solution:\n\tdef shortestToChar(self, s: str, c: str) -> List[int]:\n\t\tn=len(s)\n\t\tres=[0]*n\n\t\tidx=float('-inf')\n\t\tfor i in range(n):\n\t\t\tif s[i]==c:\n\t\t\t\tidx=i\n\t\t\tres[i]=i-idx\n\t\tidx=float('inf')\n\t\tfor i in range(n-1,-1,-1):\n\t\t\tif s[i]==c:\n\t\t\t\tidx=i\n\t\t\tres[i]=min(res[i],idx-i)\n\t\treturn res\n```\n\n## 复杂度分析\n- 时间复杂度 O(N)\n- 空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514575932","body":"```py\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack=[]\n        self.maxSize=maxSize\n\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack)==0:\n            return -1\n        else:\n            return self.stack.pop()\n        \n    def increment(self, k: int, val: int) -> None:\n        n=min(k,len(self.stack))\n        for i in range(n):\n            self.stack[i]+=val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517438559","body":"```py\nclass Solution:\n    def decodeString(self, s: str) -> str:\n        stack, res, n = [], \"\", 0\n        for c in s:\n            if c == '[':\n                stack.append([n, res])\n                res, n = \"\", 0\n            elif c == ']':\n                cur_n, last_res = stack.pop()\n                res = last_res + cur_n * res\n            elif '0' <= c <= '9':\n                n = n * 10 + int(c)            \n            else:\n                res += c\n        return res\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520690567","body":"```py\nclass MyQueue:\n\n    def __init__(self):\n        self.s1,self.s2=[],[]\n\n    def push(self, x: int) -> None:\n        self.s1.append(x)\n\n    def pop(self) -> int:\n        peek=self.peek()\n        self.s2.pop()\n        return peek\n\n    def peek(self) -> int:\n        if self.s2: return self.s2[-1]\n        if not self.s1: return -1\n        while self.s1:\n            self.s2.append(self.s1.pop())\n        return self.s2[-1]\n\n    def empty(self) -> bool:\n        return not self.s1 and not self.s2\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525216256","body":"```py\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        tail = head\n        length = 1\n        while tail.next:\n            length += 1\n            tail = tail.next\n        tail.next = head\n\n        k = k % length\n        for _ in range(length - k):\n            tail = tail.next\n\n        head = tail.next\n        tail.next = None\n        return head\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2526190721","body":"```py\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        length = 0\n        lst = head\n        while lst:\n            length += 1\n            lst = lst.next\n        \n        lst = head\n        for i in range(int(length / 2)):\n            temp = lst.val\n            lst.val = lst.next.val\n            lst.next.val = temp\n            lst = lst.next.next\n        return head\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2528473474","body":"```py\nclass Solution:\n    def sortedListToBST(self, head: ListNode) -> TreeNode:\n        if not head:\n            return None\n        elif not head.next:\n            return TreeNode(head.val)      \n        pre, slow, fast = None, head, head\n        while fast and fast.next:\n            pre = slow\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.val)\n        pre.next = None\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2532137066","body":"```py\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        A, B = headA, headB\n        while A != B:\n            A = A.next if A else headB\n            B = B.next if B else headA\n        return A\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2536246401","body":"```py\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast is slow:\n                while slow is not head:\n                    slow = slow.next\n                    head = head.next\n                return slow\n        return None\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2541746396","body":"```py\nclass Solution:\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        l_depth = self.maxDepth(root.left)\n        r_depth = self.maxDepth(root.right)\n        return max(l_depth, r_depth) + 1\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543163173","body":"```py\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p is None or q is None:\n            return p is q\n        return p.val==q.val and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543918710","body":"```py\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        ans=0\n        def dfs(node,x):\n            if node is None:\n                return\n            x=x*10+node.val \n            if node.left is node.right:\n                nonlocal ans \n                ans+=x\n                return \n            dfs(node.left,x)\n            dfs(node.right,x)\n        dfs(root,0)\n        return ans \n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2545936155","body":"```py\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        q=deque([root])\n        while q:\n            node=q.popleft()\n            if node.right:\n                q.append(node.right)\n            if node.left:\n                q.append(node.left)\n        return node.val\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"qunshanhe":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2509762372","body":"# 思路\n写个 numToList 和 listToNum 的函数，把 list 转换为整数然后和k相加，再把结果转换为 list \n\n# 代码\nclass Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        return numToList(listToNum(num)+k)\n        \ndef numToList(num: int):\n    numList = []\n    while num !=0:\n        numList.append(num%10)\n        num = num//10\n    return numList[::-1]\n\ndef listToNum(numList: List[int]):\n    length = len(numList)\n    num = 0\n    for i in range(length):\n        num = num*10 + numList[i]\n    return num\n\n# 复杂度\n时间复杂度 O(N)\n空间复杂度 O(N)\n\n# 一个知识点\nnum // 10 是整除 直接获得整数，而且是向下取整\nnum / 10  是正常除法，返回的是浮点数","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511569989","body":"# 思路\n分而治之，最近的字符距离 = min(左边最近的字符距离，右边最近的字符距离)\n因此第一次从左到右遍历s，记录每个字符和其左边最近字符的距离\n第二次从右往左遍历s，记录每个字符和其右边最近字符的距离，同时更新最小值\n\n# 代码\nclass Solution:\n    def shortestToChar(self, s: str, c: str) -> list[int]:\n        n = len(s)\n        res = [0]*n\n\n        # 从左到右遍历\n        c_pos_lr = -1\n        for i in range(n):\n            if s[i] == c:\n                c_pos_lr = i\n            if c_pos_lr != -1:\n                res[i] = abs(i-c_pos_lr)\n        # 从右往左遍历\n        c_pos_rl = -1\n        for i in range(n-1,-1,-1):\n            if s[i] == c:\n                c_pos_rl = i\n            if c_pos_rl != -1:\n                if s[i] != c and res[i] ==0:\n                    res[i] = abs(i-c_pos_rl)\n                else:\n                    res[i] = min(abs(i-c_pos_rl),res[i])\n        return res\n\n# 复杂度\n时间复杂度 O(N)\n空间复杂度 O(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513403125","body":"class CustomStack:\n\n    def __init__(self, maxSize: int):\n       self.top = -1\n       self.stack = [0] * maxSize\n       self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if self.top < self.maxSize-1:\n            self.stack[self.top+1] = x\n            self.top = self.top+1\n\n    def pop(self) -> int:\n        if self.top > -1:\n            self.top = self.top-1\n            return self.stack[self.top+1]\n        else:\n            return -1\n        \n    def increment(self, k: int, val: int) -> None:\n        lim = min(k,self.top+1)\n        for i in range(lim):\n            self.stack[i] = self.stack[i]+val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517831615","body":"class Solution:\n    def decodeString(self, s: str) -> str:\n        stack, res, multi = [], \"\", 0\n        for c in s:\n            if c == '[':\n                stack.append([multi, res])\n                res, multi = \"\", 0\n            elif c == ']':\n                cur_multi, last_res = stack.pop()\n                res = last_res + cur_multi * res\n            elif '0' <= c <= '9':\n                multi = multi * 10 + int(c)            \n            else:\n                res += c\n        return res","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520606408","body":"class MyQueue:\n\n    def __init__(self):\n        self.inStack=[]\n        self.outStack=[]\n\n    def push(self, x: int) -> None:\n        self.inStack.append(x)\n\n    def pop(self) -> int:\n        if not self.outStack:self.in2out()\n        return self.outStack.pop()\n\n    def peek(self) -> int:\n        if not self.outStack:self.in2out()\n        return self.outStack[-1]\n\n    def empty(self) -> bool:\n        return not self.inStack and not self.outStack\n\n    def in2out(self)->None:\n        while self.inStack:\n            self.outStack.append(self.inStack.pop())","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hebingliang":[null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2510395821","body":"```\n/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    let result = [];\n    if(!s.length){\n        return result;\n    }\n    let firstShow = true;\n    for(let i = 0;i<s.length;i++){\n        //第一步，先找到C出现的位置\n        let item = s[i];\n        if(item==c){\n            //在当前C出现的位置内，寻找每一个与当前C的位置\n            for(let j = 0;j<s.length;j++){\n                let currentMin = Math.abs(i-j);\n                console.error(`第${i}次的结果是：${currentMin}`)\n                if(firstShow){\n                    result.push(currentMin)\n                }else{\n                    if(result[j]>currentMin){\n                        result[j] = currentMin\n                    }\n                }\n            }\n            firstShow = false\n        }\n    }\n    return result;\n};\n\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513372099","body":"/**\n * @param {number} maxSize\n */\nvar CustomStack = function(maxSize) {\n    arr = [];\n    maxLength = maxSize;\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function(x) {\n    if(arr.length==maxLength){\n        console.error(\"已经超出了\")\n    }else{\n        arr.push(x)\n    }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function() {\n    if(arr.length){\n        let num = arr[arr.length-1]\n        arr.splice(arr.length-1,1);\n        return num;\n    }else{\n        return -1\n    }\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function(k, val) {\n    for(let i = 0;i<(k>arr.length?arr.length:k);i++){\n        arr[i] = arr[i]+val\n    }\n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"baiqz":[null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511151107","body":"## **【Day 2】821. 字符的最短距离**\n\n\n\n\n\n### 1、问题\n\n````\n```\n给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组。\n\n示例 1:\n\n输入: S = \"loveleetcode\", C = 'e'\n输出: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n说明:\n\n- 字符串 S 的长度范围为 [1, 10000]。\n- C 是一个单字符，且保证是字符串 S 里的字符。\n- S 和 C 中的所有字母均为小写字母。\n\n```\n````\n\n### 2、思路\n\n\n\n把c看作边界，分成以c为分界的窗口，求s中每个元素索引到一个窗口内到边界的距离的最小值。\n\n把最小值放入设定好的数组中，返回数组。\n\n步骤：\n\n1.首先传入字符串s和作为边界的c\n\n2.设定数组res：数组元素个数为n=len(s)，res = [0 for i in range(n)]\n\n3.设定左边界l：l = 0 if s[0] == c else n\n\n3.设定右边界,查找索引1开始查找到的第一个c的位置 r： r = s.find(c, 1)\n\n4.遍历s元素中的索引并求得左边界和右边界距离的最小值，把最小值放入设定数组res中，如果遍历到元素与c相同则说明元素到了边界右端，开启下个窗口，使目前右边界设为新窗口的左边界，继续找下一个c的位置设为右边界：\n\n```py\nfor i in range(n)：\n\n\tres[i] = min(abs(i-l),abs(r-i))\n\n\tif\ti==r：\n    \tl = r\n    \tr = s.find(c,l+1) \nreturn res\n```\n\n​\t\t\t\n\n### 3、代码\n\n```py\nclass Solution(object):\n def shortestToChar(self, s, c):\n      \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n      \"\"\"\n      n = len(s)\n      res = [0 for i in range(n)]\n      l = 0 if s[0]==c else n\n      r = s.find(c, 1)\n    \n      for i in range(n):\n        res[i] = min(abs(i - l), abs(r - i))\n    \n        if  i == r:\n            l = r\n            r = s.find(c,l+1)\n      return res\n```\n\n### 4、复杂度：O（n）\n\n\n\n### 5、总结\n\n基础比较差，只是在理解基础上，背会默写了一遍，算法小白表示即使自己看了题写不出来，但经过看讲义和解答，深入理解后，自己也可以默写出答案，收获很多。以后还要多加练习和学习。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513973320","body":"# Day 3】1381. 设计一个支持增量操作的栈\r\n\r\n\r\n\r\n## 1、问题\r\n\r\n````\r\n```\r\n请你设计一个支持下述操作的栈。\r\n\r\n实现自定义栈类 CustomStack ：\r\n\r\nCustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize 之后则不支持 push 操作。\r\nvoid push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\r\nint pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\r\nvoid inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\r\n\r\n\r\n示例：\r\n\r\n输入：\r\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\r\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\r\n输出：\r\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\r\n解释：\r\nCustomStack customStack = new CustomStack(3); // 栈是空的 []\r\ncustomStack.push(1); // 栈变为 [1]\r\ncustomStack.push(2); // 栈变为 [1, 2]\r\ncustomStack.pop(); // 返回 2 --> 返回栈顶值 2，栈变为 [1]\r\ncustomStack.push(2); // 栈变为 [1, 2]\r\ncustomStack.push(3); // 栈变为 [1, 2, 3]\r\ncustomStack.push(4); // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\r\ncustomStack.increment(5, 100); // 栈变为 [101, 102, 103]\r\ncustomStack.increment(2, 100); // 栈变为 [201, 202, 103]\r\ncustomStack.pop(); // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\r\ncustomStack.pop(); // 返回 202 --> 返回栈顶值 202，栈变为 [201]\r\ncustomStack.pop(); // 返回 201 --> 返回栈顶值 201，栈变为 []\r\ncustomStack.pop(); // 返回 -1 --> 栈为空，返回 -1\r\n\r\n\r\n提示：\r\n\r\n1 <= maxSize <= 1000\r\n1 <= x <= 1000\r\n1 <= k <= 1000\r\n0 <= val <= 100\r\n每种方法 increment，push 以及 pop 分别最多调用 1000 次\r\n```\r\n````\r\n\r\n\r\n\r\n\r\n\r\n## 2、思路\r\n\r\n初始化栈，有储存元素列表、当前元素数量、最大容量和一个随出入栈动态变化的元素增量列表。\r\n\r\n然后实现入栈操作：判断栈的容量是否已满，当前数量小于最大容量\r\n\r\n实现出栈操作：判断栈是否为空，当前数量是否为0，为0返回-1，判断目前数量是否至少有2个元素，如果有则把倒数第一的增量加到倒数第二上，然后再删除末尾元素和末尾增量值并返回末尾元素的值与增量表末尾的增量之和。\r\n\r\n实现增量操作：判断容量是否为空，若不为空，进行增量操作，为使增量范围不超过当前元素数量，在要增量的前个k元素的k值和当前元素数量之间取最小值，并-1得到索引求增量对应位置的目前增量值，再与新加入的要求前k数增量Val求和。\r\n\r\n\r\n\r\n## 3、代码\r\n\r\n```py\r\nclass CustomStack():\r\n  def __init__(self, size: int):\r\n      self.st = []\r\n      self.cnt = 0\r\n      self.size = size\r\n      self.incrementals = []\r\n\r\n  def push(self, x:int) -> None:\r\n      if self.cnt < self.size:\r\n          self.st.append(x)\r\n          self.incrementals.append(0)\r\n          self.cnt += 1\r\n\r\n\r\n  def pop(self)-> int:\r\n      if self.cnt == 0: return -1\r\n      self.cnt -= 1\r\n      if self.cnt >= 1:\r\n         self.incrementals[-2] += self.incrementals[-1]\r\n      return self.st.pop() + self.incrementals.pop()\r\n\r\n  def increment(self, k: int, val:int) -> None:\r\n        if self.incrementals:\r\n            self.incrementals[min(self.cnt, k)-1] += val\r\n\r\n```\r\n\r\n\r\n\r\n## 4、复杂度\r\n\r\n1. **增量值列表动态调整:** 我们不再使用一个固定大小为 `maxSize` 的 `incrementals` 数组，而是使用一个动态的列表，它的大小始终与当前栈的长度保持一致。\r\n2. **入栈和出栈同步操作:** 每次执行 `push` 操作时，我们同时将一个新的增量值 0 入栈到 `incrementals` 列表中。类似地，每次执行 `pop` 操作时，我们也会将增量值与栈顶元素一起出栈。这样就保证了 `incrementals` 列表始终与栈元素保持一致。\r\n3. **空间复杂度降低:** 通过这种优化，我们避免了使用一个大小为 `maxSize` 的固定数组，将空间复杂度从 `O(maxSize)` 降低到了 `O(n)`，其中 `n` 是当前栈的长度。\r\n\r\n\r\n\r\n## 5、总结\r\n\r\n还是没写出来代码，跟着讲义和答案解析，自己尝试理解代码逻辑，背会默写。","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520349670","body":"## **【Day 5】232. 用栈实现队列**\n\n\n\n\n\n### 1、问题\n\n~~~py\n```\n使用栈实现队列的下列操作：\n\npush(x) -- 将一个元素放入队列的尾部。\npop() -- 从队列首部移除元素。\npeek() -- 返回队列首部的元素。\nempty() -- 返回队列是否为空。\n示例:\n\nMyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);\nqueue.peek(); // 返回 1\nqueue.pop(); // 返回 1\nqueue.empty(); // 返回 false\n说明:\n\n你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。\n你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\n假设所有操作都是有效的、 （例如，一个空的队列不会调用 pop 或者 peek 操作）。\n```\n~~~\n\n\n\n### 2、思路\n\n一个栈推入，另一个栈推出，实现队列需要先进先出，可以把推入栈的的元素pop到推出栈里\n\n- 首先设一个队列类：class MyQueue\n- 初始化栈：推入栈input_stack=[]，推出栈output_stack=[]\n- 定义写入操作：push（self，x:int)，x为要推入的参数，推入只需x把apend仅推入栈\n- 定义一个移动操作：把推入栈的元素转到推出栈里，in2out（），当推出栈为空时，转移所有推入栈的元素，保证推出栈始终有元素\n- 定义推出操作：pop（self），推出操作时，调用in2out把在推入栈先推入的元素pop出来，用返回接收从推出栈中pop出的元素\n- 定义获取元素的操作：peek（self），先调用in2out判断目前推出栈是否有余额，若没有则将，在推出栈位置为-1，返回推出栈索-1位置的元素，也是最先推入的元素\n- 定义判断队列是否为空：empty（self），返回推入栈且推出栈都为空时的布尔值\n\n\n\n### 3、代码\n\n\n\n```py\nclass MyQueue:\n    def __init__(self):\n            self.in_stack = []\n            self.out_stack = []\n\n    def push(self, x: int) -> None:\n            self.in_stack.append(x)\n\n    def in2out(self) :\n        if not self.out_stack:\n            while self.in_stack:\n                self.out_stack.append(self.in_stack.pop())\n\n    def pop(self) -> int:\n        self.in2out()\n        return self.out_stack.pop()\n\n    def peek(self):\n        self.in2out()\n        return self.out_stack[-1]\n\n\n    def empty(self) -> bool:\n        return len(self.in_stack) == 0 and len(self.out_stack) == 0\n\n\n```\n\n\n\n### 4、复杂度：O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523222199","body":"## 【Day 6】768. 最多能完成排序的块 II\n\n\n\n### 1、问题\n\n~~~py\n```\n这个问题和“最多能完成排序的块”相似，但给定数组中的元素可以重复，输入数组最大长度为2000，其中的元素最大为10**8。\n\narr是一个可能包含重复元素的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。\n\n我们最多能将数组分成多少块？\n\n示例 1:\n\n输入: arr = [5,4,3,2,1]\n输出: 1\n解释:\n将数组分成2块或者更多块，都无法得到所需的结果。\n例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。\n示例 2:\n\n输入: arr = [2,1,3,4,4]\n输出: 4\n解释:\n我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。\n然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。\n注意:\n\narr的长度在[1, 2000]之间。\narr[i]的大小在[0, 10**8]之间。\n\n```\n~~~\n\n\n\n### 2、思路\n\n遍历元素，如果当前元素小于栈中最大的元素，则表明当前元素不能单独成块，说明之前的块没有分正确，需要pop出栈里的元素直到找到当前元素大于等于的元素，然后以此分块，重新压入栈中\n\n- 如果当前元素大于等于栈里最大元素，则直接可分块\n\n\n\n### 3、代码\n\n```py\nclass Solution:\n    def maxChunksToSorted(self, A:int) -> int:\n        stack = []\n        for a in A:\n            if stack and stack[-1] > a:\n                cur = stack[-1]\n\n                while stack and stack[-1] > a: stack.pop()\n                stack.append(cur)\n            else:\n                stack.append(a)\n        return len(stack)\n\n```\n\n\n\n\n\n### 4、复杂度\n\n- 时间：O(n)\n- 空间：O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525842632","body":"## **【Day 8】24. 两两交换链表中的节点**\r\n\r\n\r\n\r\n\r\n\r\n### 1、问题\r\n\r\n````\r\n```\r\n给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\r\n\r\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\r\n\r\n \r\n\r\n示例 1：\r\n```\r\n\r\n![image](https://p.ipic.vip/r1afvu.jpg)\r\n\r\n```\r\n输入：head = [1,2,3,4]\r\n输出：[2,1,4,3]\r\n示例 2：\r\n\r\n输入：head = []\r\n输出：[]\r\n示例 3：\r\n\r\n输入：head = [1]\r\n输出：[1]\r\n \r\n\r\n提示：\r\n\r\n链表中节点的数目在范围 [0, 100] 内\r\n0 <= Node.val <= 100\r\n```\r\n````\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### 2、思路\r\n\r\n使用递归函数，递归余下的每对数字，然后直到边界，返回最后一层的head，在继续上层递归的操作返回置换位置后的next，直到退出递归，最后继续第一对数字的置换，返回置换后的新节点。\r\n\r\n\r\n\r\n### 3、代码\r\n\r\n```py\r\nclass Solution:\r\n    def swapPairs(self, head:ListNode) -> ListNode:\r\n        if not head or not head.next；\r\n        \treturn head\r\n        \r\n        next= head.next\r\n        head.next = self.swapPairs(next.next)\r\n        next.next = head\r\n        return next\r\n```\r\n\r\n\r\n\r\n### 4、复杂度：\r\n\r\n- 时间：O(n)\r\n- 空间：O(1)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530828021","body":"## **【Day 10】160. 相交链表**\n\n\n\n### 1、问题\n\n````\n```\n给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。\n\n图示两个链表在节点 c1 开始相交：\n\n```\n\n![](https://p.ipic.vip/bkdl1z.jpg)\n\n```\n题目数据 保证 整个链式结构中不存在环。\n\n注意，函数返回结果后，链表必须 保持其原始结构 。\n\n \n\n示例 1：\n```\n\n![](https://p.ipic.vip/bzw15z.jpg)\n\n```\n\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Intersected at '8'\n解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n示例 2：\n```\n\n![](https://p.ipic.vip/26cojo.jpg)\n\n```\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Intersected at '2'\n解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n示例 3：\n\n```\n\n![](https://p.ipic.vip/2tpyar.jpg)\n\n```\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n这两个链表不相交，因此返回 null 。\n \n\n提示：\n\nlistA 中节点数目为 m\nlistB 中节点数目为 n\n0 <= m, n <= 3 * 104\n1 <= Node.val <= 105\n0 <= skipA <= m\n0 <= skipB <= n\n如果 listA 和 listB 没有交点，intersectVal 为 0\n如果 listA 和 listB 有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1]\n \n\n进阶：你能否设计一个时间复杂度 O(n) 、仅用 O(1) 内存的解决方案？\n\n```\n````\n\n\n\n### 2、思路\n\n两个指针分别走两条链，走完换另一条，直到两指针相遇，返回交叉点\n\n```py\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB\n            b = b.next if b else headA\n        return a\n```\n\n\n\n### 3、复杂度\n\n- 时间：O(N)\n- 空间：O(1)\n\n","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2538249728","body":"## 【Day 12】146. LRU 缓存机制\n\n### 1、问题\n\n````\n```\n运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。\n实现 LRUCache 类：\n\nLRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存\nint get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\nvoid put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n\n进阶：你是否可以在 O(1) 时间复杂度内完成这两种操作？\n\n\n\n示例：\n\n输入\n\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n输出\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n解释\n\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // 缓存是 {1=1}\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\nlRUCache.get(1);    // 返回 1\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nlRUCache.get(2);    // 返回 -1 (未找到)\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nlRUCache.get(1);    // 返回 -1 (未找到)\nlRUCache.get(3);    // 返回 3\nlRUCache.get(4);    // 返回 4\n```\n````\n\n\n\n### 2、思路\n\n构建双向链表，并用哈希表进行查询操作\n\n\n\n### 3、代码\n\n```py\nclass Node:\n\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.prev = None\n        self.next = None\n\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        self.lookup = dict()\n        self.max_len = capacity\n\n    def get(self, key: int) -> int:\n        if key in self.lookup:\n            node = self.lookup[key]\n            self.remove(node)\n            self.add(node)\n            return node.val\n        else:\n            return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.lookup:\n            self.remove(self.lookup[key])\n        if len(self.lookup) == self.max_len:\n            self.remove(self.head.next)\n        self.add(Node(key, value))\n\n    def remove(self, node):\n        del self.lookup[node.key]\n        node.prev.next = node.next\n        node.next.prev = node.prev\n\n    def add(self, node):\n        self.lookup[node.key] = node\n        pre_tail = self.tail.prev\n        node.next = self.tail\n        self.tail.prev = node\n        pre_tail.next = node\n        node.prev = pre_tail\n```\n\n### 4、复杂度\n\n- 时间：O(1)\n- 空间：O(n)","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543057895","body":"## **【Day 14】100. 相同的树**\n\n\n\n### 1、问题\n\n````\n```\n给定两个二叉树，编写一个函数来检验它们是否相同。\n\n如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。\n\n示例 1:\n\n输入:       1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n输出: true\n示例 2:\n\n输入:      1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n输出: false\n示例 3:\n\n输入:       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n输出: false\n```\n````\n\n\n\n\n\n### 2、思路\n\n通过递归调用每一层的对应位置的节点是否相等，考虑节点为空的情况\n\n### 3、代码\n\n```python\nclass Solution:\n\tdef isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n\t\tif not p and not q:\n\t\t\treturn True\n\t\tif not p or not q:\n\t\t\treturn False\n\t\treturn p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```\n\n\n\n### 4、复杂度\n\n- 时间：O(n)\n- 空间：O(h)，h为树高度","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2545355603","body":"## **【Day 16】513. 找树左下角的值**\n\n\n\n### 1、问题\n\n````\n```\n给定一个二叉树，在树的最后一行找到最左边的值。\n\n示例 1:\n\n输入:\n\n    2\n   / \\\n  1   3\n\n输出:\n1\n \n\n示例 2:\n\n输入:\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n输出:\n7\n \n\n```\n````\n\n\n\n### 2、思路\n\n使用广度优先搜索，建立一个队列记录当前层的节点以及方便实现对应操作，保证先左节点后右节点的顺序搜索，返回最深层最左边的节点值\n\n## 3、代码\n\n```py\nclass Solution(object):\n    def findBottomLeftValue(self,root):\n        queue = collections.deque() #建立双边队列\n        queue.append(root) #初始化，把根节点加入队列\n        while queue:\n            length = len(queue) #记录当前层的节点数\n            res = queue[0].val\t#记录最左边的节点值\n            for _ in range(length):\n                cur = queue.popleft() #取出当前层左边的节点\n                if cur.left:\n                    queue.append(cur.left)\n                if cur.right:\n                    queue.append(cur.right)\n       return res\n                \n```\n\n\n\n### 4、复杂度\n\n- 时间：O(n)\n- 空间：O(队列长度)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"xiaogaoddd":[null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2511530056","body":"## 思路\n\n题目的要求也就是\ns[i] 到其左侧最近的字符 c 的距离\ns[i] 到其右侧最近的字符 c 的距离\n这两者当中的最小值。\n\n对于前者，可以从左往右遍历 s，若 s[i]=c， 则记录下此时字符 c 的下标 idx。遍历的同时更新 answer[i]=i−index。\n对于后者，可以从右往左遍历 s，若 s[i]=c，则记录下此时字符 c 的下标 idx。遍历的同时更新 answer[i]=min(answer[i],index−i)。\n代码实现时，在开始遍历的时候 idx 可能不存在，为了简化逻辑，可以用 −n 或 2n 表示，这里 n 是 s 的长度。\n\n\n## 代码\n```\n int min(int a,int b)\n {\n     return a < b ? a : b;\n }\n int* shortestToChar(char * s, char c, int* returnSize)\n {\n     int *ret = (int*)malloc(sizeof(int)*strlen(s));\n     int n = strlen(s);\n     (*returnSize) = strlen(s);\n     for(int i = 0,index = -n; i < strlen(s); i++){\n    //从前往后比较，对c后面的字符距离进行改变，故为i - index\n    //一开始i为0，为了使这个值为正且最大（为字符串长度），index要为-n\n         if(s[i] == c){\n            index = i;\n        }\n         ret[i] = i - index;\n     }\n    for(int i = n-1,index = 2*n;i >= 0;i--){\n    //从后往前比较，对c前面的字符距离进行改变，故为index - i\n    //一开始i为 strlen(s)-1，为了使这个值为正且最大（为字符串长度），index要为2n\n         if(s[i] == c){\n             index = i;\n         }\n         ret[i] = min(ret[i], index - i);\n     }\n    return ret;\n }\n```\n\n\n## 复杂度分析\n时间复杂度：O(n)。\n空间复杂度：O(1)。","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514355104","body":"``` c\r\ntypedef struct {\r\n    int *data; //数据域\r\n    int top; //栈顶指针\r\n    int capcaity; //表示栈的最大容量\r\n} CustomStack;\r\n\r\n\r\nCustomStack* customStackCreate(int capcaity) {\r\n     CustomStack* stack = (CustomStack*)malloc(sizeof(CustomStack));\r\n    stack->data = (int*)malloc(sizeof(int) * capcaity);\r\n    stack->capcaity = capcaity;\r\n    stack->top = -1; //栈顶指针始终指向栈顶的元素，将其先初始化为-1\r\n    return stack;\r\n}\r\n\r\nvoid customStackPush(CustomStack* obj, int x) {\r\n    if (obj->top == obj->capcaity - 1) {\r\n        return;\r\n        }\r\n    obj->data[++obj->top] = x;//判断当前元素的个数是否达到上限，如果没有达到，就把 top 后移一个位置并添加一个元素。\r\n}\r\n\r\nint customStackPop(CustomStack* obj) {\r\n    if (obj->top == -1) {\r\n        return -1;\r\n    }\r\n    return obj->data[obj->top--];//非空返回栈顶元素并将 top 前移一位\r\n}\r\n\r\nvoid customStackIncrement(CustomStack* obj, int k, int val) {\r\n     if (obj->top + 1 < k) {\r\n        for (int i = 0; i <= obj->top; i++) { \r\n            //注意这里需要小于等于，此时栈顶指向的位置是栈顶的元素\r\n            obj->data[i] += val;\r\n        }\r\n    }else {\r\n        for (int i = 0; i < k; i++) {\r\n            obj->data[i] += val;\r\n        }\r\n    }\r\n}\r\n\r\nvoid customStackFree(CustomStack* obj) {\r\n    free(obj->data);\r\n    free(obj);//释放\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517100869","body":"```C++\nclass Solution {\npublic:\n    string decodeString(string s) {\n        string res = \"\";\n        stack <int> nums;\n        stack <string> strs;\n        int num = 0;\n        int len = s.size();\n        for(int i = 0; i < len; ++ i)\n        {\n            if(s[i] >= '0' && s[i] <= '9')\n            {\n                num = num * 10 + s[i] - '0';\n            }\n            else if((s[i] >= 'a' && s[i] <= 'z') ||(s[i] >= 'A' && s[i] <= 'Z'))\n            {\n                res = res + s[i];\n            }\n            else if(s[i] == '[') \n            {\n                nums.push(num);\n                num = 0;\n                strs.push(res); \n                res = \"\";\n            }\n            else\n            {\n                int times = nums.top();\n                nums.pop();\n                for(int j = 0; j < times; ++ j)\n                    strs.top() += res;\n                res = strs.top(); \n                strs.pop();\n            }\n        }\n        return res;\n    }\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2519779511","body":"```C\ntypedef struct {\n    int* stk;\n    int stkSize;\n    int stkCapacity;\n} Stack;\n\nStack* stackCreate(int cpacity) {\n    Stack* ret = malloc(sizeof(Stack));\n    ret->stk = malloc(sizeof(int) * cpacity);\n    ret->stkSize = 0;\n    ret->stkCapacity = cpacity;\n    return ret;\n}\n\nvoid stackPush(Stack* obj, int x) {\n    obj->stk[obj->stkSize++] = x;\n}\n\nvoid stackPop(Stack* obj) {\n    obj->stkSize--;\n}\n\nint stackTop(Stack* obj) {\n    return obj->stk[obj->stkSize - 1];\n}\n\nbool stackEmpty(Stack* obj) {\n    return obj->stkSize == 0;\n}\n\nvoid stackFree(Stack* obj) {\n    free(obj->stk);\n}\n\ntypedef struct {\n    Stack* inStack;\n    Stack* outStack;\n} MyQueue;\n\n\nMyQueue* myQueueCreate() {\n MyQueue* ret = malloc(sizeof(MyQueue));\n    ret->inStack = stackCreate(100);\n    ret->outStack = stackCreate(100);\n    return ret;\n}\nvoid stackSwap(MyQueue* obj) {\n    while (!stackEmpty(obj->inStack)) {\n        stackPush(obj->outStack, stackTop(obj->inStack));\n        stackPop(obj->inStack);\n    }\n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n     stackPush(obj->inStack, x);\n}\n\nint myQueuePop(MyQueue* obj) {\n     if (stackEmpty(obj->outStack)) {\n       stackSwap(obj);\n    }\n    int x = stackTop(obj->outStack);\n    stackPop(obj->outStack);\n    return x;\n}\n\nint myQueuePeek(MyQueue* obj) {\n     if (stackEmpty(obj->outStack)) {\n        stackSwap(obj);\n    }\n    return stackTop(obj->outStack);\n}\n\nbool myQueueEmpty(MyQueue* obj) {\n     return stackEmpty(obj->inStack) && stackEmpty(obj->outStack);\n}\n\nvoid myQueueFree(MyQueue* obj) {\n     stackFree(obj->inStack);\n    stackFree(obj->outStack);\n}\n```","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2536200162","body":"```C\nListNode *detectCycle(ListNode *head) \n{\n    ListNode *fast = head, *slow = head;\n    while (fast && fast->next) \n   {\n        slow = slow->next;\n        fast = fast->next->next;\n        if (slow == fast) \n        { \n            ListNode *f = fast, *h = head;\n            while (f != h) f = f->next, h = h->next;\n            return h;\n        }\n    }\n    return NULL;\n}\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2551352573","body":"```C\nvoid pre_traving(struct TreeNode* root, int* i, int* max, int* min, int nums[][3], int row, int col)//先序遍历二叉树，并将结点的信息都存入nums数组\n{\n    if(root)\n    {\n        *max=(*max>col)?*max:col;\n        *min=(*min<col)?*min:col;\n        nums[*i][0]=root->val;\n        nums[*i][1]=row;\n        nums[*i][2]=col;\n        ++(*i);\n        pre_traving(root->left, i, max, min, nums, row+1, col-1);\n        pre_traving(root->right, i, max, min, nums, row+1, col+1);\n    }\n}\n\nvoid sort(int temp[][2], int n)//插入排序\n{\n    int i,j,t[2];\n    for(i=1; i<n; i++)\n    {\n        t[0]=temp[i][0],t[1]=temp[i][1];\n        for(j=i; j>=1; j--)\n        {\n            if(temp[j-1][1]>t[1])\n            {\n                temp[j][0]=temp[j-1][0];\n                temp[j][1]=temp[j-1][1];\n            }\n            else if(temp[j-1][1]==t[1]&&temp[j-1][0]>t[0])\n            {\n                temp[j][0]=temp[j-1][0];\n                temp[j][1]=temp[j-1][1];\n            }\n            else break;    \n        }\n        temp[j][0]=t[0];\n        temp[j][1]=t[1];\n    }\n}\n\nint** verticalTraversal(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\n    int nums[1000][3];\n    int temp[500][2];\n    int max=0,min=0,tail=0,i,j,k,lenth;//max和min分别表示最小和最大列\n    pre_traving(root, &tail, &max, &min, nums, 0, 0);\n    *returnSize=max-min+1;\n    *returnColumnSizes=(int*)malloc(sizeof(int)*(*returnSize));\n    int** answer=(int**)malloc(sizeof(int*)*(*returnSize));\n    for(j=0,i=min; i<=max; j++,i++)\n    {\n        lenth=0;\n        for(k=0; k<tail; k++)\n        {\n            if(nums[k][2]==i)\n            {\n                temp[lenth][0]=nums[k][0];\n                temp[lenth++][1]=nums[k][1];\n            }\n        }\n        (*returnColumnSizes)[j]=lenth;\n        sort(temp, (*returnColumnSizes)[j]);\n        answer[j]=(int*)malloc(sizeof(int)*(*returnColumnSizes)[j]);\n        for(k=0; k<(*returnColumnSizes)[j]; k++)\n            answer[j][k]=temp[k][0];\n    }\n    return answer;\n}\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"tuuna":[null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2513471909","body":"#include <vector>\n\nclass CustomStack {\nprivate:\n    std::vector<int> stack;\n    int maxSize;\n\npublic:\n    CustomStack(int maxSize) {\n        this->maxSize = maxSize;\n    }\n    \n    void push(int x) {\n        if (stack.size() < maxSize) {\n            stack.push_back(x);\n        }\n    }\n    \n    int pop() {\n        if (!stack.empty()) {\n            int top = stack.back();\n            stack.pop_back();\n            return top;\n        } else {\n            return -1;\n        }\n    }\n    \n    void increment(int k, int val) {\n        for (int i = 0; i < k && i < stack.size(); i++) {\n            stack[i] += val;\n        }\n    }\n};","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2517226488","body":"#include <stack>\n#include <string>\n\nclass Solution {\npublic:\n    string decodeString(string s) {\n        std::stack<int> counts;\n        std::stack<std::string> strings;\n        std::string currentString;\n        int count = 0;\n        \n        for (char ch : s) {\n            if (isdigit(ch)) {\n                count = count * 10 + ch - '0';\n            } else if (ch == '[') {\n                counts.push(count);\n                strings.push(currentString);\n                count = 0;\n                currentString.clear();\n            } else if (ch == ']') {\n                std::string decodedString = strings.top();\n                strings.pop();\n                int repeatCount = counts.top();\n                counts.pop();\n                for (int i = 0; i < repeatCount; i++) {\n                    decodedString += currentString;\n                }\n                currentString = decodedString;\n            } else {\n                currentString += ch;\n            }\n        }\n        \n        return currentString;\n    }\n};","onTime":true},null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525940157","body":"struct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode dummy(0);\n        dummy.next = head;\n        ListNode* prev = &dummy;\n        while (head && head->next) {\n            ListNode* first = head;\n            ListNode* second = head->next;\n\n            // 交换两个节点\n            first->next = second->next;\n            second->next = first;\n            prev->next = second;\n\n            // 移动到下一对节点\n            prev = first;\n            head = first->next;\n        }\n        return dummy.next;\n    }\n};","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530764213","body":"struct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode dummy(0);\n        dummy.next = head;\n        ListNode* prev = &dummy;\n        while (head && head->next) {\n            ListNode* first = head;\n            ListNode* second = head->next;\n\n            // 交换两个节点\n            first->next = second->next;\n            second->next = first;\n            prev->next = second;\n\n            // 移动到下一对节点\n            prev = first;\n            head = first->next;\n        }\n        return dummy.next;\n    }\n};","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544696368","body":"#include <queue>\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nint findBottomLeftValue(TreeNode* root) {\n    std::queue<TreeNode*> q;\n    q.push(root);\n    int result = root->val;\n    while (!q.empty()) {\n        int size = q.size();\n        for (int i = 0; i < size; ++i) {\n            TreeNode* node = q.front();\n            q.pop();\n            // 对于每一层的第一个元素，更新结果\n            if (i == 0) {\n                result = node->val;\n            }\n            if (node->left) {\n                q.push(node->left);\n            }\n            if (node->right) {\n                q.push(node->right);\n            }\n        }\n    }\n    return result;\n}","onTime":true},null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/20#issuecomment-2552675895","body":"#include <algorithm>\n#include <iostream>\n#include <vector>\n\nstd::vector<int> solution(std::vector<int> &nums, int target) {\n  // 对数组进行排序\n  std::sort(nums.begin(), nums.end());\n\n  // 初始化两个指针\n  int left = 0;\n  int right = nums.size() - 1;\n\n  // 使用双指针遍历数组\n  while (left < right) {\n    int sum = nums[left] + nums[right];\n\n    if (sum == target) {\n      // 找到目标值，返回两个指针的下标\n      return {left, right};\n    } else if (sum < target) {\n      // 和小于目标值，移动左指针\n      ++left;\n    } else {\n      // 和大于目标值，移动右指针\n      --right;\n    }\n  }\n\n  // 如果没有找到，返回空数组（题目保证有解，所以这里不会执行）\n  return {};\n}\n\nint main() {\n  std::vector<int> nums = {2, 7, 11, 15};\n  int target = 9;\n  std::vector<int> result = solution(nums, target);\n  std::cout << \"[\" << result[0] << \", \" << result[1] << \"]\" << std::endl;\n  return 0;\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"lxy12l":[null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2514442473","body":"class CustomStack(object):\n\n    def __init__(self, maxSize):\n        \n        self.stack=[]\n        self.maxSize=maxSize\n        \n\n    def push(self, x):\n       \n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n        \n\n    def pop(self):\n        \n        if len(self.stack)>0:\n           return self.stack.pop()\n        else:\n            return -1\n        \n\n    def increment(self, k, val):\n      \n        for i in range(min(k,len(self.stack))):\n            self.stack[i] += val","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"chxbilly":[null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2516607851","body":"class Solution(object):\n    def decodeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        number_stack = []\n        string_stack = []\n        current_string = \"\"\n        current_number = 0\n\n        for char in s:\n            if char.isdigit():\n                current_number = current_number * 10 + int(char) #need to include *10 for s= \"123[leetcode]\", for anything bigger than 9\n            elif char == '[':\n                number_stack.append(current_number)\n                string_stack.append(current_string)\n                current_number = 0\n                current_string = \"\"\n            elif char == ']':\n                #when reach the right ), look at whats in side the () and the repeat number related to it\n                repeat_number = number_stack.pop() #the list delete the last one\n                previous_string = string_stack.pop() \n                current_string = previous_string + current_string * repeat_number\n            else:\n                current_string += char\n\n        return current_string\n        ","onTime":true},null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2530716669","body":"*### 思路*\n\n要用两个variable分别指向两个链表的头节点head A，B，要用上这两个（初始华）\n\n需要看完整的两个list until intersect or none\n\ni\n\n*### 代码(Python)*\n\n```\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        a, b = headA, headB\n        while a != b:\n            a = a.next if a else headB #if p1 means if p1 is not none\n            b = b.next if b else headA\n        return a\n```\n\n复杂度分析\n\n- 时间复杂度：O(N)，其中 N 为数组长度。\n- 空间复杂度：O(1)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"sentiy-hub":[{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/2#issuecomment-2520185325","body":"```\nvar addToArrayForm = function(num, k) {\n  let sum = BigInt(num.join('')) + BigInt(k);    // O(n)\n  return String(sum).split('').map(Number); // O(n)\n}\n```\n// 时间复杂度：O(n)，其中 n 是数组长度\n// 空间复杂度：O(n)，需要创建新数组存储结果","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/3#issuecomment-2520249765","body":"```\nvar shortestToChar = function(s, c) {\n  const n = s.length;\n  const prev = [];\n  let lastPos = -n;\n\n  // 从左到右遍历,记录上一次出现 c 的位置\n  for (let i = 0; i < n; i++) {\n      if (s[i] === c) {\n          lastPos = i;\n      }\n      prev[i] = i - lastPos;\n  }\n\n  lastPos = 2 * n;\n  // 从右到左遍历,记录下一次出现 c 的位置\n  for (let i = n - 1; i >= 0; i--) {\n      if (s[i] === c) {\n          lastPos = i;\n      }\n      prev[i] = Math.min(prev[i], lastPos - i);\n  }\n\n  return prev;\n};\n```\n时间复杂度 O(n)\n空间复杂度 O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/4#issuecomment-2520263281","body":"```\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n  this.list = []\n  this.maxSize = maxSize\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n  if (this.list.length < this.maxSize) {\n    this.list.push(x)\n  }\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n  const item = this.list.pop()\n  return item === void 0 ? -1 : item\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n  for (let i = 0; i < k && i < this.list.length; i++) {\n    this.list[i] += val\n  }\n};\n\n/** \n * Your CustomStack object will be instantiated and called as such:\n * var obj = new CustomStack(maxSize)\n * obj.push(x)\n * var param_2 = obj.pop()\n * obj.increment(k,val)\n */\n```","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/5#issuecomment-2520270798","body":"```\nvar decodeString = function(s) {\n    let result = '';\n    let num = 0;\n\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n\n        if (!isNaN(parseInt(char))) {\n            num = num * 10 + parseInt(char);\n        } else if (char === '[') {\n            let j = i;\n            let count = 1;\n            while (count !== 0) {\n                j++;\n                if (s[j] === '[') count++;\n                if (s[j] === ']') count--;\n            }\n            const innerString = decodeString(s.slice(i + 1, j));\n            result += innerString.repeat(num);\n            i = j;\n            num = 0;\n        } else if (char !== ']') {\n            result += char;\n        }\n    }\n\n    return result;\n};\n```\n时间复杂度 O(n)\n空间复杂度 O(n)","onTime":false},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/6#issuecomment-2520177599","body":"```\r\nvar addToArrayForm = function(num, k) {\r\n  let sum = BigInt(num.join('')) + BigInt(k);    // O(n)\r\n  return String(sum).split('').map(Number); // O(n)\r\n}\r\n```\r\n// 时间复杂度：O(n)，其中 n 是数组长度\r\n// 空间复杂度：O(n)，需要创建新数组存储结果","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523113072","body":"思路：\n首先计算每个位置左边的最大值 prevMax 和每个位置右边的最小值 nextMin。\n然后遍历数组,检查每个位置 i 是否满足 prevMax[i] <= nextMin[i+1]。如果满足,说明可以在位置 i 处切分成一个块。\n最后还需要加上最后一个块,所以返回 count + 1。\n\n```\nvar maxChunksToSorted = function(arr) {\n    const n = arr.length;\n    let count = 0;\n    const prevMax = new Array(n).fill(0);\n    const nextMin = new Array(n).fill(0);\n\n    // 计算每个位置左边的最大值\n    prevMax[0] = arr[0];\n    for (let i = 1; i < n; i++) {\n        prevMax[i] = Math.max(prevMax[i - 1], arr[i]);\n    }\n\n    // 计算每个位置右边的最小值\n    nextMin[n - 1] = arr[n - 1];\n    for (let i = n - 2; i >= 0; i--) {\n        nextMin[i] = Math.min(nextMin[i + 1], arr[i]);\n    }\n\n    // 遍历数组,检查是否可以形成一个块\n    for (let i = 0; i < n - 1; i++) {\n        if (prevMax[i] <= nextMin[i + 1]) {\n            count++;\n        }\n    }\n\n    // 最后加上最后一个块\n    return count + 1;\n};\n```\n时间复杂度 O(n)\n空间复杂度 O(n)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525096142","body":"```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    if (!head || !head.next) return head; // 空链表或只有一个节点,直接返回\n    \n    // 1. 计算链表长度\n    let n = 0, curr = head;\n    while (curr) {\n        n++;\n        curr = curr.next;\n    }\n    \n    // 2. 计算实际需要旋转的次数\n    k = k % n;\n    if (k === 0) return head; // 不需要旋转\n    \n    // 3. 找到倒数第 k' 个节点\n    curr = head;\n    for (let i = 0; i < n - k - 1; i++) {\n        curr = curr.next;\n    }\n    let newHead = curr.next;\n    \n    // 4. 形成环\n    curr.next = null;\n    curr = newHead;\n    while (curr.next) {\n        curr = curr.next;\n    }\n    curr.next = head;\n    \n    // 5. 返回新的头节点\n    return newHead;\n};\n```\n时间复杂度 O(n)\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2525554848","body":"```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function(head) {\n    // 如果链表为空或只有一个节点,直接返回\n    if (!head || !head.next) {\n        return head;\n    }\n    \n    // 创建一个虚拟头节点,方便处理边界条件\n    let dummy = new ListNode(0);\n    dummy.next = head;\n    \n    // 三个指针:prev用于记录上一个节点,curr用于当前节点,nextNode用于记录下一个节点\n    let prev = dummy;\n    let curr = head;\n    \n    // 遍历链表,每次处理两个节点\n    while (curr && curr.next) {\n        // 保存下一个节点的地址\n        let nextNode = curr.next.next;\n        \n        // 交换当前两个节点\n        prev.next = curr.next;\n        curr.next.next = curr;\n        curr.next = nextNode;\n        \n        // 移动三个指针到下一个要处理的节点对\n        prev = curr;\n        curr = nextNode;\n    }\n    \n    // 返回交换后的链表头部\n    return dummy.next;\n};\n```\n时间复杂度 O(n)\n空间复杂度 O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/10#issuecomment-2527684530","body":"```\n/**\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n\n/**\n * @param {ListNode} head - 输入的有序链表头节点\n * @return {TreeNode} - 返回构造的平衡二叉搜索树的根节点\n */\nvar sortedListToBST = function(head) {\n    // 处理基础情况\n    // 如果链表为空，返回空节点\n    if (!head) return null;\n    // 如果只有一个节点，直接返回树节点\n    if (!head.next) return new TreeNode(head.val);\n    \n    // 使用快慢指针找到链表的中间节点\n    let slow = head;        // 慢指针，每次移动一步\n    let fast = head;        // 快指针，每次移动两步\n    let prev = null;        // 记录慢指针的前一个节点\n    \n    // 当快指针能够继续移动时，移动快慢指针\n    while (fast && fast.next) {\n        fast = fast.next.next;\n        prev = slow;\n        slow = slow.next;\n    }\n    \n    // 在中间节点处断开链表，分成左右两部分\n    prev.next = null;\n    \n    // 用中间节点的值创建根节点\n    const root = new TreeNode(slow.val);\n    \n    // 递归构建左右子树\n    // 左子树由链表的前半部分构建\n    root.left = sortedListToBST(head);\n    // 右子树由链表的后半部分构建\n    root.right = sortedListToBST(slow.next);\n    \n    return root;\n};\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2529898613","body":"```\nvar getIntersectionNode = function(headA, headB) {\n    // 如果任一链表为空，则不可能相交\n    if (!headA || !headB) return null;\n    \n    // 初始化两个指针\n    let ptrA = headA;\n    let ptrB = headB;\n    \n    // 当两个指针不相等时继续遍历\n    while (ptrA !== ptrB) {\n        // 移动指针 A\n        ptrA = ptrA ? ptrA.next : headB;\n        // 移动指针 B\n        ptrB = ptrB ? ptrB.next : headA;\n    }\n    \n    // 返回相交点（如果没有相交，ptrA 会是 null）\n    return ptrA;\n};\n```\n时间复杂度 O(n+m) \n空间复杂度 O(1) ","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/12#issuecomment-2535999072","body":"思路 快慢指针 \n\n```\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar detectCycle = function(head) {\n    if (!head || !head.next) return null;\n    \n    // 1. 使用快慢指针找相遇点\n    let slow = head;\n    let fast = head;\n    let hasCycle = false;\n    \n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n        if (slow === fast) {\n            hasCycle = true;\n            break;\n        }\n    }\n    \n    // 如果没有环，返回 null\n    if (!hasCycle) return null;\n    \n    // 2. 一个指针回到起点，两指针同速前进找入口\n    slow = head;\n    while (slow !== fast) {\n        slow = slow.next;\n        fast = fast.next;\n    }\n    \n    return slow;\n};\n```\n\n：\n时间复杂度：O(n)\n空间复杂度：O(1)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/13#issuecomment-2537504795","body":"```\r\nclass LRUCache {\r\n  constructor(capacity) {\r\n    this.cache = new Map();\r\n    this.capacity = capacity;\r\n  }\r\n\r\n  get(key) {\r\n    if (!this.cache.has(key)) return -1;\r\n    \r\n    // 获取值并刷新位置\r\n    const value = this.cache.get(key);\r\n    this.cache.delete(key);\r\n    this.cache.set(key, value);\r\n    return value;\r\n  }\r\n\r\n  put(key, value) {\r\n    // 如果键存在,先删除\r\n    if (this.cache.has(key)) {\r\n      this.cache.delete(key);\r\n    }\r\n    // 如果缓存满了,删除最久未使用的\r\n    else if (this.cache.size >= this.capacity) {\r\n      this.cache.delete(this.cache.keys().next().value);\r\n    }\r\n    // 添加新键值对\r\n    this.cache.set(key, value);\r\n  }\r\n}\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2540828302","body":"```\nvar maxDepth = function (root) {\n    // 如果树为空，返回0\n    if (!root) return 0;\n\n    // 使用队列来进行层序遍历\n    const queue = [root];\n    let depth = 0;\n\n    // 当队列不为空时继续遍历\n    while (queue.length > 0) {\n        depth++; // 每遍历一层，深度加1\n\n        // 获取当前层的节点数量\n        const levelSize = queue.length;\n\n        // 遍历当前层的所有节点\n        for (let i = 0; i < levelSize; i++) {\n            // 取出队列头部的节点\n            const node = queue.shift();\n\n            // 如果有左子节点，加入队列\n            if (node.left) {\n                queue.push(node.left);\n            }\n\n            // 如果有右子节点，加入队列\n            if (node.right) {\n                queue.push(node.right);\n            }\n        }\n    }\n\n    return depth;\n\n};\n```\n\n时间、空间复杂度都为 0(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543128062","body":"```\nvar isSameTree = function(p, q) {\n    const queue = [[p, q]];\n    \n    while (queue.length) {\n        const [node1, node2] = queue.shift();\n        \n        // 相同的检查逻辑\n        if (!node1 && !node2) continue;\n        if (!node1 || !node2) return false;\n        if (node1.val !== node2.val) return false;\n        \n        // 将左右子节点放入队列\n        queue.push([node1.left, node2.left]);\n        queue.push([node1.right, node2.right]);\n    }\n    \n    return true;\n};\n```\n\n时间、空间复杂度均为0(N)","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543736285","body":"```\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function(root) {\n    // 边界情况：空树\n    if (!root) return 0;\n    \n    // DFS遍历的辅助函数\n    function dfs(node, currentSum) {\n        // 基础情况：空节点\n        if (!node) return 0;\n        \n        // 计算当前数字：将当前数字乘10并加上当前节点值\n        const newSum = currentSum * 10 + node.val;\n        \n        // 如果是叶子节点，返回当前路径和\n        if (!node.left && !node.right) {\n            return newSum;\n        }\n        \n        // 递归计算左右子树的和并相加\n        return dfs(node.left, newSum) + dfs(node.right, newSum);\n    }\n    \n    // 从根节点开始DFS，初始和为0\n    return dfs(root, 0);\n};\n```\n时间复杂度：O(N)\n空间复杂度：O(H)，H是树的高度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2544542144","body":"```\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar findBottomLeftValue = function(root) {\n    if (!root) return 0;\n    \n    const queue = [root];\n    let leftmost = 0;\n    \n    while (queue.length > 0) {\n        const size = queue.length;\n        \n        for (let i = 0; i < size; i++) {\n            const node = queue.shift();\n            \n            // 记录每一层的第一个节点值\n            if (i === 0) {\n                leftmost = node.val;\n            }\n            \n            // 先加入左子节点，再加入右子节点\n            if (node.left) {\n                queue.push(node.left);\n            }\n            if (node.right) {\n                queue.push(node.right);\n            }\n        }\n    }\n    \n    return leftmost;\n};\n```\n\n时间复杂度：O(n)，其中 n 是二叉树的节点数\n空间复杂度：O(w)，其中 w 是二叉树的最大宽度","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/18#issuecomment-2548257653","body":"```\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    if (!root) return \"[]\";\n    \n    const queue = [root];\n    const result = [];\n    \n    while (queue.length) {\n        const node = queue.shift();\n        \n        if (node) {\n            result.push(node.val);\n            queue.push(node.left);\n            queue.push(node.right);\n        } else {\n            result.push(null);\n        }\n    }\n    \n    // 去掉尾部的 null\n    while (result[result.length - 1] === null) {\n        result.pop();\n    }\n    \n    return `[${result.join(',')}]`;\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    if (data === \"[]\") return null;\n    \n    // 解析字符串成数组\n    const values = data.slice(1, -1).split(',').map(val => \n        val === \"\" || val === \"null\" ? null : parseInt(val)\n    );\n    \n    const root = new TreeNode(values[0]);\n    const queue = [root];\n    let i = 1;\n    \n    while (queue.length && i < values.length) {\n        const node = queue.shift();\n        \n        // 处理左子节点\n        if (i < values.length && values[i] !== null) {\n            node.left = new TreeNode(values[i]);\n            queue.push(node.left);\n        }\n        i++;\n        \n        // 处理右子节点\n        if (i < values.length && values[i] !== null) {\n            node.right = new TreeNode(values[i]);\n            queue.push(node.right);\n        }\n        i++;\n    }\n    \n    return root;\n};\n```\n\n (serialize):时间复杂度: O(n),空间复杂度: O(n)\n (deserialize):时间复杂度: O(n),空间复杂度: O(n)","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"fea1220":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2522026419","body":"class Solution(object):\n    def maxChunksToSorted(self, arr):\n        count_a = collections.defaultdict(int)\n        count_b = collections.defaultdict(int)\n        ans = 0\n\n        for a, b in zip(arr, sorted(arr)):\n            count_a[a] += 1\n            count_b[b] += 1\n            if count_a == count_b: ans += 1\n\n        return ans","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"wtbkevin":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523075197","body":"function maxToSort(arr) {\n    if (!arr || arr.length === 0) {\n        return 0;\n    }\n\n    const n = arr.length;\n    const maxLeft = new Array(n).fill(0);\n    const minRight = new Array(n).fill(0);\n\n    maxLeft[0] = arr[0];\n    for (let i = 1; i < n; i++) {\n        maxLeft[i] = Math.max(maxLeft[i - 1], arr[i]);\n    }\n\n    minRight[n - 1] = arr[n - 1];\n    for (let i = n - 2; i >= 0; i--) {\n        minRight[i] = Math.min(minRight[i + 1], arr[i]);\n    }\n\n    let chunks = 0;\n    for (let i = 0; i < n - 1; i++) {\n        if (maxLeft[i] <= minRight[i + 1]) {\n            chunks++;\n        }\n    }\n\n    return chunks + 1;\n}","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/14#issuecomment-2541114573","body":"function maxDepth(root) {\n    if (root === null) {\n        return 0;\n    }\n\n    let queue = [root];\n    let depth = 0;\n\n    while (queue.length > 0) {\n        let levelSize = queue.length;\n        for (let i = 0; i < levelSize; i++) {\n            let node = queue.shift();\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n        depth++;\n    }\n    return depth;\n}","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"awenbocc":[null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/7#issuecomment-2523536578","body":"```\r\nclass Solution(object):\r\n    def maxChunksToSorted(self, arr):\r\n        \"\"\"\r\n        :type arr: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        stack = []\r\n        for a in arr:\r\n            if stack and stack[-1] > a:\r\n                cur = stack[-1]\r\n                while stack and stack[-1] > a: stack.pop()\r\n                stack.append(cur)\r\n            else:\r\n                stack.append(a)\r\n        return len(stack)\r\n```","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2525213933","body":"class  Solution:\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\n        if k == 0 or not head or not head.next:\n            return head\n        \n        n = 1\n        cur = head\n        while cur.next:\n            cur = cur.next\n            n += 1\n        \n        if (add := n - k % n) == n:\n            return head\n        \n        cur.next = head\n        while add:\n            cur = cur.next\n            add -= 1\n        \n        ret = cur.next\n        cur.next = None\n        return ret","onTime":true},{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/9#issuecomment-2526185791","body":"```\r\nclass Solution:\r\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        if not head or not head.next:\r\n            return head\r\n        first, second = head, head.next\r\n        prev = None\r\n        new_head = head\r\n        while first.next:\r\n            second = first.next\r\n            first.next = second.next\r\n            second.next = first\r\n            if prev:\r\n                prev.next = second\r\n            if new_head == head:\r\n                new_head = second\r\n            if first.next:\r\n                prev = first\r\n                first = first.next\r\n        return new_head\r\n```","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/11#issuecomment-2532087617","body":"```\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\r\n        a, b = headA, headB\r\n        while a != b:\r\n            a = a.next if a else headB\r\n            b = b.next if b else headA\r\n        return a\r\n```","onTime":true},null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/16#issuecomment-2543882655","body":"```\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        def dfs(root: TreeNode, prevTotal: int) -> int:\n            if not root:\n                return 0\n            total = prevTotal * 10 + root.val\n            if not root.left and not root.right:\n                return total\n            else:\n                return dfs(root.left, total) + dfs(root.right, total)\n\n        return dfs(root, 0)\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"hallcia":[null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/8#issuecomment-2524974471","body":"```\r\nclass  Solution:\r\n    def rotateRight(self, head: ListNode, k: int) -> ListNode:\r\n        if k == 0 or not head or not head.next:\r\n            return head\r\n        \r\n        n = 1\r\n        cur = head\r\n        while cur.next:\r\n            cur = cur.next\r\n            n += 1\r\n        \r\n        if (add := n - k % n) == n:\r\n            return head\r\n        \r\n        cur.next = head\r\n        while add:\r\n            cur = cur.next\r\n            add -= 1\r\n        \r\n        ret = cur.next\r\n        cur.next = None\r\n        return ret\r\n\r\n```","onTime":true},null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/15#issuecomment-2543000440","body":"```\r\nclass Solution:\r\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\r\n        if not p and not q:\r\n            return True\r\n        if not p or not q:\r\n            return False\r\n        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\r\n```","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"huzhipeng-hu":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/17#issuecomment-2546012711","body":"思路：对树进行广度优先遍历，最后一个为的值为答案\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        int temp;//保存最终值\n        queue<TreeNode*> a;//借助队列进行广度优先遍历\n        a.push(root);\n        while(!a.empty())\n        {\n            TreeNode*p=a.front();\n            a.pop();\n            if(p->right)\n                a.push(p->right);\n            if(p->left)\n                a.push(p->left);\n            temp=p->val;\n        } \n        return temp;\n    }\n};\n时间复杂度O（N）；","onTime":true},null,{"url":"https://github.com/leetcode-pp/91alg-15-daily-check/issues/19#issuecomment-2551671889","body":"# 91天算法打卡\n\n## 第18天·\n\n问题链接：https://leetcode.cn/problems/vertical-order-traversal-of-a-binary-tree/description/\n问题分析：大致思路，对树进行遍历并且对于相对应的节点进行大标签（难点，如何进行遍历时将点的值与坐标挂上关联），进行排序，最后输出\n\n代码：\n\n``class Solution {`\n\n`public:`\n\n  `vector<tuple<int,int,int> >temp;`\n\n​    `void dfs(TreeNode*root,int row,int col)`\n\n​    `{`\n\n​      `if(root==nullptr)`\n\n​      \t`return;`\n\n​      `temp.emplace_back(col,row,root->val);`\n\n​      `dfs(root->left,row+1,col-1);`\n\n​      `dfs(root->right,row+1,col+1);`\n\n​    `}`\n\n  `vector<vector<int>> verticalTraversal(TreeNode* root)` \n\n  `{`\n\n  \t  `dfs(root,0,0);`\n\n​    \t`sort(temp.begin(),temp.end());`\n\n​    \t`vector<vector<int>> arry;`\n\n​    \t`int cmpar=INT_MAX;`\n\n​    `for(const auto&[col,row,val]:temp)`\n\n​    `{`\n\n​      \t`if(col!=cmpar)`\n\n​     \t `{`\n\n​        \t`cmpar=col;`\n\n​        \t`arry.emplace_back();`\n\n​      \t`}`\n\n​      `arry.back().push_back(val);`\n\n​    `}`\n\n​    \t`return arry;`\n\n  \t`}`\n\n`}`\n\n时间复杂度为：O（nlogN）\n\n空间复杂度：O（logN）","onTime":true},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}